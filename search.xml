<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>易班定位打卡签到系统说明</title>
      <link href="/2023/09/22/Readme/"/>
      <url>/2023/09/22/Readme/</url>
      
        <content type="html"><![CDATA[<h2 id="易班定位打卡代签系统"><a href="#易班定位打卡代签系统" class="headerlink" title="易班定位打卡代签系统"></a>易班定位打卡代签系统</h2><h3 id="1-我们能做什么"><a href="#1-我们能做什么" class="headerlink" title="1.我们能做什么"></a>1.我们能做什么</h3><p>为响应学校晚归的要求，同时保持一贯的生活作息习惯。让莘莘学子在放学后也能安心去玩，享受夜生活，特推出该系统来帮同学们解决这一难题。</p><p>简单来说，系统就是用服务器设置定时运行脚本任务，利用python脚本在规定时间发送签到请求到易班的服务器来实现签到</p><ul><li><p>手机签到方式<br><img src="https://img1.imgtp.com/2023/09/22/kPSv43xA.png" alt="mhtAcds3upFO1jv.png"></p></li><li><p>脚本签到<br><img src="https://img1.imgtp.com/2023/09/22/lAlFk6ku.png" alt="ftf.png"></p></li></ul><p>优点：</p><ul><li>非修改数据，安全绿色无风险</li><li>全自动按时签到不遗忘</li><li>专人维护应对突发状况</li><li>配套可用应急响应方案</li></ul><h3 id="2-选择合适的方案"><a href="#2-选择合适的方案" class="headerlink" title="2.选择合适的方案"></a>2.选择合适的方案</h3><p>因服务器和维护以及开发的成本，该项服务暂时未免费开放。</p><p>我们提供以下可供选择的方案：</p><ul><li>单次                 2块</li><li>包周（7天）    5块</li><li>包月（30天）  12块</li><li>永久 (9999天)    20块      </li><li>应急响应包      10块</li></ul><blockquote><p>注：<strong>应急响应包</strong>内容包括提供虚拟定位软件和使用方法，用户可以远程实现打卡签到</p></blockquote><h3 id="3-如何订购"><a href="#3-如何订购" class="headerlink" title="3.如何订购"></a>3.如何订购</h3><p>需要按以下格式填好，发送一封邮件到<a href="mailto:&#105;&#x68;&#x6d;&#111;&#x64;&#64;&#x71;&#113;&#x2e;&#x63;&#x6f;&#x6d;">&#105;&#x68;&#x6d;&#111;&#x64;&#64;&#x71;&#113;&#x2e;&#x63;&#x6f;&#x6d;</a></p><pre class="line-numbers language-none"><code class="language-none">#【邮件模板】- 订购类型：- 姓名：- 几栋：- 学号：- 身份证后六位：- 是否需要试用一天：是&#x2F;否- 附一张打卡成功的截图（像下面这样）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img1.imgtp.com/2023/09/22/uqWzVait.png" alt="xxdz.png"> </p><blockquote><p>注：【对必要信息的说明】<br>套餐类型：单次&#x2F;包周&#x2F;包月&#x2F;永久&#x2F;应急响应包<br>姓名：可有可无，方便称呼而已<br>几栋：必要，打卡的位置信息<br>学号：必要，打卡签到登录的账号<br>身份证后六位：必要，打卡签到的密码是 <strong>‘Hnie@xxxxxx’</strong><br>试用：仅限 <strong>包周&#x2F;包月&#x2F;永久用户</strong><br>截图：必要，打卡要想精准，必须要有详细打卡位置信息</p></blockquote><h3 id="4-应急响应方案"><a href="#4-应急响应方案" class="headerlink" title="4.应急响应方案"></a>4.应急响应方案</h3><p>在遇到特殊情况脚本失效的时候</p><p>我们会邮件通知到用户，并提供一款手机免root虚拟定位软件以及易班网页签到的方法</p><p>用户远程手机操作就能签到</p><p><img src="https://img1.imgtp.com/2023/09/22/iXxbCqNK.png" alt="utf.png"></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Read Me</title>
      <link href="/2023/07/05/REDEME/"/>
      <url>/2023/07/05/REDEME/</url>
      
        <content type="html"><![CDATA[<div class="note info simple"><p>这里是我做过的项目展示，因为时间关系还没来得及部署上线</p><p>均为在本地运行截图的展示</p></div><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>10-12</p></div></div><div class='timeline-item-content'><p>个人博客</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>02-03</p></div></div><div class='timeline-item-content'><p>后台管理系统</p></div></div></div><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2021</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>07-08</p></div></div><div class='timeline-item-content'><p>易班自动打卡</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-06</p></div></div><div class='timeline-item-content'><p>投票系统</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>永州农贸商城系统</p></div></div></div><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2020</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-06</p></div></div><div class='timeline-item-content'><p>超市会员管理系统</p></div></div></div><h3 id="移动端投票系统"><a href="#移动端投票系统" class="headerlink" title="移动端投票系统"></a>移动端投票系统</h3><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"https://s2.loli.net/2023/07/05/zfWMNSixF3qALh4.jpg","alt":"QQ图片20230516105258"},{"url":"https://s2.loli.net/2023/07/05/scwqdf1vZetOAXg.png","alt":"QQ图片20230516105251"},{"url":"https://s2.loli.net/2023/07/05/YyxwP3kMvK2CszW.jpg","alt":"QQ图片20230516105254"}]</span>    </div>    <button class="gallery-load-more"><span>加载更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div><h3 id="后台管理系统"><a href="#后台管理系统" class="headerlink" title="后台管理系统"></a>后台管理系统</h3><p><img src="https://s2.loli.net/2023/07/05/3IPDAmBrkdMVW6T.png" alt="image-20230705155354035"></p><p><img src="https://s2.loli.net/2023/07/05/ioBIZ8YnRxameru.png" alt="image-20230705155404069"></p><p><img src="https://s2.loli.net/2023/07/05/glUY7WwIFvrXxB9.png" alt="image-20230705155413137"></p><h3 id="个人博客系统"><a href="#个人博客系统" class="headerlink" title="个人博客系统"></a>个人博客系统</h3><p><img src="https://s2.loli.net/2023/07/05/8duR495QecVDNTo.jpg" alt="QQ图片20230516104550"></p><h3 id="超市会员管理系统"><a href="#超市会员管理系统" class="headerlink" title="超市会员管理系统"></a>超市会员管理系统</h3><p><img src="https://s2.loli.net/2023/07/05/GXtOUqTm7lzf3jH.png" alt="image-20230705155921385"></p><p><img src="https://s2.loli.net/2023/07/05/9LVJRMQ1NSrljXd.png" alt="image-20230705155927622"></p><p><img src="https://s2.loli.net/2023/07/05/UhSKEkntfaLJ27l.png" alt="image-20230705155944693"></p><h3 id="永州农贸商城系统"><a href="#永州农贸商城系统" class="headerlink" title="永州农贸商城系统"></a>永州农贸商城系统</h3><p><img src="https://s2.loli.net/2023/07/05/bIS5KAN2pFuJPBM.png" alt="image-20230705160240617"></p><p><img src="https://s2.loli.net/2023/07/05/BDORevPZgn16asf.png" alt="image-20230705161137618"></p><h3 id="易班自动打卡签到项目"><a href="#易班自动打卡签到项目" class="headerlink" title="易班自动打卡签到项目"></a>易班自动打卡签到项目</h3><p><img src="https://s2.loli.net/2023/07/05/g16SbcZIUwRN9Ev.jpg" alt="QQ图片20230516102606"></p><p><img src="https://s2.loli.net/2023/07/05/jtIEN9aZpF4HmXP.png" alt="QQ图片20230516102559"></p><h3 id="最近在学习linux网络编程"><a href="#最近在学习linux网络编程" class="headerlink" title="最近在学习linux网络编程"></a>最近在学习linux网络编程</h3><p><a href="http://120.78.160.78/me/">http://120.78.160.78/me/</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端面试题</title>
      <link href="/2023/06/27/web/"/>
      <url>/2023/06/27/web/</url>
      
        <content type="html"><![CDATA[<ul><li><p>官方 <a href="https://vue3js.cn/interview/">https://vue3js.cn/interview/</a></p></li><li><p>cookie、localStorage、sessionStorage区别？</p><p>cookie是客户端发送请求之后，服务器给客户端的一个密钥吧，它有过期时间，并且分别存储在客户端和服务器端，可以用来保存用户的身份信息和状态。</p><p>而localStorage和sessionStorage是H5提供的客户端本地存储，也就是webStorage，都不参与服务器的通信。</p><p>区别是sessionStorage具有同源政策，只在当前窗口能读取，随着窗口关闭就会消失</p><p>localStorage不会过期，只能手动清除</p></li><li><p>内联和内联块有什么区别？</p><p>内联元素是指在默认情况下，其内容都在同一行内排列，并且宽度由元素内容所撑开。常见的内联元素有span, a, img等。</p><p>内联块元素则跟内联元素类似，同样默认排列在一行内，但是内联块元素可以设置元素的宽度、高度以及内外边距等属性。常见的内联块元素有input, select, label等。</p><p><img src="https://s2.loli.net/2023/06/28/T5CgfxJvIwsr7A1.png"></p></li><li><p>行内元素有哪些？块级元素有哪些？</p><p>HTML 中的元素可以分为两类：块级元素（block element）和行内元素（inline element）。根据 W3C 的规范，每个 HTML 标签都属于其中之一。</p><p>行内元素（Inline Element）有：</p><ol><li>a：链接标签</li><li>b：加粗</li><li>code：计算机代码</li><li>em：强调</li><li>i：斜体</li><li>img：图像</li><li>input：输入框</li><li>label：标签</li><li>span：段落的小区块</li><li>select：下拉列表</li><li>strong：加重语气</li><li>textarea：文本框</li></ol><p>块级元素（Block Level Element）有：</p><ol><li>address：地址</li><li>article：文章</li><li>aside：侧边栏</li><li>blockquote：块引用</li><li>canvas：画布</li><li>dd：定义列表中定义的项目</li><li>div：文档块</li><li>dl：定义列表</li><li>dt：定义列表中项目的定义</li><li>fieldset：表单域集</li><li>figcaption：图像说明</li><li>figure：图像（或图解）与其说明</li><li>footer：网页底部区域</li><li>form：表单</li><li>h1 - h6：标题标签</li><li>header：网页头部区域</li><li>hr：水平分隔线</li><li>li：列表项</li><li>nav：导航链接</li><li>ol：有序列表</li><li>p：段落</li><li>pre：预格式化文本</li><li>section：网页中的章节</li><li>table：表格</li><li>ul：无序列表</li></ol><p>需要注意的是，行内元素通常不能包含块级元素，而块级元素可以包含其他块级元素和行内元素。这个规则在 XHTML 中更为严格，但是在 HTML5 中有所放宽。</p></li><li><p>相对、固定、绝对和静态定位元素之间有什么区别？</p><p>相对定位（Relative positioning）：相对定位是指元素相对于其在文档中原始位置的偏移量进行定位。在相对定位中，元素仍然占据在文档流中的位置，但可以通过设置 top、bottom、left 和 right 属性，来移动元素的位置。相对定位不会对该元素的宽高产生影响，也不会影响其他元素的布局。</p><p>固定定位（Fixed positioning）：固定定位是指元素相对于浏览器窗口（或某个父元素）的位置进行定位。在固定定位中，元素不会随着页面滑动而移动，但也会产生空隙。可以通过设置 top、bottom、left 和 right 属性来确定元素的位置。与相对定位不同，固定定位会脱离文档流，同时固定定位元素的宽高也不会影响其它元素的布局。</p><p>绝对定位（Absolute positioning）：绝对定位是指元素相对于其最近的已定位（即非 static 定位）的祖先元素（父元素或更高级的祖先元素）的位置进行定位。如果没有已定位的祖先元素，则相对于 body 元素定位。绝对定位元素会脱离文档流，并可以通过设置 top、bottom、left 和 right 属性来移动元素的位置。绝对定位也不会影响其他元素的布局。</p><p>静态定位（Static positioning）：静态定位是元素的默认定位方式，也即正常文档流中的布局方式。它保持元素在文档流中的正常位置，并不受 top、bottom、left 和 right 属性的影响。</p><p>需要注意的是，相对定位、绝对定位和固定定位都是相对于其某个祖先元素的位置进行定位，而静态定位是在文档流中按照它在 HTML 中的位置布局。</p></li><li><p>什么是HTML中的空元素？</p><p>在 HTML 中，有一类元素是没有内容的，它们被称为“空元素”或“自闭合元素”，因为它们没有结束标签，而是在开始标签中通过“&#x2F;”符号来自闭合，其中常用的空元素有以下几个：</p><ol><li>img：用于插入图片。</li><li>br：用于换行。</li><li>input：用于输入框、复选框、单选框等表单元素。</li><li>hr：用于分割线。</li><li>meta：用于定义文档的元信息。</li><li>link：用于在 HTML 中引入其他文件，如 CSS 文件、JavaScript 文件等。</li></ol><p>在 HTML5 标准中，空元素不需要使用结束标签，因为它们没有内容需要结束。在这些元素中，有一些元素由于历史原因已被默认允许省略结束标签，如 img，input 等。但是，在编写 HTML 代码时，最好省略结束标签并不意味着完全放弃。遵循 HTML 规范可以增加代码可读性，更好地维护代码。</p></li><li><p>如何居中一个div?</p><p>有多种方法可以将一个 div 元素居中，以下是几种常用的方法：</p><ol><li>使用 flexbox 布局</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>使用 absolute 定位</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.center</span> <span class="token punctuation">&#123;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，.container 表示外部容器，.center 表示要居中的 div 元素。</p><ol start="3"><li>使用 text-align 属性</li></ol><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.container</span> <span class="token punctuation">&#123;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.center</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，.container 表示外部容器，.center 表示要居中的 div 元素，利用 text-align:center 将 .center 元素水平居中，再利用 display:inline-block 将 .center 元素变为行内元素，实现垂直居中。</p><p>以上方法都可以在大部分情况下实现 div 元素的居中，因其各有特点，可根据具体需求选择。</p></li><li><p>W3C 的规范的理解？</p></li></ul><p>  W3C即万维网联盟，是一个国际化标准组织，主要负责制定和推广 Web 标准。</p><p>  重要的规范主要有</p><p>  HTML5、CSS3、ECMAscript（JavaScript）、Web Service规范、SVG（可缩放矢量图形）和XML（可扩展标记语言）</p><ul><li><p>什么是闭包，您如何&#x2F;为什么要使用闭包？</p><p>闭包（closure）是指在函数内部定义的函数，它可以访问到父函数的作用域的变量和参数，即使父函数已经执行完毕，这些变量仍然可以被访问到。</p><p>闭包可以用来实现一些高级的编程技巧，比如：</p><ol><li>私有变量和私有方法：使用闭包可以实现私有变量和私有方法，这些变量和方法只能在函数内部访问，对外是不可见的。</li><li>记忆化函数：使用闭包可以将函数的计算结果缓存下来，下次相同的参数调用时可以直接返回缓存结果，从而提高函数性能。</li><li>模块化开发：使用闭包可以实现模块化开发，将代码以块的形式封装在闭包中，可以避免变量名、函数等命名冲突，同时也方便代码的维护和重用。</li><li>回调函数：使用闭包可以实现回调函数，将一个函数作为参数传递给另一个函数，当满足某些条件时，执行回调函数。</li></ol><p>在 JavaScript 开发中，闭包是非常常见的编程技巧。但同时，过多的使用闭包也会导致内存泄漏等问题，所以在使用闭包时需要注意内存管理，避免滥用闭包。</p></li><li><p>图片懒加载怎么做得？有哪些常见方案？</p><p>图片懒加载（Lazy Load）是一种优化 Web 页面加载速度的技术，它的原理是在页面加载完毕后，仅在用户实际需要时才加载图片，而不是一次性加载页面中所有的图片。这种技术能够加快页面的加载速度，并节省加载带宽，提高页面性能。</p><p>以下是几种常见的图片懒加载实现方案：</p><ol><li>IntersectionObserver API：该 API 可以实现对元素与视窗的交叉区域监测，使用该 API 可以很方便地实现图片懒加载功能。</li><li>原生 JS 实现：使用原生 JavaScript 可以实现图片懒加载功能。具体方法是通过监听页面滚动事件，在图片出现在屏幕可视区域前，不加载图片，当图片滚动至屏幕可视区域时再加载图片。</li><li>使用第三方库：现在有许多第三方库都提供了懒加载图片的功能，比如：JQuery Lazyload 插件、Lozad.js、Layzr.js等，这些库提供了许多配置项，可以根据具体需求选择。</li></ol><p>不论哪种方案，图片懒加载的核心就是将部分资源的加载推迟到其真正需要的时刻，这可以有效地减少页面的初始加载大小，提高网页的初始速度。同时，对于一些图片比较多，且其中一些图片较为复杂无法转为 WebP 格式的情况下，使用图片懒加载也能有效避免页面加载速度过慢的问题。</p></li><li><p>vue 的数据观测原理？</p><p>Vue 的数据观测原理是通过 Object.defineProperty() 方法来实现的。Vue 把需要观测的数据对象中的每个属性都利用 Object.defineProperty() 方法转化为 getter 和 setter，从而实现了数据的劫持。</p><p>当获取数据时，会触发该属性的 getter，Vue会将该属性与之对应的依赖关系收集起来并进行存储。当修改数据时，会触发该属性的 setter，Vue 会通知 Watcher 监听器进行更新。</p></li><li><p>选择器的权重优先级？</p><p>从高到低依次是</p><ol><li><p>!important：!important 声明的样式优先级最高，它可以覆盖任何其他选择器声明的样式。</p></li><li><p>行内样式：使用行内样式时，直接在元素上设置相应的 style 属性，它的权重级别仅次于 !important 声明。</p></li><li><p>ID 选择器：ID 选择器的权重级别为 100。</p></li><li><p>类选择器、属性选择器和伪类选择器：类选择器、属性选择器和伪类选择器的权重级别为 10。</p></li><li><p>标签名选择器和伪元素选择器：标签名选择器和伪元素选择器的权重级别为 1。</p></li></ol></li><li><p>介绍bom、dom？</p><p>BOM（浏览器对象模型）和 DOM（文档对象模型）都是 JavaScript 操作网页的接口。</p><p>BOM 主要是针对浏览器窗口相关的操作，包括浏览器窗口位置、大小、浏览器的历史记录、浏览器跳转、窗口关闭等操作。常见的 BOM 对象包括 window、location、navigator、history、screen 等。</p><p>DOM 则是针对网页文档相关的操作，包括获取、修改网页元素的内容或属性、动态创建、插入和删除网页元素等操作。常见的 DOM 对象包括 document、element、node 等。</p></li><li><p>ES6的新特性？</p><ol><li><p>箭头函数：<code>() = &#123;&#125;</code> 表示一个箭头函数，可以简化函数的书写，并对 this 的指向有一些改变。</p></li><li><p>模板字符串：使用反引号 &#96;&#96; 包括的字符串，可以在其中嵌入表达式，简化字符串拼接的过程。</p></li><li><p>解构赋值：通过类似 <code>[a, b] = [1, 2]</code> 的语法，可以方便地从数组或对象中取出元素并赋值给变量。</p></li><li><p>let 和 const：引入了块级作用域变量，可以通过 let 和 const 声明变量，let 声明的变量可以被修改，const 声明的变量不可修改。</p></li><li><p>默认参数：在函数参数中可以为参数设置默认值，例如：<code>function foo(a=1, b=2) &#123; ... &#125;</code>。</p></li><li><p>扩展运算符：<code>...</code> 可以将数组或类数组对象拆分成单个元素，或将多个参数合并成一个数组。</p></li><li><p>Promise：Promise 是一种处理异步操作的方式，使代码更加简洁和优雅，防止回调地狱的出现。</p></li><li><p>Class：ES6 中可以用 class 和 extends 关键字创建类，简化面向对象编程的过程。</p></li><li><p>模块化：通过 import 和 export 关键字对代码进行模块化，可以分块维护和管理代码。</p></li></ol></li><li><p>http状态码304？</p><p>请求的资源暂时重定向</p></li><li><p>vue的虚拟dom？</p><ol><li>Vue.js通过编译将template 模板转换成渲染函数(render ) ，执行渲染函数就可以得到一个虚拟节点树</li><li>避免不必要的DOM操作，以 JavaScript 对象为基础而不依赖真实平台环境，具有跨平台的优点</li></ol></li><li><p>有没有了解 Webpack 的 loader 和 plugin，它们是怎么实现的？</p></li><li><p>UI 组件和业务组件有什么区别？</p></li><li><p>http 的 GET 和 POST 请求有什么区别？</p></li><li><p>GET 请求和 POST 请求的参数传递有什么区别？</p></li><li><p>如果想用 GET 请求提交数据有什么问题？</p></li><li><p>Keep-alive 是什么？<br>keep-alive是vue中的内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染DOM</p></li><li><p>介绍一下jwt？</p><p>json web token技术</p><p>新一代的身份验证方案，主体包含三部分</p><p>算法.数据.签名</p></li><li><p>为什么要使用WebSocket协议，轮询不行吗？什么是长轮询？</p></li><li><p>position有哪些属性？</p></li><li><p>你有写过自定义指令吗？自定义指令的应用场景有哪些？</p><p>在<code>vue</code>中提供了一套为数据驱动视图更为方便的操作，这些操作被称为指令系统</p><p>注册一个自定义指令有全局注册与局部注册</p><p>全局注册主要是通过<code>Vue.directive</code>方法进行注册</p><p>局部注册通过在组件<code>options</code>选项中设置<code>directive</code>属性</p></li><li><p>Vue3和Vue2感觉有什么区别？</p></li><li><p>你了解vue的diff算法吗？说说看</p></li><li><p>透明属性？</p><p>opacity</p></li><li><p>vuex是什么？</p><p>vuex是vue官方提供的一个状态数据管理插件，主要是用来解决多组件共享数据的问题，它把状态数据存储起来，提供统一的API来进行管理</p></li><li><p>vue-router是什么?</p><p>vue-router是vue官方提供的一个路由器插件库，主要是用来实现单页web应用的切换，通过绑定路径和vue组件，来做到局部页面刷新</p></li><li><p>axios怎么封装的?封装了什么？</p><p>主要是对请求封装和 api 接口封装。http 封装，其实就是实例化一个 axios 对象，并对其进行一些配置。api 封装，主要是对用于单个模块所需要的接口进行管理</p></li><li><p>v-show和v-if区别？</p><p>v-if是真正的条件渲染，是被动的只有条件为真的时候才会渲染，v-show则只是对样式中的display属性的切换，来让元素显示和隐藏</p></li><li><p>v-on和v-once区别？</p><p>v-on是对页面的事件进行绑定监听</p><p>v-oncce是告诉浏览器的Vue编译器,只渲染该元素或组件一次。v-once会覆盖原始内容，数据改变时，插值处的内容不会持续更新。</p></li><li><p>什么是MVVM模型？</p><p>MVVM是Model-View-ViewModel的简写。</p><p>模型 model是以数据为中心的数据访问层</p><p>视图view是用户在屏幕上看到的结构、布局和外观。</p><p>视图模型，ViewModel是用来取出 Model 的数据同时帮忙处理 View 中由于需要展示内容而涉及的业务逻辑。</p></li><li><p>什么是MVC模型？</p><p><img src="https://s2.loli.net/2023/06/28/V8rPUJ1zTBlmXYx.png" alt="image-20230628081421383"></p><p>MVC是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计架构，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。</p></li><li><p>vue怎么实现双向数据绑定？</p></li><li><p>display:none 和 visiablity:hidden 区别？</p><p>两者都可以用来隐藏元素，但是display:none 在隐藏后不会占用空间，也就是看不见摸不着，不会对布局产生影响。而visiablity:hidden 会占用空间，看不见摸得着</p></li><li><p>如何提高页面性能？</p></li><li><p>vue创建项目的两种方式？有何区别？</p></li><li><p>软件研发的生命周期的？</p><p>软件开发周期包括可行性分析和开发计划，需求分析，设计（摘要设计和详细设计），编码，测试，维护等</p></li><li><p>vue的生命周期？<br>组件从 创建 到 销毁 的整个过程就是生命周期</p><ol><li>初始化</li><li>挂载</li><li>更新</li><li>销毁</li></ol></li><li><p>什么是 CDN，使用它有什么好处？</p><p>CDN是指内容分发网络，是一种用于加速互联网内容传输的技术架构。CDN可以将内容分发到全球各地的服务器上，使用户可以从离他们最近的服务器上获取内容，从而提高用户的访问速度和网络响应时间。</p><p>使用CDN的好处包括：</p><ol><li>提高网站性能和访问速度：CDN可以将网站的静态资源分发到全球各地的服务器上，使用户可以从离他们最近的服务器上获取内容，从而减少了网络延迟时间和带宽占用情况，从而提高了网站的访问速度。</li><li>提高网站可用性和稳定性：由于CDN分发的内容存储在多台服务器上，即使其中一台服务器出现故障也不会影响其他服务器的正常运行，从而提高了网站的可用性和稳定性。</li><li>节省带宽成本：通过CDN，网站的静态资源可以由CDN提供商提供，从而减少了网站流量的占用情况，从而节省了带宽成本。</li></ol></li><li><p>解释同步函数和异步函数之间的区别？</p><p>同步函数和异步函数的区别在于它们的执行方式和返回值的含义。在同步函数中，代码按照顺序逐行执行，直到该函数返回结果以后，再执行函数后面的代码。而在异步函数中，代码执行不会等待异步操作完成，而是会立即返回，异步操作完成后再执行回调函数。</p></li><li><p>描述伪元素并讨论它们的用途？</p><p>伪元素是CSS中的一种特殊元素，它们允许开发人员在HTML文档中添加虚构或不存在的元素，以便样式化选择器中的某些部分。伪元素的名称以双冒号(::)引导，并且只能用作选择器的名称的前缀，例如：<code>::before</code> 或 <code>::after</code>。</p><p>::before伪元素用于向元素的内容之前插入新的内容，常用于实现装饰效果，例如添加图标、复选框等。::after伪元素则是向元素的内容之后插入新的内容，常用于清除浮动、实现紧凑的排版等。</p><p>伪元素可以提高开发效率，并且使CSS更加灵活。通过使用伪元素，开发人员可以在不改变HTML结构的情况下，轻松地改变元素的样式和表现形式。</p></li><li><p>描述 BFC（块格式上下文）及其工作原理？</p></li><li><p>canvas和 svg有什么区别？</p><p>Canvas和SVG都是用于创建图形的Web标准技术，但它们有着相当不同的特性和用法。</p><p>Canvas是基于像素的绘图系统，能够以JavaScript为基础，动态地在网页中绘制各种图形，包括图像、简单的动画和交互式游戏等。Canvas图形的绘制过程以像素为基础完成，所以在高分辨率和屏幕变化的情况下会有模糊的效果，适用于动态图形和动画场景，但是不适用于浏览器变化或用于复杂的图形交互。</p><p>SVG是基于矢量的绘图系统，通过XML进行描述和呈现，矢量图形的本质是由一组数字表示的数学公式，在放大或缩小时不失真。因此，SVG图形可以适应各种不同的分辨率和浏览器大小。SVG适用于需要高分辨率和清晰度的图形，以及复杂的数据可视化和交互设计场景。</p><p>总的来说，Canvas适用于动态图形和动画场景，而SVG适用于静态的复杂图形和数据可视化场景。同时，使用Canvas和SVG也有一些相同点，例如使用JavaScript进行绘制，支持图形路径和填充、描边等通用的图形操作和样式设置。</p></li><li><p>什么是渐进式渲染？</p><p>渐进式渲染是一种网页优化技术，它可以改善网页的性能和用户体验。具体来说，它指的是在页面加载时，按照内容的可用性迭代式地显示页面的不同部分。</p></li><li><p>使用 CSS 预处理器的优点&#x2F;缺点是什么？</p></li><li><p>http三次握手？</p><p>HTTP三次握手是建立TCP连接时的一种协议。三次握手的过程可以确保客户端和服务器之间的通信链接能够被成功建立。</p><p>三次握手的具体过程如下：</p><ol><li>第一次握手：客户端向服务器发送一个SYN包，其中SYN标志位被设置为1，表示请求建立一个连接。</li><li>第二次握手：服务器收到客户端的SYN包后，向客户端发送一个ACK包和一个SYN包。其中ACK标志位被设置为1，表示确认收到客户端的SYN包，SYN标志位被设置为1，表示请求建立一个连接。</li><li>第三次握手：客户端收到服务器的ACK包和SYN包后，向服务器发送一个ACK包。其中ACK标志位被设置为1，表示确认收到服务器的数据包。</li></ol><p>三次握手完成后，客户端和服务器之间建立了一个可靠的连接，并开始进行数据的传输。备注：在三次握手完成后，客户端和服务器之间建立了一个TCP连接，HTTP协议是基于TCP连接的，所以HTTP通信过程中也会进行三次握手</p></li><li><p>null和undefined区别？</p><p>null 和 undefined 是两个不同的数据类型，表示不同的含义。</p><p>undefined 表示未定义类型，它表示变量已经声明但没有赋值，或者访问对象不存在的属性。</p><p>null 表示空类型，它表示变量已经赋值为空，或者用来清空变量中的原始值。</p></li><li><p>请解释变量声明提升？</p><p>变量声明提升就是JavaScript中变量可以先使用再声明</p></li><li><p>请描述下事件冒泡机制？</p><p>事件冒泡（Event Bubbling）是浏览器中常见的一种事件传播机制，它表示事件从最具体的元素（文档中嵌套层次最深的那个节点）开始，逐级向上传播，直到到达文档根节点为止。</p></li><li><p>“attribute” 和 “property” 的区别是什么？</p></li><li><p>解释下浮动和它的工作原理?</p><p>浮动出现的最开始出现的意义是用来让文字环绕图片而已。</p><p><code>float</code>可以自动包裹元素。<code>float</code>会导致高度塌陷。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware虚拟机</title>
      <link href="/2023/06/14/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2023/06/14/VMware%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="三种网络模式"><a href="#三种网络模式" class="headerlink" title="三种网络模式"></a>三种网络模式</h2><ul><li>NAT</li><li>仅主机模式</li><li>桥接模式</li></ul><h2 id="watchdog-报错"><a href="#watchdog-报错" class="headerlink" title="watchdog 报错"></a>watchdog 报错</h2><p>推测：物理机CPU温度太高，分配时造成死锁</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VMware </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache和tomcat服务器关系</title>
      <link href="/2023/06/14/apache%E5%92%8Ctomcat%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2023/06/14/apache%E5%92%8Ctomcat%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>Apache是Web服务器而Tomcat是Java应用服务器</p><p>Apache服务器 只处理 静态HTML</p><p>tomcat服务器 静态HTML 动态 JSP Servlet 都能处理</p><p>（1）Apache：是<code>C语言</code>实现的，专门用来提供HTTP服务。</p><p>特性：简单、速度快、性能稳定、可配置（代理）</p><p>1、主要用于解析静态文本，并发性能高，侧重于HTTP服务；</p><p>2、支持静态页（HTML），不支持动态请求如：CGI、Servlet&#x2F;JSP、PHP、ASP等；</p><p>3、具有很强的可扩展性，可以通过插件支持PHP，还可以单向Apache连接Tomcat实现连通；</p><p>4、Apache是世界使用排名第一的Web服务器。</p><p>（2）Tomcat：是<code>Java</code>开发的一个符合JavaEE的Servlet规范的JSP服务器（Servlet容器），是 Apache 的扩展。</p><p>特性：免费的Java应用服务器</p><p>1、主要用于解析JSP&#x2F;Servlet，侧重于Servlet引擎；</p><p>2、支持静态页，但效率没有Apache高；支持Servlet、JSP请求；</p><p>3、Tomcat本身也内置了一个HTTP服务器用于支持静态内容，可以通过Tomcat的配置管理工具实现与Apache整合。</p><p>Apache +和Tomcat组合</p><p>两者整合后优点：如果请求是静态网页则由Apache处理，并将结果返回；如果是动态请求，Apache会将解析工作转发给Tomcat处理，Tomcat处理后将结果通过Apache返回。这样可以达到分工合作，实现负载远衡，提高系统的性能。</p><h2 id="apache-ubuntu"><a href="#apache-ubuntu" class="headerlink" title="apache(ubuntu)"></a>apache(ubuntu)</h2><p>apache安装与配置</p><p>更新安装工具apt update</p><p>安装apache服务 apt install apache2</p><p>检查apache是否安装 apachectl -v</p><p>重启apache服务 &#x2F;etc&#x2F;init.d&#x2F;apache2 restart</p><p>停止apache服务 &#x2F;etc&#x2F;init.d&#x2F;apache2 stop</p><p>启动apache服务 &#x2F;etc&#x2F;init.d&#x2F;apache2 start</p><p>重载apache配置文件 &#x2F;etc&#x2F;init.d&#x2F;apache2 reload</p><p>默认访问端口 80</p><p>默认主目录 &#x2F;var&#x2F;www&#x2F;html</p><p>默认CGI程序目录 &#x2F;usr&#x2F;lib&#x2F;cgi-bin</p><p>监听端口配置文件 &#x2F;etc&#x2F;apache2&#x2F;port.conf</p><p>站点目录配置 &#x2F;etc&#x2F;apache2&#x2F;apache2.conf</p><p>站点配置文件 &#x2F;etc&#x2F;apache2&#x2F;sites-enabled&#x2F;000*</p><p>开启防火墙端口 ufw allow ****</p><p>配置文件下载 &#x2F;etc&#x2F;mime.types application&#x2F;octet-stream</p><p>一个端口可以配置多个页面</p><p>要配置多个端口多个站点</p><p>1.可以将站点配置文件复制一份，开启别的端口</p><p>2.开启监听别的端口</p><p>3.添加站点目录到可访问路径</p><p>4.重载配置文件</p><p>5.重启服务</p><h2 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h2><p>tomcat基于Java开发，所以需要jdk才能运行。</p><p>解压缩jdk,配置环境变量</p><p>把tomcat压缩包放到Linux中，运行bin目录下的startup.sh</p><p>默认8080端口</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BP使用笔记</title>
      <link href="/2023/05/13/BP%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/05/13/BP%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="使用BP抓手机的包"><a href="#使用BP抓手机的包" class="headerlink" title="使用BP抓手机的包"></a>使用BP抓手机的包</h3><ul><li><p>pc抓安卓虚拟机的包</p></li><li><p>pc抓真机的包</p><p>务必使PC和虚拟机处于同一个局域网内</p><p>1.PC开热点，手机连接</p><p>PC必须在启用无线网卡才能开启热点，在CMD查看ip</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">ipconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在本地监听无线网卡的地址加端口比如（192.168.137.1：8080）</p><p>在手机端长按连接的热点设置代理</p><p>2.PC和手机连上同一个无线网</p><p>监听无线网卡地址</p><p>3.PC手机开热点，电脑连</p><p>监听无线网卡地址</p></li></ul><h3 id="资产收集"><a href="#资产收集" class="headerlink" title="资产收集"></a>资产收集</h3><p>OneForAll</p>]]></content>
      
      
      <categories>
          
          <category> SRC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BP </tag>
            
            <tag> 抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL冲突</title>
      <link href="/2023/05/09/MySQL%E5%86%B2%E7%AA%81/"/>
      <url>/2023/05/09/MySQL%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p><img src="https://s2.loli.net/2023/05/09/Cy4auMdBHeRZE8K.png" alt="image-20230509161532585"></p><ul><li>phpstudy中的MySQL的服务启动又关掉了，无法正常使用数据库</li><li>启动过phpstudy的MySQL后（没起来），本地的MySQL连接工具也无法连接了</li></ul><h3 id="分析解决问题"><a href="#分析解决问题" class="headerlink" title="分析解决问题"></a>分析解决问题</h3><p>其实问题往简单说就一句话，有两个MySQL，运行时冲突了导致都不能正常运行，那我们只要卸载其中一个，就可以正常使用啦。</p><p><img src="https://s2.loli.net/2023/05/10/bWVIZEJsUyX5LAr.png" alt="5.7.26"></p><p><img src="https://s2.loli.net/2023/05/09/HR3yTcsGJnjtoWb.png" alt="5.7.38"></p><ul><li>删除服务</li><li>删除环境变量</li></ul><p>但是我有一种执念，又想保留原来的MySQL，又想phpstudy里的MySQL能正常使用。<br>于是开始查资料、分析到底是哪里冲突了</p><ul><li><p>推测一：端口占用</p><p>phpstudy也启动了一个MySQL服务，占用了默认的3306端口，结果哪个都不能正常启动</p><p>排错方法：</p><p>查看端口占用情况</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">netstat -ano|findstr &quot;3306&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有进程占用则杀掉</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#根据进程号查进程名，把1111替换成你查到的进程号tasklist|findstr &quot;1111&quot;；#根据进程名称杀进程：taskkill &#x2F;f &#x2F;t &#x2F;im  进程名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再尝试启动<br>我这里没有发现端口占用，显然不适用</p></li><li><p>推测二：缺少服务</p><p>先查看服务启动了没有</p><pre class="line-numbers language-none"><code class="language-none">#win+r,输入services.msc#回车<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://s2.loli.net/2023/05/09/Vbvr5HINcO4LDFx.png" alt="image-20230509163523300"></p><p>这个服务没有起来，而且路径显示的是本地的MySQL执行文件（本地5.7.38，phpstudy是5.7.26）</p><p>也就是说要phpstudy不能启动是因为没有对应的服务</p><blockquote><p>那能不能为phpstudy的MySQL注册一个服务呢，两个服务井水不犯河水，各自软件使用各自的MySQL服务在同一个端口(3306)，只要不在同一时间，这样子是否可行呢？</p></blockquote><p>注册MySQL服务<br>进入小皮的MySQL存放路径下的bin目录（例如D:\phpstudy_pro\Extensions\MySQL5.7.26\bin）<br>在此路径下打开CMD</p><blockquote><p>【mysqld】：是mysql的核心程序，用于管理mysql的数据库文件以及用户的请求操作，位于bin目录下</p><p>​此处进入小皮的MySQL的bin目录下使用，是因为Windows cmd的命令查找顺序</p><ul><li>1.从当前工作目录查找</li><li>2.环境变量系统PATH</li><li>3.环境变量用户PATH</li></ul></blockquote><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#注册MySQL服务，后面加服务名mysqld  -install   服务名字 #移除MySQL服务mysqld -remove   服务名字 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/05/09/q59FlYueoBr6WEU.png" alt="image-20230509185552733"></p><p>测试这两个服务能不能正常启动、连接到数据库</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">net start MySQL(MySQL2)               #启动服务<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来要用到mysql命令登录，现在系统环境变量path里设置一下命令路径</p><p><img src="https://s2.loli.net/2023/05/09/qBbXfoLl5vSTA4k.png" alt="image-20230509193026660"></p><p>越往上，优先级越高</p><p><img src="https://s2.loli.net/2023/05/09/GHsQ9AVlRXOfTJg.png" alt="image-20230509193337253"></p><p>在path中交换顺序就可以切换mysql了</p><p><img src="https://s2.loli.net/2023/05/09/H1nUsiWKSPcyV3A.png" alt="image-20230509193813541"></p><p>测试登录情况</p><pre class="line-numbers language-none"><code class="language-none">mysql -u root -p            #登录用户名root,使用登录密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本地MySQL</p><p><img src="https://s2.loli.net/2023/05/09/Nw69YOAd73pjXVk.png" alt="image-20230509214220392"></p><p>小皮MySQL</p><p><img src="https://s2.loli.net/2023/05/09/DbwShfJIesCGZ32.png" alt="image-20230509205017991"></p><p>报错了，Access denied for user ‘root‘@’localhost’ (using password: YES)，即密码不对，连不上</p><p>这时候想起来小皮的数据库根本没有初始化</p><pre class="line-numbers language-none"><code class="language-none">mysqld --initialize --console           #执行此命令要保证data目录是空的       <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初始化后用户默认为root，还有一个密码，登录后就可以更改密码</p><p>data目录下生成了一个MySQL连接的基本的数据库</p><p><img src="https://s2.loli.net/2023/05/10/LYFtpHk7qesdPiJ.png" alt="image-20230509210922720"></p><p>修改密码时报错</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">mysql&gt; use mysql;ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>具体参考：</p><a class="btn-beautify blue" href="https://blog.csdn.net/muziljx/article/details/81541896"   title="报错处理"><i class="fa fa-arrow-circle-right"></i><span>报错处理</span></a><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>至此大问题基本解决，两个MySQL服务都能起来，各自的连各自的数据库，但是是不是每次用完这个应用都要关闭对应的MySQL服务，再开另一个，还要修改系统环境变量，那有没有办法同时跑呢？</p><ul><li>首先端口肯定不能一样，修改小皮的MySQL的配置文件my.ini修改端口为3305或者其他非常用的端口</li></ul><p>但是命令行能跑，我们终归还是要回到开发环境，客户端能跑吗？</p><p>测试了一下，还是不能，崩溃，感情做了半天无用功捏？</p><p>但是还是得到了一些信息</p><p>情况：</p><ul><li>重启后Navicat（代表使用本地MySQL）可以正常启动，phpstudy启动后，Navicat也无法启动了。这里边肯定冲突了，可以操作的地方都操作了，理论是完全可行。</li><li>重启后小皮也无法启动MySQL</li></ul><p>分析：</p><p>还说要有影响因素就应该是注册表那类定义的优先级问题了，导致小皮启动MySQL时去找的默认的服务，我们自己注册的服务没有被识别，所以没起来</p><p>去网上查资料发现这样一个说法</p><p><img src="https://s2.loli.net/2023/05/10/FpLUakTiAyxwV52.png" alt="image-20230510104003786"></p><p>为了找出问题</p><ul><li><p>把本地的服务名改成MySQL1，小皮改成MySQL2，小皮和本地的Navicat能同时启动，但是MySQL2根本没启动</p></li><li><p>禁用MySQL2，发现本地可以跑小皮也可以跑，那小皮是跑在MySQL1上吗</p></li><li><p>禁用MySQL1，发现小皮还是可以启动，本地起不来，MySQL2服务也没起来，卧槽卧槽，这啥意思，小皮根本没用咱的服务！</p><p>看看端口，进程名</p></li></ul><pre class="line-numbers language-none"><code class="language-none">netstat -ano|findstr &quot;80&quot;tasklist|findstr &quot;15588&quot;taskkill &#x2F;f &#x2F;t &#x2F;im 进程名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>果然，小皮的数据库跑起来后后台就有个mysqld.exe的进程</p><p><img src="https://s2.loli.net/2023/05/10/4jzdheInVkaGWrN.png" alt="xiaop"></p><p>那这个是用的本地的还是集成环境的MySQL呢？</p><p>对比data目录下的数据库就可以知道两个连接下的数据库不一样</p><p><img src="https://s2.loli.net/2023/05/10/8r4hfUjN7Kgnlpi.png" alt="image-20230510132803973"></p><p>我们用数据库连接工具连一下</p><p>改一下连接属性</p><p><img src="https://s2.loli.net/2023/05/10/mAk1PecSGXKJgr4.png" alt="image-20230510132605691"></p><p><img src="https://s2.loli.net/2023/05/10/LASfGn4l2hT8YKt.png" alt="image-20230510132655948"></p><p>ok，显示的是小皮的数据库，说明小皮有自己的连接方式，并不依赖于服务</p><p>我们删除MySQL2服务再解除MySQL1的禁用，就可以了(对于Navicat连不上MySQL，请检查服务是否启动了，可以设置开机自启动)</p><p>至此，本地和小皮的数据库冲突解决</p><p><img src="https://s2.loli.net/2023/05/10/Jmlh4GoDYBHyXQr.png" alt="image-20230510134054259"></p>]]></content>
      
      
      <categories>
          
          <category> 疑惑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> phpstudy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java EE</title>
      <link href="/2023/04/30/JAVA/"/>
      <url>/2023/04/30/JAVA/</url>
      
        <content type="html"><![CDATA[<ul><li>jre和jdk的区别？</li></ul><p>Java Runtime Environment (JRE) 和Java Development Kit (JDK) 是 Java 开发中两个不同的软件包。</p><p>JRE是Java运行时环境，包含了Java虚拟机(JVM)、一些核心类库和其他运行Java应用程序所需的组件。</p><p>JDK是Java开发工具包，包含了JRE，并且同时提供了编译器、调试器、Java文档和其他开发工具。JDK除了可以运行Java程序外，还可以用于Java应用程序开发。</p><p>简而言之，JRE是运行Java程序所必需的最基本的环境，而JDK提供了更全面的Java开发工具，包括JRE。</p><p>如果只是需要运行Java程序，那么只需要安装JRE即可。如果需要进行Java应用程序开发，则需要安装JDK。</p><p> 彻底卸载JDK的方式？</p><p>尽量使用解压缩版，解压缩版也分Windows和Linux的</p><p> Java和JDK的版本命名？</p><p>1.8即Java8</p><p>后面的版本去掉了<code>1.</code></p><p>什么是JVM？</p><p>JVM（Java虚拟机）是Java平台的核心组件之一，是一种虚拟计算机，是Java程序执行的环境。</p><p>JVM提供了一个在特定平台上运行Java字节码的环境，Java源代码被编译成一种称为字节码的中间形式，JVM在运行时将字节码解释成本地机器指令。JVM还提供了Java程序运行所需的内存管理和垃圾回收机制，以及用于类加载、安全性、线程管理和异常处理等的机制。因此，JVM不仅为Java提供了“一次编写，到处运行”的优势，同时也保证了Java程序的可靠性和安全性。</p><p>不同的操作系统或硬件平台都需要针对其特定的架构来实现JVM。Java应用程序在不同的JVM上运行时，可以保证具有相同的行为和结果。这也是Java语言跨平台的重要原因之一。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络的问题记录篇</title>
      <link href="/2023/04/21/%E9%97%AE%E9%A2%98%E7%AF%87/"/>
      <url>/2023/04/21/%E9%97%AE%E9%A2%98%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是公网、私网、内网、外网？"><a href="#什么是公网、私网、内网、外网？" class="headerlink" title="什么是公网、私网、内网、外网？"></a>什么是公网、私网、内网、外网？</h3><p>其实下面的解析可能lz看不懂吧，我就用打比方的方式来简单的解析一下，什么是内网，什么是外网。</p><p>1、内网说出来了就是多台计算机躲在路由的后面，多台的计算机共享一个ip和所有的端口，而外网就很简单了，那就是一台计算机直接拨号连接，单占一个ip，和所有的网络端口，说到这里你应该明白他们之间的区别了吧？</p><p>2、为什么要区分内外网？最重要的一个原因就是ip资源不足，因为全世界的ip数量是有限的，就算不扣除网络特殊网段的ip，全世界可用的ip数也只有255<em>255</em>255*255个，也就是只有那么多台的电脑可以上网，但是事实上，目前介入互联网的计算机已经远远超出了这个数字………算然目前已经引入ipv6，但是由于各种问题，尚未普及，所以，使用内网，多台计算机共用一个ip是必须的手段…</p><p>3、从安全性来考虑，一般而言内网因为躲在路由的后面，所以安全性会更高，但是对于某些软件或者软件而言，外网的使用会更加的简单，而内网则必须要更复杂的设置，如bt，你要设置upnp，如果要搭建服务器，内网就必须要做端口映射，让某一台计算机独占必要的端口等等，所以，一般作服务器的电脑，都是使用外网的</p><p><strong>没有公网</strong></p><p>没有公网ip，就是说你的机子并非直接连接上internet，而是所有通讯经过一台代理（一般是<a href="https://www.zhihu.com/search?q=%E9%80%8F%E6%98%8E%E7%BD%91%E5%85%B3&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2425965936%7D">透明网关</a>）进行中转，这时候问题就来了，就会有一些通讯无法在这种机制下顺利进行</p><p><a href="https://www.zhihu.com/question/337578873">https://www.zhihu.com/question/337578873</a></p><p><a href="https://blog.csdn.net/m0_61251376/article/details/122667739">https://blog.csdn.net/m0_61251376/article/details/122667739</a></p><p>在互联网世界中，别的局域网内的主机用户可以ping的通我的公有IP，但是无法ping的通私有IP。换句话说，我的电脑主机能与全世界的公有IP通信，但是他们却联系不上我的电脑主机，最多只能找到我的上一层网关层。当然，前提是没有做内网穿透。</p><p>在互联网世界，存在无数个局域网，不同的局域网本身是独立的，如果我从一个局域网ping另外一个局域网内的计算机，无法建立通讯，因为TCP协议是双向的，我发送过去的数据会被对方的路由丢弃，从逻辑来看，我的目标地址就是私有地址，不允许出现在公网之上。</p><h3 id="这些校园网拨号软件和我们电脑自带的宽带拨号有什么不一样啊，我们能不能自己配置，然后拨号上网？"><a href="#这些校园网拨号软件和我们电脑自带的宽带拨号有什么不一样啊，我们能不能自己配置，然后拨号上网？" class="headerlink" title="这些校园网拨号软件和我们电脑自带的宽带拨号有什么不一样啊，我们能不能自己配置，然后拨号上网？"></a>这些校园网拨号软件和我们电脑自带的宽带拨号有什么不一样啊，我们能不能自己配置，然后拨号上网？</h3><h3 id="zerotier"><a href="#zerotier" class="headerlink" title="zerotier"></a>zerotier</h3><p>zerotier是一个软交换机，使用zerotier可以让多台内网机器组成一个局域网</p><a class="btn-beautify blue" href="https://zhuanlan.zhihu.com/p/82159013"   title="zerotier教程"><i class="fa fa-arrow-circle-right"></i><span>zerotier教程</span></a><a class="btn-beautify blue" href="https://cloud.tencent.com/developer/article/1584305"   title="zerotier使用"><i class="fa fa-arrow-circle-right"></i><span>zerotier使用</span></a><h3 id="隧道和代理的区别？"><a href="#隧道和代理的区别？" class="headerlink" title="隧道和代理的区别？"></a>隧道和代理的区别？</h3><p><a href="https://www.zhihu.com/search?q=HTTP%E4%BB%A3%E7%90%86&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2840261422%7D">HTTP代理</a>从使用方式来分，可以分为两种：隧道代理和API代理</p><p>虚拟专用网络 (VPN)</p><p>代理是委托一个人找目标，隧道是通过特定的通讯方法，直接找到这个目标；代理最主要的特征是，无论代理后面挂了几个设备，代理对外只表现为一个设备。外部设备以为自己是在和代理交互，而不能感知代理内部的设备。隧道是一个虚拟的路径，用来使到达隧道入口的数据，穿越原本不方便穿越的网络，到达另一侧出口。</p><p>1、代理</p><p>代理是一种有转发功能的应用程序，它扮演了位于服务器和客户端的“中间人”。通过代理不会改变原本的URI，每次通过代理服务器转发请求或响应时，会追加写入 Via 首部信息</p><p>使用理由:利用缓存技术减少网络带宽的流量，组织内部针对特定网站的访问控制，以获取访问日志为主要目的，等等。</p><p>2、隧道</p><p>隧道是远距离的服务器和客户端之间的中转站。隧道可按要求建立起一条与其他服务器的通信线路，届时使用 SSL 等加密手段进行通信。隧道的目的是确保客户端能与服务器进行安全的通信。隧道本身不会去解析 HTTP 请求。也就是说，请求保持原样中转给之后的服务器。隧道会在通信双方断开连接时结束。</p><p>ddns，又称动态域名解析，适用于没有固定IP的网络，通过ddns，即动态域名解析</p><a class="btn-beautify blue" href="https://cloud.tencent.com/developer/article/1847329"   title="DDNS"><i class="fa fa-arrow-circle-right"></i><span>DDNS</span></a><h3 id="什么是TTL？"><a href="#什么是TTL？" class="headerlink" title="什么是TTL？"></a>什么是TTL？</h3><p>TTL值全称是“生存时间（Time To Live)”，一般的说它表示DNS记录在DNS服务器上缓存时间<br>增大TTL值，以节约域名解析时间<br>减小TTL值，减少更新域名记录时的不可访问时间</p><h3 id="ping-IP-x2F-域名时TTL值代表什么？"><a href="#ping-IP-x2F-域名时TTL值代表什么？" class="headerlink" title="ping IP&#x2F;域名时TTL值代表什么？"></a>ping IP&#x2F;域名时TTL值代表什么？</h3><p>数据包存活时间（英语：Time To Live，简写TTL）是计算机网络技术的一个术语，指一个数据包在经过一个路由器时，可传递的最长距离（跃点数）。每当数据包经过一个路由器时，其存活次数就会被减一。当其存活次数为0时，路由器便会取消数据包并发送一个ICMP TTL数据包给原数据包的发出者。其设计目的是防止数据包因不正确的路由表等原因造成的无限循环而无法送达及耗尽网络资源。<br><strong>TTL 值越小越好吗？</strong><br>“TTL”的值越小越好的说法显然是不对的，相反，应该说是“TTL”的值越大越好才对，因为“TTL”的值越大，说明发送数据包经过路由器越少，而经过路由器越少，说明越快到达目的地，速度当然也就越快。</p><h3 id="什么是NAS？有什么用？怎么用？"><a href="#什么是NAS？有什么用？怎么用？" class="headerlink" title="什么是NAS？有什么用？怎么用？"></a>什么是NAS？有什么用？怎么用？</h3><p>nas，英文全名，Network Attached Storage，翻译过来就是， 网络附加存储</p><p>按字面简单说就是连接在网络上，具备资料存储功能的装置，因此也称为“<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%E7%BD%91%E7%BB%9C%E5%AD%98%E5%82%A8%E5%99%A8/9485387">网络存储器</a>”。它是一种专用数据<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1%E5%99%A8">存储服务器</a>。它以数据为中心，将存储设备与服务器彻底分离，集中管理数据，从而释放带宽、提高性能、降低总拥有成本、保护投资。其成本远远低于使用服务器存储，而效率却远远高于后者。</p><p>一个文件存储的装置，使用这个装置，我们可以通过网络连接到该装置，使用&#x2F;访问该装置上的文件</p><p>就是一台存储空间大，配置不是很高的电脑</p><h3 id="异地如何远程连接访问家庭NAS文件？"><a href="#异地如何远程连接访问家庭NAS文件？" class="headerlink" title="异地如何远程连接访问家庭NAS文件？"></a>异地如何远程连接访问家庭NAS文件？</h3><p><strong>总结网上的经验，想从外网访问家里的NAS，无外乎有如下三种解决方案：</strong></p><p>1、用NAS自带的QuickConnect</p><p>2、用DDNS动态解析家里的公网IP</p><p>3、通过内网穿透技术</p><a class="btn-beautify blue" href="https://zhuanlan.zhihu.com/p/203477932"   title="外网访问家用NAS"><i class="fa fa-arrow-circle-right"></i><span>外网访问家用NAS</span></a><h3 id="绕过校园网验证的方法？"><a href="#绕过校园网验证的方法？" class="headerlink" title="绕过校园网验证的方法？"></a>绕过校园网验证的方法？</h3><p>类型：网页认证和软件认证</p><p>原理：</p><p>我们平常使用的家庭WiFi，一般都是设置密码，当然我们也可以不设置密码，连上就有网，可以直接使用，校园WiFi没有密码，直接就能连接上，我们连上这个WiFi的时候，它会给我们分配一个内网IP，负责分配内网IP的服务需要使用UDP67、68端口，路由域名DNS解析服务需要使用UDP53端口，一般正常情况校园网都对上面几个端口放行的，所以我们可以利用上面的端口跑流量，让我们所有的流量都包装在这些放行端口里跑，流量能跑出去收回来，已经算成功了。。我们还需要做的一件事情就是如何让流量通过这些端口跑，怎么发出去，怎么收回来，因为我们正常上网是无法指定端口的，我们使用的各种网络使用的端口都是不同的，网站是80或者443，QQ微信游戏使用的又是不一样的，我们使用的各种网络应用软件的端口都是五花八门的，要想指定某个端口不是我们可以控制的，这个是由应用本身决定的。不过也不是不可破，我们需要通过WiFi放行的端口建立一条隧道，建立隧道需要外网有一台服务器，假如我们选择UDP53端口建立隧道，一旦隧道建立，我们与外网的那台服务器就是局域网关系，我们与他的联系就通过DUP53建立的，根据目前这个情况假如我们要访问一个80端口的网站，我们把这个请求通过隧道告诉外面的服务器我们要访问某个网站，外边的服务器通过隧道获取到这个请求立即帮我们代做这个事情，并把结果再通过隧道给我们回发过来，意思就是我们想上网就叫服务器给我办，不需要自己亲自去做。核心就是需要有放行端口，利用这个端口打一个洞，所谓隧道。说得很复杂其实就是需要部署一整套软件，我们手机或者上网设备上需要安装实现隧道的软件，对于使用着来说其实并没有多复杂的，就是打开一个软件而已，这些东西都是有非常成熟的方案的，目前做的比较好的有【无为WiFi】软件，效果还行，有兴趣可以搜搜。</p><p>方案：</p><h3 id="校园网为什么不能开启热点？怎么解决"><a href="#校园网为什么不能开启热点？怎么解决" class="headerlink" title="校园网为什么不能开启热点？怎么解决"></a>校园网为什么不能开启热点？怎么解决</h3><h3 id="校园网的路由器怎么进入后台？"><a href="#校园网的路由器怎么进入后台？" class="headerlink" title="校园网的路由器怎么进入后台？"></a>校园网的路由器怎么进入后台？</h3><p>一般的，在IE浏览器中直接输入网关地址，提示输入有用户和密码，成功进入。</p><p>因为校园网肯定用的专业路由器，为了安全起见，是不会接受Web登陆的，只能从console端口访问。</p><p>如果想登陆必须去找学校网管了。</p><p>最好的办法是用网线连接路由器，进入路由器设置好了之后，再打开无线服务，这样做比较容易成功。</p><h3 id="校园网的网络结构？"><a href="#校园网的网络结构？" class="headerlink" title="校园网的网络结构？"></a>校园网的网络结构？</h3><p><a href="https://www.zhihu.com/question/48781953">https://www.zhihu.com/question/48781953</a></p><p><a href="https://blog.csdn.net/weixin_44309905/article/details/110739794">https://blog.csdn.net/weixin_44309905/article/details/110739794</a></p><p>设备：</p><p>路由器、交换机、终端设备</p><p>校园网在宿舍留有网口，这个网口是直接接入校园网，直接拿网线连到电脑就可以上网，这是宽带连接的上网方式。<br>在宿舍连wifi就要用到无线网了，有线和无线之间转接需要AP。</p><blockquote><p>AP就是Access Point，无线接入点或者叫做无线热点，AP就相当于一个无线的HUB，有无线网卡的PC、笔记本、PDA可以通过AP连接到AP背后的网络里面。</p></blockquote><p>宿舍使用WiFi时的路由器就是一个具有AP功能的路由器。</p><p>宿舍每个人连接WiFi后，都需要登入自己的上网账号  </p><p>校园网分到宿舍的IP相当于外网IP，对应登入的那个账号，开启DHCP后，连接到路由器的所有设备得到的是局域网IP，使用同一个外网IP来上网</p><h3 id="搭建一个内网穿透的远程桌面"><a href="#搭建一个内网穿透的远程桌面" class="headerlink" title="搭建一个内网穿透的远程桌面"></a>搭建一个内网穿透的远程桌面</h3><p><a href="https://hsk.oray.com/news/7244.html">https://hsk.oray.com/news/7244.html</a></p><p>我想给本地IP设置成静态的然后进行内网穿透，我是校园网。但是按常规操作（连接网络后记录当前分配的IP、网关、DNS然后把IPV4改成静态后），网络就断开了，不能ping, 甚至不给解析域名</p><p>这个是校园网和路由器规则问题了，就一个客户机没什么办法操作的</p><a class="btn-beautify blue" href="https://zhuanlan.zhihu.com/p/115826053"   title="win10内网穿透实现远程桌面连接"><i class="fa fa-arrow-circle-right"></i><span>win10内网穿透实现远程桌面连接</span></a><h3 id="几种域名解析类型和使用方式"><a href="#几种域名解析类型和使用方式" class="headerlink" title="几种域名解析类型和使用方式?"></a>几种域名解析类型和使用方式?</h3><p>  A记录：最简单最常用，添加记录时候填写IP地址即可。A记录(Address)是用来指定主机名（或域名）对应的IP地址记录。通过A记录您可以将该域名指向到自己的网站服务器IP地址，同时也可以设置您域名的二级域名。 </p><p>​    MX记录：是Mail Exchanger的缩写，意思是邮件交换记录。它指向一个邮件服务器，用于电子邮件系统发邮件时根据收信人的地址后缀来定位邮件服务器。例如，当Internet上的某用户要发一封信给 <a href="mailto:&#117;&#x73;&#x65;&#x72;&#64;&#118;&#105;&#112;&#105;&#105;&#x73;&#46;&#99;&#x6f;&#x6d;">&#117;&#x73;&#x65;&#x72;&#64;&#118;&#105;&#112;&#105;&#105;&#x73;&#46;&#99;&#x6f;&#x6d;</a>时，该用户的邮件系统通过DNS查找vipiis.com这个域名的MX记录，如果MX记录存在， 用户计算机就将邮件发送到MX记录所指定的邮件服务器上。 </p><p>​    CNAME记录 ：也被称为别名记录，是双线智能解析和使用CDN加速必须用到的解析方法。CNAME解析通常是一个三级域名地址，您可以在主机管理后台”绑定域名”位置看到cname解析地址的信息提示，不同服务器会使用不同的cname解析地址。通过cname解析，可以让域名捆绑到多个服务器IP地址，需要注意的是cname解析地址后面有个英文“.”符号。 因为用到的解析类型是CNAME记录，所以着重学习了解了一下这个类型。以新网为例子，讲解一下该解析的使用步骤：</p><p>1、在主机名处填写www或者其他名称;</p><p>2、在记录类型选择类型为CNAME记录;</p><p>3、在记录值填写别名地址;</p><p>4、点击立即添加，完成添加别名解析。</p><p>​    通常来说，别名解析可以提供更大的灵活性，便于统一管理。举个例子来说，当主机因各种因素的影响需要更换IP时，如果域名做了CNAME记录，就可以同时更新别名的解析指向，不用需要进行新的解析操作，也就是说可以做到无缝更换IP，这对实际中IP的维护是很实用的。而且对于双线主机来说，电信和联通有不同的接口对应不同的IP,由于A记录只能指向一个IP,这时采用别名解析就可以很好的解决这个问题。当然了CNAME记录也存在一定的不足，很多人认为不同的IP会对网站优化产生一定的影响，当蜘蛛每次爬行的时候，IP变化容易让蜘蛛产生网站不稳定的误解。不过见仁见智，到底好不好还需要自己去判断。</p><p>​    NS记录：是域名DNS服务器记录，全称Name Server记录，用来指定该域名由哪个DNS服务器来对您的域名进行解析。您注册域名时，总有默认的DNS服务器，每个注册的域名都是由一组DNS域名服务器来解析的。</p><p>​    TXT记录：一种文本记录，仅用于对主机名或者域名的记录信息，对解析无实质影响。</p><p>​    TTL值：全称是“生存时间（Time To Live)”，简单的说它表示DNS记录在DNS服务器上缓存时间。默认即可。 </p><p>​    泛解析：使用“*”建立二级域名解析到同一独立IP。在域名前添加任何子域名，均可解析到指定的服务器IP地址。 </p> <a class="btn-beautify blue" href="https://www.cnblogs.com/zhuxiangru/p/9536092.html"   title="DDNS"><i class="fa fa-arrow-circle-right"></i><span>DDNS</span></a><h3 id="nslookup-、ping-、tracert命令？"><a href="#nslookup-、ping-、tracert命令？" class="headerlink" title="nslookup  、ping 、tracert命令？"></a>nslookup  、ping 、tracert命令？</h3><p>如果我们要测试某一个IP都经过哪些路由，用<code>trcert</code>命令即可。</p><p>Tracert是测试报文从发送端到目的地所经过的路由的方法。它能够直观展现报文在转发的时候所经过的路径。Tracert基于ICMP协议来实现的。当网络出现故障时，用户可以使用Tracert确定出现故障的网络节点。</p><p>IP协议的助手 —— ICMP 协议</p><p>ping 是基于 <code>ICMP</code> 协议工作的，所以要明白 ping 的工作，首先我们先来熟悉 <strong>ICMP 协议</strong></p><p>ICMP 全称是 <strong>Internet Control Message Protocol</strong>，也就是<strong>互联网控制报文协议</strong></p><p>网络出现故障，使用ping命令的方法：<br>（1）ping127.0.0.1<br>测试环回地址是否正常，若正常，说明本机的TCP&#x2F;IP协议正常。<br>（2）ping本机的IP地址<br>可使用ipconfig查询本机IP。若ping返回正常，说明网卡与外部网络物理线路连接正常，否则，就是网卡有问题，或者网线没插好。<br>（3）ping局域网的网关<br>如果能ping通，说明可以通过路由器接入到外部网络。<br>（4）ping远程服务器IP或DNS<br>如果不能ping通，表明系统DNS服务器设置有问题。</p><h3 id="请问校园网内电脑可以设置静态IP地址吗？该如何设置？"><a href="#请问校园网内电脑可以设置静态IP地址吗？该如何设置？" class="headerlink" title="请问校园网内电脑可以设置静态IP地址吗？该如何设置？"></a>请问校园网内电脑可以设置静态IP地址吗？该如何设置？</h3><p>常规：连接上网络后记录并改成静态的IP</p><p>出现问题：改成静态后网络断开，不能ping，DNS不能解析</p><p>重新连接网络后IP更改</p><h3 id="什么是内网渗透？"><a href="#什么是内网渗透？" class="headerlink" title="什么是内网渗透？"></a>什么是内网渗透？</h3><h3 id="校园网路由器怎么实现多账号多设备上网的？"><a href="#校园网路由器怎么实现多账号多设备上网的？" class="headerlink" title="校园网路由器怎么实现多账号多设备上网的？"></a>校园网路由器怎么实现多账号多设备上网的？</h3><h3 id="全网显示-IP-归属地，这背后的技术你知道吗？"><a href="#全网显示-IP-归属地，这背后的技术你知道吗？" class="headerlink" title="全网显示 IP 归属地，这背后的技术你知道吗？ "></a><a href="https://www.cnblogs.com/chanshuyi/p/how-to-locate-address-from-ip.html">全网显示 IP 归属地，这背后的技术你知道吗？ </a></h3><p><a href="https://www.cnblogs.com/chanshuyi/p/how-to-locate-address-from-ip.html">https://www.cnblogs.com/chanshuyi/p/how-to-locate-address-from-ip.html</a></p><h3 id="什么是网关，网关的作用是什么？"><a href="#什么是网关，网关的作用是什么？" class="headerlink" title="什么是网关，网关的作用是什么？"></a>什么是网关，网关的作用是什么？</h3><p>网关(Gateway)又称网间连接器、协议转换器。网关在<strong>传输层</strong>上以实现网络互连，是最复杂的网络互连设备，仅用于两个<strong>高层协议不同的</strong>网络互连。网关的结构也和路由器类似，<strong>不同的是互连层</strong>。网关既可以用于广域网互连，也可以用于局域网互连。 网关是一种充当<strong>转换</strong>重任的计算机系统或设备。在使用不同的通信协议、数据格式或语言，甚至体系结构完全不同的两种系统之间，网关是一个<strong>翻译器</strong>。与网桥只是简单地传达信息不同，网关对收到的信息要重新打包，以适应目的系统的需求。同时，网关也可以提供<strong>过滤和安全</strong>功能。大多数网关运行在OSI 7层协议的顶层–应用层。</p><p>通俗说法：</p><p>一个网络通向其他网络的关口，IP地址（与其他网络（局域网）实现通信的关口，相当于门口。）是具有路由功能机器的ip地址，一般为路由器或者开了路由协议的服务器。<br>每个网络都有自己的网关，要实现网络间通信，需要查找到网关，通过网关实现两个网络内部成员之间的通信。<br>默认网关：找不到网关时，交给默认网关处理。<br>网关能在网络间传递数据包！（相当于该网段，局域网的领导）</p><p>在没有路由器的情况下，两个网络之间是不能进行TCP&#x2F;IP通信的，即使是两个网络连接在同一台交换机(或集线器)上，TCP&#x2F;IP协议也会根据子网掩码(255.255.255.0)判定两个网络中的主机处在不同的网络里。而要实现这两个网络之间的通信，则必须通过网关。如果网络A中的主机发现数据包的目的主机不在本地网络中，就把数据包转发给它自己的网关，再由网关转发给网络B的网关，网络B的网关再转发给网络B的某个主机(如附图所示)。网络B向网络A转发数据包的过程。</p><p>所以说，只有设置好网关的IP地址，TCP&#x2F;IP协议才能实现不同网络之间的相互通信。那么这个IP地址是哪台机器的IP地址呢？网关的IP地址是具有路由功能的设备的IP地址，具有路由功能的设备有路由器、启用了路由协议的服务器(实质上相当于一台路由器)、代理服务器(也相当于一台路由器)。</p><p>在和 Novell NetWare 网络交互操作的上下文中，网关在 Windows 网络中使用的服务器信息块 (SMB) 协议以及 NetWare 网络使用的 NetWare 核心协议 (NCP) 之间起着桥梁的作用。网关也被称为 IP 路由器。</p><h3 id="什么是默认网关？"><a href="#什么是默认网关？" class="headerlink" title="什么是默认网关？"></a>什么是默认网关？</h3><p>如果搞清了什么是网关，默认网关也就好理解了。就好像一个房间可以有多扇门一样，一台主机可以有多个网关。默认网关的意思是一台主机如果找不到可用的网关，就把数据包发给默认指定的网关，由这个网关来处理数据包。现在主机使用的网关，一般指的是默认网关。</p><h3 id="网关和路由器区别？"><a href="#网关和路由器区别？" class="headerlink" title="网关和路由器区别？"></a>网关和路由器区别？</h3><p>网关是一个概念，不具体特指一类产品，只要连接两个不同的网络的设备都可以叫网关。路由器是实现网关的一种设备。<br><strong>路由器</strong><br>路由器（Router）是一种负责寻径的网络设备，它在互连网络中从多条路径中寻找通讯量最少的一条网络路径提供给用户通信。路由器用于连接多个逻辑上分开的网络。对用户提供最佳的通信路径，路由器利用路由表为数据传输选择路径，路由表包含网络地址以及各地址之间距离的清单，路由器利用路由表查找数据包从当前位置到目的地址的正确路径。路由器使用最少时间算法或最优路径算法来调整信息传递的路径，如果某一网络路径发生故障或堵塞，路由器可选择另一条路径，以保证信息的正常传输。路由器可进行数据格式的转换，成为不同协议之间网络互连的必要设备。</p><p>路由器使用寻径协议来获得网络信息，采用基于“寻径矩阵”的寻径算法和准则来选择最优路径。按照OSI参考模型，路由器是一个网络层系统。路由器分为单协议路由器和多协议路由器</p><div class="flink"><div class="flink-name">参考文章</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://zhuanlan.zhihu.com/p/140875172" title="知乎" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="null" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="知乎" />              </div>              <div class="flink-item-name">知乎</div>               <div class="flink-item-desc" title="网关与路由器的区别">网关与路由器的区别</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://zhuanlan.zhihu.com/p/165142303" title="知乎" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="null" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="知乎" />              </div>              <div class="flink-item-name">知乎</div>               <div class="flink-item-desc" title="什么是网关，网关的作用是什么？">什么是网关，网关的作用是什么？</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://blog.csdn.net/qq_60957671/article/details/119753941" title="CSND" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="null" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="CSND" />              </div>              <div class="flink-item-name">CSND</div>               <div class="flink-item-desc" title="花式讲解校园网绕过认证原理">花式讲解校园网绕过认证原理</div>            </a>          </div></div></div>]]></content>
      
      
      <categories>
          
          <category> 疑惑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hosts 和 DNS</title>
      <link href="/2023/04/21/hosts%E5%92%8Cdns/"/>
      <url>/2023/04/21/hosts%E5%92%8Cdns/</url>
      
        <content type="html"><![CDATA[<p><strong>当网络连接，别的网页可以正常访问，只有个别网页访问不了</strong></p><p><img src="https://s2.loli.net/2023/04/21/GC6wOtSNbMcAWRn.png" alt="谷"></p><p>或者显示：<strong>网页可能暂时无法连接，或者它已永久性地移动到了新网址</strong><br>可能是你所使用的网络解析服务出了问题，即DNS服务器的问题，可以采取下面的方法：</p><ul><li>修改hosts文件</li><li>配置DNS服务器地址</li></ul><h2 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h2><p>Windows的hosts文件路径：<code>C:\Windows\System32\drivers\etc</code></p><blockquote><p>作用：本地域名解析，加快访问速度<br>原理： 我们在hosts中指定域名和响应IP的映射关系，这样当我们输入域名，浏览器优先使用指定的IP，而不用请求网络上的 DNS服务器<br>格式</p></blockquote><pre class="line-numbers language-示例" data-language="示例"><code class="language-示例"># github    20.205.243.166 github.com       # s2.loli.net172.67.69.40  s2.loli.net# smms.app104.21.62.26  smms.app# 注释IP地址  网站域名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>那这个IP怎么来呢？</strong><br>直接搜索DNS解析就能找到</p><p><img src="https://s2.loli.net/2023/04/21/PTHA914uYVfbLR6.png" alt="image-20230421102137130"></p><p><img src="https://s2.loli.net/2023/04/22/gCrPKNnS79ZqIJs.png" alt="image-20230422144250445"></p><h2 id="配置DNS服务器地址"><a href="#配置DNS服务器地址" class="headerlink" title="配置DNS服务器地址"></a>配置DNS服务器地址</h2><p><img src="https://s2.loli.net/2023/04/21/pFtRP3AsXqhzfKm.png" alt="image-20230421102918259"></p><p>推荐使用阿里DNS</p><p>官方有教程：<a class="btn-beautify blue" href="https://www.alidns.com/knowledge?type=SETTING_DOCS#user_windows"   title="阿里公共DNS"><i class="fa fa-arrow-circle-right"></i><span>阿里公共DNS</span></a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DNS </tag>
            
            <tag> hosts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法速查</title>
      <link href="/2023/04/20/makerdown/"/>
      <url>/2023/04/20/makerdown/</url>
      
        <content type="html"><![CDATA[<div class="flink"><div class="flink-name">工具</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://sitdown.mdnice.com/Demo.html" title="sitdown" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="null" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="sitdown" />              </div>              <div class="flink-item-name">sitdown</div>               <div class="flink-item-desc" title="html 转 markdown 工具">html 转 markdown 工具</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://mdnice.com/" title="mdnice" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="null" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="mdnice" />              </div>              <div class="flink-item-name">mdnice</div>               <div class="flink-item-desc" title="markdown 转 html 的神器">markdown 转 html 的神器</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://zhuanlan.zhihu.com/p/110250329" title="CSDN" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="null" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="CSDN" />              </div>              <div class="flink-item-name">CSDN</div>               <div class="flink-item-desc" title="工具介绍">工具介绍</div>            </a>          </div></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP学习</title>
      <link href="/2023/04/20/PHP%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/04/20/PHP%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<div class="flink"><div class="flink-name">参考文章</div> <div class="flink-list">          <div class="flink-list-item">            <a href="/add/PHP1.html" title="PHP基础1" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="null" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="PHP基础1" />              </div>              <div class="flink-item-name">PHP基础1</div>               <div class="flink-item-desc" title="1-3大章">1-3大章</div>            </a>          </div>          <div class="flink-list-item">            <a href="/add/PHP2.html" title="PHP基础2" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="null" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="PHP基础2" />              </div>              <div class="flink-item-name">PHP基础2</div>               <div class="flink-item-desc" title="4-6大章">4-6大章</div>            </a>          </div></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus学习</title>
      <link href="/2023/04/20/MyBatis-Plus/"/>
      <url>/2023/04/20/MyBatis-Plus/</url>
      
        <content type="html"><![CDATA[<h1 id="一、MyBatis-Plus"><a href="#一、MyBatis-Plus" class="headerlink" title="一、MyBatis-Plus"></a>一、MyBatis-Plus</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus (opens new window)</a>（简称 MP）是一个 <a href="https://www.mybatis.org/mybatis-3/">MyBatis (opens new window)</a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><blockquote><p>我们的愿景是成为 MyBatis 最好的搭档，就像 <a href="https://baomidou.com/img/contra.jpg">魂斗罗</a> 中的 1P、2P，基友搭配，效率翻倍。</p></blockquote><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/relationship-with-mybatis.png" alt="img"></p><h2 id="2-特性"><a href="#2-特性" class="headerlink" title="2.特性"></a>2.特性</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="3-支持数据库"><a href="#3-支持数据库" class="headerlink" title="3.支持数据库"></a>3.支持数据库</h2><blockquote><p>任何能使用 <code>MyBatis</code> 进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下，如果不在下列表查看分页部分教程 PR 您的支持。</p></blockquote><ul><li>MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb</li><li>达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库</li></ul><h2 id="4-框架结构"><a href="#4-框架结构" class="headerlink" title="4.框架结构"></a>4.框架结构</h2><img src="https://baomidou.com/img/mybatis-plus-framework.jpg" alt="framework" style="zoom:50%;" /><h2 id="5-官方地址"><a href="#5-官方地址" class="headerlink" title="5.官方地址"></a>5.官方地址</h2><blockquote><p><strong>官方网站：</strong><a href="https://baomidou.com/">https://baomidou.com/</a></p><p><strong>官方文档：</strong><a href="https://baomidou.com/pages/24112f/">https://baomidou.com/pages/24112f/</a></p></blockquote><h1 id="二、入门案例"><a href="#二、入门案例" class="headerlink" title="二、入门案例"></a>二、入门案例</h1><h2 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1.开发环境"></a>1.开发环境</h2><ul><li><strong>IDE：IDEA 2019.3.5</strong></li><li><strong>JDK：JDK8+</strong></li><li><strong>构建工具：Maven 3.5.4</strong></li><li><strong>MySQL：MySQL 8.0.24</strong></li><li><strong>Navicat：Navicat Premium 15</strong></li><li><strong>Spring Boot：2.6.7</strong></li><li><strong>MyBatis-Plus：3.5.1</strong></li></ul><h2 id="2-建库建表"><a href="#2-建库建表" class="headerlink" title="2.建库建表"></a>2.建库建表</h2><ul><li><p><strong>打开Navicat运行以下SQL脚本进行建库建表</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token identifier"><span class="token punctuation">`</span>mybatis_plus<span class="token punctuation">`</span></span> <span class="token comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 */</span><span class="token punctuation">;</span> <span class="token keyword">use</span> <span class="token identifier"><span class="token punctuation">`</span>mybatis_plus<span class="token punctuation">`</span></span><span class="token punctuation">;</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>     <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>     <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>     <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'年龄'</span><span class="token punctuation">,</span>     <span class="token identifier"><span class="token punctuation">`</span>email<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'邮箱'</span><span class="token punctuation">,</span>     <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>插入几条测试数据</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> email<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Jone'</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'test1@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'test2@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">'test3@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Sandy'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'test4@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'Billie'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token string">'test5@baomidou.com'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-创建工程"><a href="#3-创建工程" class="headerlink" title="3.创建工程"></a>3.创建工程</h2><ul><li><p><strong>使用<code>Spring Initializer</code>快速初始化一个 Spring Boot 工程</strong></p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519140839640.png" alt="image-20220519140839640" style="zoom:80%;" /><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519141335981.png" alt="image-20220519141335981" style="zoom:80%;" /><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519141737405.png" alt="image-20220519141737405" style="zoom:80%;" /><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519141849937.png" alt="image-20220519141849937" style="zoom:80%;" /></li><li><p><strong>引入<code>MyBatis-Plus</code>的依赖</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>安装<code>Lombok</code>插件</strong></p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519143257305.png" alt="image-20220519143257305" style="zoom:80%;" /></li></ul><h2 id="4-配置编码"><a href="#4-配置编码" class="headerlink" title="4.配置编码"></a>4.配置编码</h2><ul><li><p><strong>配置<code>application.yml</code>文件</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#配置端口</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">80</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment">#配置数据源</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token comment">#配置数据源类型</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource    <span class="token comment">#配置连接数据库的信息</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis_plus<span class="token punctuation">?</span>characterEncoding=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL=false</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>username<span class="token punctuation">&#125;</span>    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>password<span class="token punctuation">&#125;</span><span class="token comment">#MyBatis-Plus相关配置</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token comment">#配置日志</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>在 Spring Boot 启动类中添加 <code>@MapperScan</code> 注解，扫描 Mapper 文件夹</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"指定Mapper接口所在的包"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MybatisPlusDemoApplication</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">MybatisPlusDemoApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>编写实体类 <code>User.java</code>（此处使用了 Lombok 简化代码）</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>编写 Mapper 包下的 <code>UserMapper</code>接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="5-测试查询"><a href="#5-测试查询" class="headerlink" title="5.测试查询"></a>5.测试查询</h2><ul><li><p><strong>编写一个测试类<code>MyBatisPlusTest.java</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token comment">/**     * 测试查询所有数据     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testSelectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//通过条件构造器查询一个list集合，若没有条件，则可以设置null为参数</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>控制台打印查询结果</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519150454211.png" alt="image-20220519150454211"></p></li></ul><h1 id="三、增删改查"><a href="#三、增删改查" class="headerlink" title="三、增删改查"></a>三、增删改查</h1><h2 id="1-BaseMapper-lt-T-gt"><a href="#1-BaseMapper-lt-T-gt" class="headerlink" title="1.BaseMapper&lt;T&gt;"></a>1.BaseMapper&lt;T&gt;</h2><blockquote><p>说明:</p><ul><li>通用 CRUD 封装BaseMapper 接口，为 <code>Mybatis-Plus</code> 启动时自动解析实体表关系映射转换为 <code>Mybatis</code> 内部对象注入容器</li><li>泛型 <code>T</code> 为任意实体对象</li><li>参数 <code>Serializable</code> 为任意类型主键 <code>Mybatis-Plus</code> 不推荐使用复合主键约定每一张表都有自己的唯一 <code>id</code> 主键</li><li>对象 <code>Wrapper</code> 为条件构造器</li></ul></blockquote><p>MyBatis-Plus中的基本CRUD在内置的BaseMapper中都已得到了实现，因此我们继承该接口以后可以直接使用。</p><p>本次演示的CRUD操作不包含参数带有条件构造器的方法，关于条件构造器将单独在一个章节进行演示。</p><hr><blockquote><p><strong>BaseMapper中提供的CRUD方法：</strong></p></blockquote><ul><li><p><strong>增加：Insert</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 插入一条记录</span><span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>删除：Delete</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 根据 entity 条件，删除记录</span><span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删除（根据ID 批量删除）</span><span class="token keyword">int</span> <span class="token function">deleteBatchIds</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">COLLECTION</span><span class="token punctuation">)</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">></span></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 ID 删除</span><span class="token keyword">int</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token class-name">Serializable</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 columnMap 条件，删除记录</span><span class="token keyword">int</span> <span class="token function">deleteByMap</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">COLUMN_MAP</span><span class="token punctuation">)</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> columnMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>修改：Update</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 根据 whereWrapper 条件，更新记录</span><span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ENTITY</span><span class="token punctuation">)</span> <span class="token class-name">T</span> updateEntity<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> whereWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 ID 修改</span><span class="token keyword">int</span> <span class="token function">updateById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ENTITY</span><span class="token punctuation">)</span> <span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>查询：Selete</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 根据 ID 查询</span><span class="token class-name">T</span> <span class="token function">selectById</span><span class="token punctuation">(</span><span class="token class-name">Serializable</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 entity 条件，查询一条记录</span><span class="token class-name">T</span> <span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询（根据ID 批量查询）</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">selectBatchIds</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">COLLECTION</span><span class="token punctuation">)</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">></span></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 entity 条件，查询全部记录</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">selectList</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询（根据 columnMap 条件）</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">selectByMap</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">COLUMN_MAP</span><span class="token punctuation">)</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> columnMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper 条件，查询全部记录</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">selectMaps</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">selectObjs</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 entity 条件，查询全部记录（并翻页）</span><span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">selectPage</span><span class="token punctuation">(</span><span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper 条件，查询全部记录（并翻页）</span><span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">selectMapsPage</span><span class="token punctuation">(</span><span class="token class-name">IPage</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> page<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper 条件，查询总记录数</span><span class="token class-name">Integer</span> <span class="token function">selectCount</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">WRAPPER</span><span class="token punctuation">)</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-调用Mapper层实现CRUD"><a href="#2-调用Mapper层实现CRUD" class="headerlink" title="2.调用Mapper层实现CRUD"></a>2.调用Mapper层实现CRUD</h2><h3 id="2-1插入"><a href="#2-1插入" class="headerlink" title="2.1插入"></a>2.1插入</h3><hr><blockquote><p><strong>最终执行的结果，所获取的id为1527206783590903810</strong></p><p><strong>这是因为MyBatis-Plus在实现插入数据时，会默认基于雪花算法的策略生成id</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 测试插入一条数据  * MyBatis-Plus在实现插入数据时，会默认基于雪花算法的策略生成id  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Vz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"vz@oz6.cn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"添加成功！"</span> <span class="token operator">:</span> <span class="token string">"添加失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//1527206783590903810（当前 id 为雪花算法自动生成的id）</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id自动获取"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2删除"><a href="#2-2删除" class="headerlink" title="2.2删除"></a>2.2删除</h3><hr><h4 id="a、根据ID删除数据"><a href="#a、根据ID删除数据" class="headerlink" title="a、根据ID删除数据"></a>a、根据ID删除数据</h4><blockquote><p><strong>调用方法：int deleteById(Serializable id);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 测试根据id删除一条数据  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token number">1527206783590903810L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"删除成功！"</span> <span class="token operator">:</span> <span class="token string">"删除失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b、根据ID批量删除数据"><a href="#b、根据ID批量删除数据" class="headerlink" title="b、根据ID批量删除数据"></a>b、根据ID批量删除数据</h4><blockquote><p><strong>调用方法：int deleteBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 测试通过id批量删除数据  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteBatchIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> ids <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">6L</span><span class="token punctuation">,</span><span class="token number">7L</span><span class="token punctuation">,</span><span class="token number">8L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteBatchIds</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"删除成功！"</span> <span class="token operator">:</span> <span class="token string">"删除失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="c、根据Map条件删除数据"><a href="#c、根据Map条件删除数据" class="headerlink" title="c、根据Map条件删除数据"></a>c、根据Map条件删除数据</h4><blockquote><p><strong>调用方法：int deleteByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**   * 测试根据Map集合中所设置的条件删除数据   */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//当前演示为根据name和age删除数据</span>    <span class="token comment">//执行SQL为：DELETE FROM user WHERE name = ? AND age = ?</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"Vz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"删除成功！"</span> <span class="token operator">:</span> <span class="token string">"删除失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3修改"><a href="#2-3修改" class="headerlink" title="2.3修改"></a>2.3修改</h3><blockquote><p><strong>调用方法：int updateById(@Param(Constants.ENTITY) T entity);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 测试根据id修改用户信息  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdateById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//执行SQL为： UPDATE user SET name=?, age=?, email=? WHERE id=?</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">6L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"VzUpdate"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"Vz@sina.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"修改成功！"</span> <span class="token operator">:</span> <span class="token string">"修改失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4查询"><a href="#2-4查询" class="headerlink" title="2.4查询"></a>2.4查询</h3><hr><h4 id="a、根据ID查询用户信息"><a href="#a、根据ID查询用户信息" class="headerlink" title="a、根据ID查询用户信息"></a>a、根据ID查询用户信息</h4><blockquote><p><strong>调用方法：T selectById(Serializable id);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 测试根据id查询用户数据  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b、根据多个ID查询多个用户信息"><a href="#b、根据多个ID查询多个用户信息" class="headerlink" title="b、根据多个ID查询多个用户信息"></a>b、根据多个ID查询多个用户信息</h4><blockquote><p><strong>调用方法：List<T> selectBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 根据多个id查询用户数据  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectBatchIds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//执行SQL为：SELECT id,name,age,email FROM user WHERE id IN ( ? , ? , ? )</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> ids <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span><span class="token number">2L</span><span class="token punctuation">,</span><span class="token number">3L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectBatchIds</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="c、根据Map条件查询用户信息"><a href="#c、根据Map条件查询用户信息" class="headerlink" title="c、根据Map条件查询用户信息"></a>c、根据Map条件查询用户信息</h4><blockquote><p><strong>调用方法：List<T> selectByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 根据Map所设置的条件查询用户  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSelectByMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//执行SQL为：SELECT id,name,age,email FROM user WHERE age = ?</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="d、查询所有用户信息"><a href="#d、查询所有用户信息" class="headerlink" title="d、查询所有用户信息"></a>d、查询所有用户信息</h4><blockquote><p><strong>调用方法：List<T> selectList(@Param(Constants.WRAPPER) Wrapper<T> queryWrapper);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 测试查询所有数据  */</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">testSelectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-通用Service"><a href="#3-通用Service" class="headerlink" title="3.通用Service"></a>3.通用Service</h2><blockquote><p>说明:</p><ul><li>通用 Service CRUD 封装<code>IService</code>接口，进一步封装 CRUD 采用 <code>get 查询单行</code> <code>remove 删除</code> <code>list 查询集合</code> <code>page 分页</code> 前缀命名方式区分 <code>Mapper</code> 层避免混淆，</li><li>泛型 <code>T</code> 为任意实体对象</li><li>建议如果存在自定义通用 Service 方法的可能，请创建自己的 <code>IBaseService</code> 继承 <code>Mybatis-Plus</code> 提供的基类</li><li>对象 <code>Wrapper</code> 为 条件构造器</li></ul></blockquote><p>MyBatis-Plus中有一个接口 **<code>IService</code>**和其实现类 **<code>ServiceImpl</code>**，封装了常见的业务层逻辑，详情查看源码IService和ServiceImpl</p><p>因此我们在使用的时候仅需在自己定义的**<code>Service</code><strong>接口中继承</strong><code>IService</code><strong>接口，在自己的实现类中实现自己的Service并继承</strong><code>ServiceImpl</code>**即可</p><hr><blockquote><p><strong>IService中的CRUD方法</strong></p></blockquote><ul><li><p><strong>增加：Save、SaveOrUpdate</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 插入一条记录（选择字段，策略插入）</span><span class="token keyword">boolean</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 插入（批量）</span><span class="token keyword">boolean</span> <span class="token function">saveBatch</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> entityList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 插入（批量）</span><span class="token keyword">boolean</span> <span class="token function">saveBatch</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> entityList<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// TableId 注解存在更新记录，否插入一条记录</span><span class="token keyword">boolean</span> <span class="token function">saveOrUpdate</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法</span><span class="token keyword">boolean</span> <span class="token function">saveOrUpdate</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">,</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 批量修改插入</span><span class="token keyword">boolean</span> <span class="token function">saveOrUpdateBatch</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> entityList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 批量修改插入</span><span class="token keyword">boolean</span> <span class="token function">saveOrUpdateBatch</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> entityList<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>删除：Remove</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 根据 entity 条件，删除记录</span><span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 ID 删除</span><span class="token keyword">boolean</span> <span class="token function">removeById</span><span class="token punctuation">(</span><span class="token class-name">Serializable</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 columnMap 条件，删除记录</span><span class="token keyword">boolean</span> <span class="token function">removeByMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> columnMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删除（根据ID 批量删除）</span><span class="token keyword">boolean</span> <span class="token function">removeByIds</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">></span></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>修改：Update</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 根据 UpdateWrapper 条件，更新记录 需要设置sqlset</span><span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 whereWrapper 条件，更新记录</span><span class="token keyword">boolean</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">T</span> updateEntity<span class="token punctuation">,</span> <span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> whereWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 ID 选择修改</span><span class="token keyword">boolean</span> <span class="token function">updateById</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据ID 批量更新</span><span class="token keyword">boolean</span> <span class="token function">updateBatchById</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> entityList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据ID 批量更新</span><span class="token keyword">boolean</span> <span class="token function">updateBatchById</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> entityList<span class="token punctuation">,</span> <span class="token keyword">int</span> batchSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>查询：Get、List、Count</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 根据 ID 查询</span><span class="token class-name">T</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Serializable</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last("LIMIT 1")</span><span class="token class-name">T</span> <span class="token function">getOne</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper，查询一条记录</span><span class="token class-name">T</span> <span class="token function">getOne</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">,</span> <span class="token keyword">boolean</span> throwEx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper，查询一条记录</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper，查询一条记录</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token class-name">V</span> <span class="token function">getObj</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询所有</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询列表</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询（根据ID 批量查询）</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">listByIds</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Serializable</span><span class="token punctuation">></span></span> idList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询（根据 columnMap 条件）</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">listByMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> columnMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询所有列表</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">listMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询列表</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">listMaps</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询全部记录</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">listObjs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询全部记录</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">listObjs</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper 条件，查询全部记录</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">listObjs</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper 条件，查询全部记录</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token function">listObjs</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询总记录数</span><span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper 条件，查询总记录数</span><span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>分页：Page</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 根据 ID 查询</span><span class="token class-name">T</span> <span class="token function">getById</span><span class="token punctuation">(</span><span class="token class-name">Serializable</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last("LIMIT 1")</span><span class="token class-name">T</span> <span class="token function">getOne</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper，查询一条记录</span><span class="token class-name">T</span> <span class="token function">getOne</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">,</span> <span class="token keyword">boolean</span> throwEx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper，查询一条记录</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getMap</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 根据 Wrapper，查询一条记录</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">></span></span> <span class="token class-name">V</span> <span class="token function">getObj</span><span class="token punctuation">(</span><span class="token class-name">Wrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> queryWrapper<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span> mapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-调用Service层操作数据"><a href="#4-调用Service层操作数据" class="headerlink" title="4.调用Service层操作数据"></a>4.调用Service层操作数据</h2><blockquote><p>我们在自己的Service接口中通过继承MyBatis-Plus提供的IService接口，不仅可以获得其提供的CRUD方法，而且还可以使用自身定义的方法。</p></blockquote><ul><li><p><strong>创建<code>UserService</code>并继承<code>IService</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * UserService继承IService模板提供的基础功能   */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>创建<code>UserService</code>的实现类并继承<code>ServiceImpl</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * ServiceImpl实现了IService，提供了IService中基础功能的实现   * 若ServiceImpl无法满足业务需求，则可以使用自定的UserService定义方法，并在实现类中实现  */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserMapper</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>测试查询记录数</strong></p><blockquote><p><strong>调用方法：int count();</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//查询总记录数</span>    <span class="token comment">//执行的SQL为：SELECT COUNT( * ) FROM user</span>    <span class="token keyword">long</span> count <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总记录数："</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>测试批量插入数据</strong></p><blockquote><p><strong>调用方法：boolean saveBatch(Collection<T> entityList);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Vz"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">boolean</span> b <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b <span class="token operator">?</span> <span class="token string">"添加成功！"</span> <span class="token operator">:</span> <span class="token string">"添加失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="四、常用注解"><a href="#四、常用注解" class="headerlink" title="四、常用注解"></a>四、常用注解</h1><blockquote><p>MyBatis-Plus提供的注解可以帮我们解决一些数据库与实体之间相互映射的问题。</p></blockquote><h2 id="1-TableName"><a href="#1-TableName" class="headerlink" title="1.@TableName"></a>1.@TableName</h2><blockquote><p>经过以上的测试，在使用MyBatis-Plus实现基本的CRUD时，我们并没有指定要操作的表，只是在Mapper接口继承BaseMapper时，设置了泛型User，而操作的表为user表，由此得出结论，MyBatis-Plus在确定操作的表时，由BaseMapper的泛型决定，即实体类型决定，且默认操作的表名和实体类型的类名一致。</p></blockquote><h3 id="1-1引出问题"><a href="#1-1引出问题" class="headerlink" title="1.1引出问题"></a>1.1引出问题</h3><hr><blockquote><p><strong>若实体类类型的类名和要操作的表的表名不一致，会出现什么问题？</strong></p></blockquote><ul><li><p>我们将表<code>user</code>更名为<code>t_user</code>，测试查询功能</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520093844842.png" alt="image-20220520093844842"></p></li><li><p>程序抛出异常，<strong>Table ‘mybatis_plus.user’ doesn’t exist</strong>，因为现在的表名为<code>t_user</code>，而默认操作的表名和实体类型的类名一致，即<code>user</code>表</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520094126411.png" alt="image-20220520094126411"></p></li></ul><h3 id="1-2解决问题"><a href="#1-2解决问题" class="headerlink" title="1.2解决问题"></a>1.2解决问题</h3><hr><h4 id="a、使用注解解决问题"><a href="#a、使用注解解决问题" class="headerlink" title="a、使用注解解决问题"></a>a、使用注解解决问题</h4><blockquote><p><strong>在实体类类型上添加<code>@TableName(&quot;t_user&quot;)</code>，标识实体类对应的表，即可成功执行SQL语句</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@TableName</span><span class="token punctuation">(</span><span class="token string">"t_user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b、使用全局配置解决问题"><a href="#b、使用全局配置解决问题" class="headerlink" title="b、使用全局配置解决问题"></a>b、使用全局配置解决问题</h4><blockquote><p><strong>在开发的过程中，我们经常遇到以上的问题，即实体类所对应的表都有固定的前缀，例如 <code>t_</code> 或 <code>tbl_</code> 此时，可以使用MyBatis-Plus提供的全局配置，为实体类所对应的表名设置默认的前缀，那么就不需要在每个实体类上通过@TableName标识实体类对应的表</strong></p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token comment"># 设置实体类所对应的表的统一前缀</span>      <span class="token key atrule">table-prefix</span><span class="token punctuation">:</span> t_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-TableId"><a href="#2-TableId" class="headerlink" title="2.@TableId"></a>2.@TableId</h2><blockquote><p><strong>经过以上的测试，MyBatis-Plus在实现CRUD时，会默认将id作为主键列，并在插入数据时，默认基于雪花算法的策略生成id</strong></p></blockquote><h3 id="2-1引出问题"><a href="#2-1引出问题" class="headerlink" title="2.1引出问题"></a>2.1引出问题</h3><hr><blockquote><p><strong>若实体类和表中表示主键的不是id，而是其他字段，例如uid，MyBatis-Plus会自动识别uid为主键列吗？</strong></p></blockquote><ul><li><p>我们实体类中的属性<code>id</code>改为<code>uid</code>，将表中的字段<code>id</code>也改为<code>uid</code>，测试添加功能</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520100939157.png" alt="image-20220520100939157"></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520100715109.png" alt="image-20220520100715109"></p></li><li><p>程序抛出异常，<strong>Field ‘uid’ doesn’t have a default value</strong>，说明MyBatis-Plus没有将<code>uid</code>作为主键赋值</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520101317761.png" alt="image-20220520101317761"></p></li></ul><h3 id="2-2解决问题"><a href="#2-2解决问题" class="headerlink" title="2.2解决问题"></a>2.2解决问题</h3><hr><blockquote><p><strong>在实体类中uid属性上通过<code>@TableId</code>将其标识为主键，即可成功执行SQL语句</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Date</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@TableId</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> uid<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-TableId的value属性"><a href="#2-3-TableId的value属性" class="headerlink" title="2.3@TableId的value属性"></a>2.3@TableId的value属性</h3><hr><blockquote><p>若实体类中主键对应的属性为id，而表中表示主键的字段为uid，此时若只在属性id上添加注解@TableId，则抛出异常**Unknown column ‘id’ in ‘field list’**，即MyBatis-Plus仍然会将id作为表的主键操作，而表中表示主键的是字段uid此时需要通过@TableId注解的value属性，指定表中的主键字段，<code>@TableId(&quot;uid&quot;)</code>或<code>@TableId(value=&quot;uid&quot;)</code></p></blockquote><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520103030977.png" alt="image-20220520103030977"></p><h3 id="2-4-TableId的type属性"><a href="#2-4-TableId的type属性" class="headerlink" title="2.4@TableId的type属性"></a>2.4@TableId的type属性</h3><hr><blockquote><p><strong>type属性用来定义主键策略：默认雪花算法</strong></p></blockquote><p><strong>常用的主键策略：</strong></p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IdType.ASSIGN_ID（默认）</td><td align="center">基于雪花算法的策略生成数据id，与数据库id是否设置自增无关</td></tr><tr><td align="center">IdType.AUTO</td><td align="center">使用数据库的自增策略，注意，该类型请确保数据库设置了id自增，</td></tr></tbody></table><p><strong>配置全局主键策略：</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#MyBatis-Plus相关配置</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token comment">#配置日志</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token comment">#配置mp的主键策略为自增</span>      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto      <span class="token comment"># 设置实体类所对应的表的统一前缀</span>      <span class="token key atrule">table-prefix</span><span class="token punctuation">:</span> t_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-TbaleField"><a href="#3-TbaleField" class="headerlink" title="3.@TbaleField"></a>3.@TbaleField</h2><blockquote><p>经过以上的测试，我们可以发现，MyBatis-Plus在执行SQL语句时，要保证实体类中的属性名和表中的字段名一致</p><p>如果实体类中的属性名和字段名不一致的情况，会出现什么问题呢？</p></blockquote><h3 id="3-1情况一"><a href="#3-1情况一" class="headerlink" title="3.1情况一"></a>3.1情况一</h3><hr><p>若实体类中的属性使用的是驼峰命名风格，而表中的字段使用的是下划线命名风格</p><p>例如实体类属性<code>userName</code>，表中字段<code>user_name</code></p><p>此时MyBatis-Plus会自动将下划线命名风格转化为驼峰命名风格</p><p>相当于在MyBatis中配置</p><h3 id="3-2情况二"><a href="#3-2情况二" class="headerlink" title="3.2情况二"></a>3.2情况二</h3><hr><blockquote><p>若实体类中的属性和表中的字段不满足情况1</p><p>例如实体类属性<code>name</code>，表中字段<code>username</code></p><p>此时需要在实体类属性上使用<code>@TableField(&quot;username&quot;)</code>设置属性所对应的字段名</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@TableId</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-TableLogic"><a href="#4-TableLogic" class="headerlink" title="4.@TableLogic"></a>4.@TableLogic</h2><h3 id="4-1逻辑删除"><a href="#4-1逻辑删除" class="headerlink" title="4.1逻辑删除"></a>4.1逻辑删除</h3><hr><blockquote><p>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除的数据</p><p>逻辑删除：假删除，将对应数据中代表是否被删除字段的状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录</p><p>使用场景：可以进行数据恢复</p></blockquote><h3 id="4-2实现逻辑删除"><a href="#4-2实现逻辑删除" class="headerlink" title="4.2实现逻辑删除"></a>4.2实现逻辑删除</h3><hr><ul><li><p><strong>数据库中创建逻辑删除状态列，设置默认值为0</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520134529809.png" alt="image-20220520134529809"></p></li><li><p><strong>实体类中添加逻辑删除属性</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520134636112.png" alt="image-20220520134636112"></p></li><li><p><strong>测试删除功能，真正执行的是修改</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDeleteById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token number">1527472864163348482L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"删除成功！"</span> <span class="token operator">:</span> <span class="token string">"删除失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520135637388.png" alt="image-20220520135637388"></p></li><li><p><strong>此时执行查询方法，查询的结果为自动添加条件<code>is_deleted=0</code></strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520140036445.png" alt="image-20220520140036445"></p></li></ul><h1 id="五、条件构造器"><a href="#五、条件构造器" class="headerlink" title="五、条件构造器"></a>五、条件构造器</h1><h2 id="1-Wrapper介绍"><a href="#1-Wrapper介绍" class="headerlink" title="1.Wrapper介绍"></a>1.Wrapper介绍</h2><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220521092812125.png" alt="image-20220521092812125"></p><ul><li><p><code>Wrapper</code> ： 条件构造抽象类，最顶端父类</p><ul><li><p><code>AbstractWrapper </code>： 用于查询条件封装，生成 sql 的 where 条件</p><ul><li><p><code>QueryWrapper </code>： 查询条件封装</p></li><li><p><code>UpdateWrapper </code>： Update 条件封装</p></li><li><p><code>AbstractLambdaWrapper </code>： 使用Lambda 语法</p><ul><li><p><code>LambdaQueryWrapper </code>：用于Lambda语法使用的查询Wrapper</p></li><li><p><code>LambdaUpdateWrapper </code>： Lambda 更新封装Wrapper</p></li></ul></li></ul></li></ul></li></ul><h2 id="2-QueryWrapper"><a href="#2-QueryWrapper" class="headerlink" title="2.QueryWrapper"></a>2.QueryWrapper</h2><ul><li><p><strong>组装查询条件</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 AND (username LIKE ? AND age BETWEEN ? AND ? AND email IS NOT NULL)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//查询用户名包含a，年龄在20到30之间，邮箱信息不为null的用户信息</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>组装排序条件</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 ORDER BY age DESC,id ASC</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//查询用户信息，按照年龄的降序排序，若年龄相同，则按照id升序排序</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">orderByDesc</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orderByAsc</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>组装删除条件</strong></p><blockquote><p><strong>执行SQL：</strong>UPDATE t_user SET is_deleted&#x3D;1 WHERE is_deleted&#x3D;0 AND (email IS NULL)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//删除邮箱地址为null的用户信息</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"删除成功！"</span> <span class="token operator">:</span> <span class="token string">"删除失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>条件的优先级</strong></p><blockquote><p><strong>执行SQL：</strong>UPDATE t_user SET user_name&#x3D;?, email&#x3D;? WHERE is_deleted&#x3D;0 AND (age &gt; ? AND user_name LIKE ? OR email IS NULL)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//将（年龄大于20并且用户名中包含有a）或邮箱为null的用户信息修改</span>    <span class="token class-name">UpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> updateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateWrapper<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Oz"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"test@oz6.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"修改成功！"</span> <span class="token operator">:</span> <span class="token string">"修改失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>执行SQL：</strong>UPDATE t_user SET username&#x3D;?, email&#x3D;? WHERE is_deleted&#x3D;0 AND (username LIKE ? AND (age &gt; ? OR email IS NULL))</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</span>    <span class="token class-name">UpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> updateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>i<span class="token operator">-></span>i<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Vz7797"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setEmail</span><span class="token punctuation">(</span><span class="token string">"test@ss8o.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"修改成功！"</span> <span class="token operator">:</span> <span class="token string">"修改失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>组装select子句</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT username,age,email FROM t_user WHERE is_deleted&#x3D;0</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//查询用户的用户名、年龄、邮箱信息</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> maps <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectMaps</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    maps<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>实现子查询</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 AND (uid IN (select uid from t_user where uid &lt;&#x3D; 100))</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test07</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//查询id小于等于100的用户信息</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">inSql</span><span class="token punctuation">(</span><span class="token string">"uid"</span><span class="token punctuation">,</span> <span class="token string">"select uid from t_user where uid &lt;= 100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-UpdateWrapper"><a href="#3-UpdateWrapper" class="headerlink" title="3.UpdateWrapper"></a>3.UpdateWrapper</h2><blockquote><p>UpdateWrapper不仅拥有QueryWrapper的组装条件功能，还提供了set方法进行修改对应条件的数据库信息</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test08</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</span>    <span class="token class-name">UpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> updateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span> i <span class="token operator">-></span> i<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">,</span><span class="token string">"svip@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token string">"修改成功！"</span> <span class="token operator">:</span> <span class="token string">"修改失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"受影响的行数为："</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-condition"><a href="#4-condition" class="headerlink" title="4.condition"></a>4.condition</h2><blockquote><p>在真正开发的过程中，组装条件是常见的功能，而这些条件数据来源于用户输入，是可选的，因此我们在组装这些条件时，必须先判断用户是否选择了这些条件，若选择则需要组装该条件，若没有选择则一定不能组装，以免影响SQL执行的结果</p></blockquote><ul><li><p><strong>思路一</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 AND (user_name LIKE ? AND age &lt;&#x3D; ?)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test09</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> ageBegin <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> ageEnd <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//isNotBlank判断某个字符创是否不为空字符串、不为null、不为空白符</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token string">"user_name"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ageBegin <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> ageBegin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ageEnd <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        queryWrapper<span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span> ageEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>思路二</strong></p><blockquote><p>上面的实现方案没有问题，但是代码比较复杂，我们可以使用带condition参数的重载方法构建查询条件，简化代码的编写</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> ageBegin <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> ageEnd <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"user_name"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span>ageBegin <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> ageBegin<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span>ageEnd <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">,</span> ageEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="5-LambdaQueryWrapper"><a href="#5-LambdaQueryWrapper" class="headerlink" title="5.LambdaQueryWrapper"></a>5.LambdaQueryWrapper</h2><blockquote><p>功能等同于QueryWrapper，提供了Lambda表达式的语法可以避免填错列名。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test11</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> ageBegin <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token class-name">Integer</span> ageEnd <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaQueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">ge</span><span class="token punctuation">(</span>ageBegin <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> ageBegin<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">le</span><span class="token punctuation">(</span>ageEnd <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> ageEnd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-LambdaUpdateWrapper"><a href="#6-LambdaUpdateWrapper" class="headerlink" title="6.LambdaUpdateWrapper"></a>6.LambdaUpdateWrapper</h2><blockquote><p>功能等同于UpdateWrapper，提供了Lambda表达式的语法可以避免填错列名。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test12</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改</span>    <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> updateWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LambdaUpdateWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateWrapper<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>i <span class="token operator">-></span> i<span class="token punctuation">.</span><span class="token function">gt</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getEmail</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    updateWrapper<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">,</span> <span class="token string">"小黑"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token operator">::</span><span class="token function">getEmail</span><span class="token punctuation">,</span><span class="token string">"abc@atguigu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> updateWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result："</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六、常用插件"><a href="#六、常用插件" class="headerlink" title="六、常用插件"></a>六、常用插件</h1><h2 id="1-分页插件"><a href="#1-分页插件" class="headerlink" title="1.分页插件"></a>1.分页插件</h2><blockquote><p>MyBatis Plus自带分页插件，只要简单的配置即可实现分页功能</p></blockquote><ul><li><p><strong>添加配置类<code>MyBatisPlusConfig</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.mybatisplus.mapper"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisPlusConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//添加分页插件</span>        interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span><span class="token constant">MYSQL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>编写测试方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//new Page()中的两个参数分别是当前页码，每页显示数量</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectPage</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-自定义分页"><a href="#2-自定义分页" class="headerlink" title="2.自定义分页"></a>2.自定义分页</h2><blockquote><p>上面调用的是MyBatis-Plus提供的带有分页的方法，那么我们自己定义的方法如何实现分页呢？</p></blockquote><ul><li><p><strong>在<code>UserMapper</code>接口中定义一个方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 根据年龄查询用户列表，分页显示   * @param page 分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位   * @param age 年龄   * @return   */</span><span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token function">selectPageVo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"page"</span><span class="token punctuation">)</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> page<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>在<code>UserMapper.xml</code>中编写SQL实现该方法</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectPageVo<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id,username as name,age,email from t_user where age > #&#123;age&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>编写测试方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPageVo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> page <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectPageVo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> page<span class="token punctuation">.</span><span class="token function">getRecords</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-乐观锁"><a href="#3-乐观锁" class="headerlink" title="3.乐观锁"></a>3.乐观锁</h2><blockquote><p><strong>作用：当要更新一条记录的时候，希望这条记录没有被别人更新</strong></p></blockquote><p>乐观锁的实现方式：</p><ul><li>取出记录时，获取当前 version</li><li>更新时，带上这个 version</li><li>执行更新时， set version &#x3D; newVersion where version &#x3D; oldVersion</li><li>如果 version 不对，就更新失败</li></ul><h3 id="3-1场景"><a href="#3-1场景" class="headerlink" title="3.1场景"></a>3.1场景</h3><hr><ul><li>一件商品，成本价是80元，售价是100元。老板先是通知小李，说你去把商品价格增加50元。小李正在玩游戏，耽搁了一个小时。正好一个小时后，老板觉得商品价格增加到150元，价格太高，可能会影响销量。又通知小王，你把商品价格降低30元。</li><li>此时，小李和小王同时操作商品后台系统。小李操作的时候，系统先取出商品价格100元；小王也在操作，取出的商品价格也是100元。小李将价格加了50元，并将100+50&#x3D;150元存入了数据库；小王将商品减了30元，并将100-30&#x3D;70元存入了数据库。是的，如果没有锁，小李的操作就完全被小王的覆盖了。</li><li>现在商品价格是70元，比成本价低10元。几分钟后，这个商品很快出售了1千多件商品，老板亏1万多。</li></ul><h3 id="3-2乐观锁与悲观锁"><a href="#3-2乐观锁与悲观锁" class="headerlink" title="3.2乐观锁与悲观锁"></a>3.2乐观锁与悲观锁</h3><hr><ul><li>上面的故事，如果是乐观锁，小王保存价格前，会检查下价格是否被人修改过了。如果被修改过了，则重新取出的被修改后的价格，150元，这样他会将120元存入数据库。</li><li>如果是悲观锁，小李取出数据后，小王只能等小李操作完之后，才能对价格进行操作，也会保证最终的价格是120元。</li></ul><h3 id="3-3模拟修改冲突"><a href="#3-3模拟修改冲突" class="headerlink" title="3.3模拟修改冲突"></a>3.3模拟修改冲突</h3><hr><ul><li><p><strong>数据库中增加商品表</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_product <span class="token punctuation">(</span>     id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>     NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品名称'</span><span class="token punctuation">,</span>     price <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'价格'</span><span class="token punctuation">,</span>     VERSION <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'乐观锁版本号'</span><span class="token punctuation">,</span>     <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>添加一条数据</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_product <span class="token punctuation">(</span>id<span class="token punctuation">,</span> NAME<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'外星人笔记本'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>添加一个实体类<code>Product</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> price<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> version<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>添加一个Mapper接口<code>ProductMapper</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>测试方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testProduct01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1.小李获取商品价格</span>    <span class="token class-name">Product</span> productLi <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小李获取的商品价格为："</span> <span class="token operator">+</span> productLi<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.小王获取商品价格</span>    <span class="token class-name">Product</span> productWang <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小李获取的商品价格为："</span> <span class="token operator">+</span> productWang<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.小李修改商品价格+50</span>    productLi<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>productLi<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    productMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>productLi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.小王修改商品价格-30</span>    productWang<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>productWang<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    productMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>productWang<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//5.老板查询商品价格</span>    <span class="token class-name">Product</span> productBoss <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老板获取的商品价格为："</span> <span class="token operator">+</span> productBoss<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>执行结果</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220521225803162.png" alt="image-20220521225803162"></p></li></ul><h3 id="3-4乐观锁解决问题"><a href="#3-4乐观锁解决问题" class="headerlink" title="3.4乐观锁解决问题"></a>3.4乐观锁解决问题</h3><hr><ul><li><p><strong>实体类<code>version</code>字段添加注解<code>@Version</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> price<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Version</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> version<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>添加乐观锁插件配置</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> <span class="token class-name">MybatisPlusInterceptor</span> <span class="token function">mybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">MybatisPlusInterceptor</span> interceptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MybatisPlusInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加分页插件</span>    interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PaginationInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">DbType</span><span class="token punctuation">.</span><span class="token constant">MYSQL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//添加乐观锁插件</span>    interceptor<span class="token punctuation">.</span><span class="token function">addInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OptimisticLockerInnerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> interceptor<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>再次执行测试方法</strong></p><blockquote><p>小李查询商品信息：</p><p>​SELECT id,name,price,version FROM t_product WHERE id&#x3D;?</p><p>小王查询商品信息：</p><p>​SELECT id,name,price,version FROM t_product WHERE id&#x3D;?</p><p>小李修改商品价格，自动将version+1</p><p>​UPDATE t_product SET name&#x3D;?, price&#x3D;?, version&#x3D;? WHERE id&#x3D;? AND version&#x3D;?</p><p>​Parameters: 外星人笔记本(String), 150(Integer), 1(Integer), 1(Long), 0(Integer)</p><p>小王修改商品价格，此时version已更新，条件不成立，修改失败</p><p>​UPDATE t_product SET name&#x3D;?, price&#x3D;?, version&#x3D;? WHERE id&#x3D;? AND version&#x3D;?</p><p>​Parameters: 外星人笔记本(String), 70(Integer), 1(Integer), 1(Long), 0(Integer)</p><p>最终，小王修改失败，查询价格：150</p><p>​SELECT id,name,price,version FROM t_product WHERE id&#x3D;?</p></blockquote></li><li><p><strong>优化执行流程</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testProduct01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1.小李获取商品价格</span>    <span class="token class-name">Product</span> productLi <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小李获取的商品价格为："</span> <span class="token operator">+</span> productLi<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//2.小王获取商品价格</span>    <span class="token class-name">Product</span> productWang <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小李获取的商品价格为："</span> <span class="token operator">+</span> productWang<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3.小李修改商品价格+50</span>    productLi<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>productLi<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    productMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>productLi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//4.小王修改商品价格-30</span>    productWang<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>productWang<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>productWang<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//操作失败，重试</span>        <span class="token class-name">Product</span> productNew <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productNew<span class="token punctuation">.</span><span class="token function">setPrice</span><span class="token punctuation">(</span>productNew<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        productMapper<span class="token punctuation">.</span><span class="token function">updateById</span><span class="token punctuation">(</span>productNew<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//5.老板查询商品价格</span>    <span class="token class-name">Product</span> productBoss <span class="token operator">=</span> productMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老板获取的商品价格为："</span> <span class="token operator">+</span> productBoss<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220521230448577.png" alt="image-20220521230448577"></p></li></ul><h1 id="七、通用枚举"><a href="#七、通用枚举" class="headerlink" title="七、通用枚举"></a>七、通用枚举</h1><blockquote><p>表中的有些字段值是固定的，例如性别（男或女），此时我们可以使用MyBatis-Plus的通用枚举来实现</p></blockquote><ul><li><p><strong>数据库表添加字段<code>sex</code></strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220521231317777.png" alt="image-20220521231317777"></p></li><li><p><strong>创建通用枚举类型</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">SexEnum</span> <span class="token punctuation">&#123;</span>    <span class="token function">MALE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">FEMALE</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@EnumValue</span> <span class="token comment">//将注解所标识的属性的值存储到数据库中</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> sexName<span class="token punctuation">;</span>    <span class="token class-name">SexEnum</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> sex<span class="token punctuation">,</span> <span class="token class-name">String</span> sexName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sexName <span class="token operator">=</span> sexName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>User实体类中添加属性sex</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableField</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span>    <span class="token annotation punctuation">@TableLogic</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> isDeleted<span class="token punctuation">;</span>  <span class="token comment">//逻辑删除</span>    <span class="token keyword">private</span> <span class="token class-name">SexEnum</span> sex<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>配置扫描通用枚举</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment">#MyBatis-Plus相关配置</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token comment">#指定mapper文件所在的地址</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>mapper/<span class="token important">*.xml</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token comment">#配置日志</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token key atrule">banner</span><span class="token punctuation">:</span> off    <span class="token key atrule">db-config</span><span class="token punctuation">:</span>      <span class="token comment">#配置mp的主键策略为自增</span>      <span class="token key atrule">id-type</span><span class="token punctuation">:</span> auto      <span class="token comment"># 设置实体类所对应的表的统一前缀</span>      <span class="token key atrule">table-prefix</span><span class="token punctuation">:</span> t_  <span class="token comment">#配置类型别名所对应的包</span>  <span class="token key atrule">type-aliases-package</span><span class="token punctuation">:</span> com.atguigu.mybatisplus.pojo  <span class="token comment"># 扫描通用枚举的包</span>  <span class="token key atrule">type-enums-package</span><span class="token punctuation">:</span> com.atguigu.mybatisplus.enums<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>执行测试方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    user<span class="token punctuation">.</span><span class="token function">setSex</span><span class="token punctuation">(</span><span class="token class-name">SexEnum</span><span class="token punctuation">.</span><span class="token constant">MALE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result:"</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="八、多数据源"><a href="#八、多数据源" class="headerlink" title="八、多数据源"></a>八、多数据源</h1><blockquote><p>适用于多种场景：纯粹多库、 读写分离、 一主多从、 混合模式等</p></blockquote><p>场景说明：</p><p>我们创建两个库，分别为：<code>mybatis_plus</code>（以前的库不动）与<code>mybatis_plus_1</code>（新建），将mybatis_plus库的<code>product</code>表移动到mybatis_plus_1库，这样每个库一张表，通过一个测试用例分别获取用户数据与商品数据，如果获取到说明多库模拟成功</p><h2 id="1-创建数据库及表"><a href="#1-创建数据库及表" class="headerlink" title="1.创建数据库及表"></a>1.创建数据库及表</h2><ul><li><p><strong>创建数据库<code>mybatis_plus_1</code>和表&#96;product</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token identifier"><span class="token punctuation">`</span>mybatis_plus_1<span class="token punctuation">`</span></span> <span class="token comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 */</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token identifier"><span class="token punctuation">`</span>mybatis_plus_1<span class="token punctuation">`</span></span><span class="token punctuation">;</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> product <span class="token punctuation">(</span>     id <span class="token keyword">BIGINT</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键ID'</span><span class="token punctuation">,</span>     name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'商品名称'</span><span class="token punctuation">,</span>     price <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'价格'</span><span class="token punctuation">,</span>     version <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token number">0</span> <span class="token keyword">COMMENT</span> <span class="token string">'乐观锁版本号'</span><span class="token punctuation">,</span>     <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>添加测试数据</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> product <span class="token punctuation">(</span>id<span class="token punctuation">,</span> NAME<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'外星人笔记本'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>删除<code>mybatis_plus</code>库中的<code>product</code>表</strong> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> mybatis_plus<span class="token punctuation">;</span> <span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> product<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="2-新建工程引入依赖"><a href="#2-新建工程引入依赖" class="headerlink" title="2.新建工程引入依赖"></a>2.新建工程引入依赖</h2><blockquote><p><strong>自行新建一个Spring Boot工程并选择MySQL驱动及Lombok依赖</strong></p></blockquote><p><strong>引入MyBaits-Plus的依赖及多数据源的依赖</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dynamic-datasource-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-编写配置文件"><a href="#3-编写配置文件" class="headerlink" title="3.编写配置文件"></a>3.编写配置文件</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token comment"># 配置数据源信息</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>      <span class="token comment"># 设置默认的数据源或者数据源组,默认值即为master</span>      <span class="token key atrule">primary</span><span class="token punctuation">:</span> master      <span class="token comment"># 严格匹配数据源,默认false.true未匹配到指定数据源时抛异常,false使用默认数据源</span>      <span class="token key atrule">strict</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">master</span><span class="token punctuation">:</span>          <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis_plus<span class="token punctuation">?</span>characterEncoding=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL=false</span>          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver          <span class="token key atrule">username</span><span class="token punctuation">:</span> root          <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">132537</span>        <span class="token key atrule">slave_1</span><span class="token punctuation">:</span>          <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis_plus_1<span class="token punctuation">?</span>characterEncoding=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL=false</span>          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver          <span class="token key atrule">username</span><span class="token punctuation">:</span> root          <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">132537</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-创建实体类"><a href="#4-创建实体类" class="headerlink" title="4.创建实体类"></a>4.创建实体类</h2><ul><li><p>新建一个<code>User</code>实体类（如果数据库表名有t_前缀记得配置）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>新建一个实体类<code>Product</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> price<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> version<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="5-创建Mapper及Service"><a href="#5-创建Mapper及Service" class="headerlink" title="5.创建Mapper及Service"></a>5.创建Mapper及Service</h2><ul><li><p>新建接口<code>UserMapper</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>新建接口<code>ProductMapper</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>新建Service接口<code>UserService</code>指定操作的数据源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">"master"</span><span class="token punctuation">)</span> <span class="token comment">//指定操作的数据源，master为user表</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>新建Service接口<code>ProductService</code>指定操作的数据源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">"slave_1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ProductService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>自行建立Service的实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="6-编写测试方法"><a href="#6-编写测试方法" class="headerlink" title="6.编写测试方法"></a>6.编写测试方法</h2><blockquote><p><strong>记得在启动类中添加注解<code>@MapperScan()</code></strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TestDatasourceApplicationTests</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Resource</span><span class="token class-name">UserService</span> userService<span class="token punctuation">;</span><span class="token annotation punctuation">@Resource</span><span class="token class-name">ProductService</span> productService<span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Product</span> product <span class="token operator">=</span> productService<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"User = "</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Product = "</span> <span class="token operator">+</span> product<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522113049945.png" alt="image-20220522113049945"></p><h1 id="九、MyBatisX插件"><a href="#九、MyBatisX插件" class="headerlink" title="九、MyBatisX插件"></a>九、MyBatisX插件</h1><blockquote><p>MyBatis-Plus为我们提供了强大的mapper和service模板，能够大大的提高开发效率。</p><p>但是在真正开发过程中，MyBatis-Plus并不能为我们解决所有问题，例如一些复杂的SQL，多表联查，我们就需要自己去编写代码和SQL语句，我们该如何快速的解决这个问题呢，这个时候可以使用MyBatisX插件。</p><p>MyBatisX一款基于 IDEA 的快速开发插件，为效率而生。</p></blockquote><h2 id="1-安装MyBatisX插件"><a href="#1-安装MyBatisX插件" class="headerlink" title="1.安装MyBatisX插件"></a>1.安装MyBatisX插件</h2><blockquote><p><strong>打开IDEA，File-&gt; Setteings-&gt;Plugins-&gt;MyBatisX，搜索栏搜索MyBatisX然后安装。</strong></p></blockquote><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522115718361.png" alt="image-20220522115718361"></p><h2 id="2-快速生成代码"><a href="#2-快速生成代码" class="headerlink" title="2.快速生成代码"></a>2.快速生成代码</h2><ul><li><p>新建一个Spring Boot项目引入依赖（创建工程时记得勾选lombok及mysql驱动）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dynamic-datasource-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置数据源信息</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> com.zaxxer.hikari.HikariDataSource    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/mybatis_plus<span class="token punctuation">?</span>characterEncoding=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL=false</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">132537</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在IDEA中与数据库建立链接</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522120758740.png" alt="image-20220522120758740"></p></li><li><p>填写数据库信息并保存</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522121434468.png" alt="image-20220522121434468"></p></li><li><p>找到我们需要生成的表点击右键</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522121613909.png" alt="image-20220522121613909"></p></li><li><p>填写完信息以后下一步</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522122127649.png" alt="image-20220522122127649"></p></li><li><p>继续填写信息</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522122525598.png" alt="image-20220522122525598"></p></li><li><p><strong>大功告成（真特么好用yyds）</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522122612334.png" alt="image-20220522122612334"></p></li></ul><h2 id="3-快速生成CRUD"><a href="#3-快速生成CRUD" class="headerlink" title="3.快速生成CRUD"></a>3.快速生成CRUD</h2><blockquote><p>MyBaitsX可以根据我们在Mapper接口中输入的方法名快速帮我们生成对应的sql语句</p></blockquote><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522123143852.png" alt="image-20220522123143852"></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522123202310.png" alt="image-20220522123202310"></p><h1 id="十、致谢"><a href="#十、致谢" class="headerlink" title="十、致谢"></a>十、致谢</h1><p>感谢尚硅谷杨博超老师：<a href="https://www.bilibili.com/video/BV12R4y157Be?p=1">https://www.bilibili.com/video/BV12R4y157Be?p=1</a></p><p>感谢MyBatis-Plus作者苞米豆：<a href="https://baomidou.com/">https://baomidou.com/</a></p><p>感谢自己又坚持学习了一门课程：<a href="https://www.oz6.cn/">https://www.oz6.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis-Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化信息收集</title>
      <link href="/2023/04/19/%E8%87%AA%E5%8A%A8%E5%8C%96%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/2023/04/19/%E8%87%AA%E5%8A%A8%E5%8C%96%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="水泽"><a href="#水泽" class="headerlink" title="水泽"></a>水泽</h2>]]></content>
      
      
      <categories>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ASR </tag>
            
            <tag> Suize </tag>
            
            <tag> Kscan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRC收集</title>
      <link href="/2023/04/19/SRC%E6%94%B6%E9%9B%86/"/>
      <url>/2023/04/19/SRC%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<div class="note info simple"><ul><li>企业SRC</li><li>众测平台</li><li>公众号关注动态<br>(按ctrl~F搜索页面内容，代码块也可以折叠)</li></ul></div><h2 id="企业SRC收集"><a href="#企业SRC收集" class="headerlink" title="企业SRC收集"></a>企业SRC收集</h2><pre class="line-numbers language-none"><code class="language-none"> A 阿里巴巴 (ASRC) https:&#x2F;&#x2F;security.alibaba.com&#x2F;  阿里云先知 https:&#x2F;&#x2F;xianzhi.aliyun.com&#x2F;    爱奇艺 (71SRC) https:&#x2F;&#x2F;security.iqiyi.com&#x2F;    安全狗 http:&#x2F;&#x2F;security.safedog.cn&#x2F;index.html   安恒 https:&#x2F;&#x2F;security.dbappsecurity.com.cn&#x2F;    B BIGO (BSRC) https:&#x2F;&#x2F;security.bigo.sg&#x2F;    BOSS直聘 (BSSRC) https:&#x2F;&#x2F;src.zhipin.com&#x2F;    百度 (BSRC) https:&#x2F;&#x2F;bsrc.baidu.com&#x2F;    百合 (BHSRC) https:&#x2F;&#x2F;src.baihe.com&#x2F;    贝贝 (BBSRC) https:&#x2F;&#x2F;src.beibei.com.cn&#x2F;    贝壳 (BKSRC) https:&#x2F;&#x2F;security.ke.com&#x2F;    本木医疗 (BMSRC) https:&#x2F;&#x2F;security.benmu-health.com&#x2F;src&#x2F;    哔哩哔哩 (BILISRC) https:&#x2F;&#x2F;security.bilibili.com&#x2F;   C 菜鸟网络 (CNSRC) https:&#x2F;&#x2F;sec.cainiao.com&#x2F;   D DHgate (DHSRC) http:&#x2F;&#x2F;dhsrc.dhgate.com&#x2F;    大疆 (DJISRC) https:&#x2F;&#x2F;security.dji.com&#x2F;    滴滴出行 (DSRC) https:&#x2F;&#x2F;sec.didichuxing.com&#x2F;    东方财富 (EMSRC) https:&#x2F;&#x2F;security.eastmoney.com&#x2F;   斗米 (DMSRC) https:&#x2F;&#x2F;security.doumi.com&#x2F;    斗鱼 (DYSRC) https:&#x2F;&#x2F;security.douyu.com&#x2F;    度小满 (DXMSRC) https:&#x2F;&#x2F;security.duxiaoman.com&#x2F;   F 法大大 (FSRC) https:&#x2F;&#x2F;sec.fadada.com&#x2F;   富友 (FSRC) https:&#x2F;&#x2F;fsrc.fuiou.com&#x2F;    G 瓜子 (GZSRC) https:&#x2F;&#x2F;security.guazi.com&#x2F;    H 好未来 (100TALSRC) https:&#x2F;&#x2F;src.100tal.com&#x2F;    合合 (ISRC) https:&#x2F;&#x2F;security.intsig.com&#x2F;    恒昌 (HCSRC) http:&#x2F;&#x2F;src.credithc.com&#x2F;    虎牙 (HSRC) https:&#x2F;&#x2F;src.huya.com&#x2F;    华为 (HBP) https:&#x2F;&#x2F;bugbounty.huawei.com&#x2F;    华住 (HSRC) https:&#x2F;&#x2F;sec.huazhu.com&#x2F;    欢聚时代 (YSRC) https:&#x2F;&#x2F;security.yy.com&#x2F;    货拉拉 (LLSRC) https:&#x2F;&#x2F;llsrc.huolala.cn&#x2F;     J 焦点 (FSRC) https:&#x2F;&#x2F;security.focuschina.com&#x2F;    金山办公 (WPSSRC) https:&#x2F;&#x2F;security.wps.cn&#x2F;   金山云 (KYSRC) https:&#x2F;&#x2F;kysrc.vulbox.com&#x2F;    京东 (JSRC) https:&#x2F;&#x2F;security.jd.com&#x2F;   竞技世界 (JJSRC) https:&#x2F;&#x2F;security.jj.cn&#x2F;    K 酷狗 (KGSRC) https:&#x2F;&#x2F;security.kugou.com&#x2F;    快手 (KwaiSRC) https:&#x2F;&#x2F;security.kuaishou.com&#x2F;    旷视 (MSRC) https:&#x2F;&#x2F;megvii.huoxian.cn&#x2F;   L 老虎证券 (TigerSRC) https:&#x2F;&#x2F;security.itiger.com&#x2F;    乐信 (LXSRC) http:&#x2F;&#x2F;security.lexinfintech.com&#x2F;    理想 https:&#x2F;&#x2F;security.lixiang.com&#x2F;    联想 (LSRC) https:&#x2F;&#x2F;lsrc.vulbox.com&#x2F;   猎聘 (LPSRC) https:&#x2F;&#x2F;security.liepin.com&#x2F;    M  MYSRC https:&#x2F;&#x2F;mysrc.group&#x2F;    马蜂窝 (MFWSRC) https:&#x2F;&#x2F;security.mafengwo.cn&#x2F;    蚂蚁集团 (AntSRC) https:&#x2F;&#x2F;security.alipay.com&#x2F;    美丽联合 (MLSRC) https:&#x2F;&#x2F;security.mogu.com&#x2F;    美团 (MTSRC) https:&#x2F;&#x2F;security.meituan.com&#x2F;    魅族 (MEIXZUSRC) https:&#x2F;&#x2F;sec.meizu.com&#x2F;    陌陌 (MMSRC) https:&#x2F;&#x2F;security.immomo.com&#x2F;    N 你我贷 (NSRC) http:&#x2F;&#x2F;www.niwodai.com&#x2F;sec&#x2F;index.htm    O OPPO (OSRC) https:&#x2F;&#x2F;security.oppo.com&#x2F;    P 平安 (PSRC) https:&#x2F;&#x2F;security.pingan.com&#x2F;   平安汇聚 (ISRC) https:&#x2F;&#x2F;isrc.pingan.com&#x2F;    Q 千米 (QMSRC) https:&#x2F;&#x2F;security.qianmi.com&#x2F;    去哪儿 (QSRC) https:&#x2F;&#x2F;security.qunar.com&#x2F;   R  融360 (Rong360SRC) https:&#x2F;&#x2F;security.rong360.com&#x2F;   S SHEIN https:&#x2F;&#x2F;security.shein.com&#x2F;    SOUL https:&#x2F;&#x2F;security.soulapp.cn&#x2F;    360 (360SRC) https:&#x2F;&#x2F;security.360.cn&#x2F;    深信服 (SSRC) https:&#x2F;&#x2F;security.sangfor.com.cn&#x2F;    世纪佳缘 (JYSRC) https:&#x2F;&#x2F;src.jiayuan.com&#x2F;    水滴安全 (SDSRC) https:&#x2F;&#x2F;security.shuidihuzhu.com&#x2F;    顺丰 (SFSRC) http:&#x2F;&#x2F;sfsrc.sf-express.com&#x2F;    搜狗  http:&#x2F;&#x2F;sec.sogou.com&#x2F;    苏宁 (SNSRC) https:&#x2F;&#x2F;security.suning.com&#x2F;    T T3出行 (T3SRC) https:&#x2F;&#x2F;security.t3go.cn&#x2F;    TCL (TCLSRC) https:&#x2F;&#x2F;src.tcl.com&#x2F;    腾讯 (TSRC) https:&#x2F;&#x2F;security.tencent.com&#x2F;    同程旅行 (LYSRC) https:&#x2F;&#x2F;sec.ly.com&#x2F;    同程数科 (TJSRC) https:&#x2F;&#x2F;securitytcjf.com&#x2F;    统信(USRC) https:&#x2F;&#x2F;src.uniontech.com&#x2F;    同舟共测 https:&#x2F;&#x2F;tz.alipay.com&#x2F;    途虎 (THSRC) https:&#x2F;&#x2F;security.tuhu.cn&#x2F;    途牛 (TNSRC) https:&#x2F;&#x2F;sec.tuniu.com&#x2F;    U UCLOUD (USRC) https:&#x2F;&#x2F;sec.ucloud.cn&#x2F;   V VIPKID (VKSRC) https:&#x2F;&#x2F;security.vipkid.com.cn&#x2F;   VIVO (vivoSRC) https:&#x2F;&#x2F;security.vivo.com.cn&#x2F;    W WiFi万能钥匙 (WIFISRC) https:&#x2F;&#x2F;sec.wifi.com&#x2F;    挖财 (WACSRC) https:&#x2F;&#x2F;sec.wacai.com&#x2F;    完美世界 (PWSRC) https:&#x2F;&#x2F;security.wanmei.com&#x2F;    网易 (NSRC) https:&#x2F;&#x2F;aq.163.com&#x2F;   唯品会 (VSRC) https:&#x2F;&#x2F;sec.vip.com&#x2F;    微博 (WSRC) https:&#x2F;&#x2F;wsrc.weibo.com&#x2F;    微众 (WSRC)https:&#x2F;&#x2F;security.webank.com&#x2F;   58 (58SRC) https:&#x2F;&#x2F;security.58.com&#x2F;    伍林堂 (WSRC) https:&#x2F;&#x2F;www.wulintang.net&#x2F;    X 喜马拉雅 (XMSRC) https:&#x2F;&#x2F;security.ximalaya.com&#x2F;    享道出行 (SDSRC) https:&#x2F;&#x2F;src.saicmobility.com&#x2F;    小米 (MISRC) https:&#x2F;&#x2F;sec.xiaomi.com&#x2F;    小赢 (XYSRC) https:&#x2F;&#x2F;security.xiaoying.com&#x2F;    携程 (CSRC) https:&#x2F;&#x2F;sec.ctrip.com&#x2F;    新浪 (SSRC) https:&#x2F;&#x2F;sec.sina.com.cn&#x2F;    讯飞 (XFSRC) https:&#x2F;&#x2F;security.iflytek.com&#x2F;    Y 易宠 (ESRC) https:&#x2F;&#x2F;sec.epet.com&#x2F;   一加 (ONESRC https:&#x2F;&#x2F;security.oneplus.com&#x2F;    一起教育 (17SRC) https:&#x2F;&#x2F;security.17zuoye.com&#x2F;    宜信 (CESRC) https:&#x2F;&#x2F;security.creditease.cn&#x2F;   银联 (USRC) https:&#x2F;&#x2F;security.unionpay.com&#x2F;    萤石 (YSCR) https:&#x2F;&#x2F;ysrc.ys7.com&#x2F;    有赞 (YZSRC) https:&#x2F;&#x2F;src.youzan.com&#x2F;    Z 字节跳动 https:&#x2F;&#x2F;security.bytedance.com&#x2F;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="众测平台"><a href="#众测平台" class="headerlink" title="众测平台"></a>众测平台</h2> <pre class="line-numbers language-none"><code class="language-none">#国内乌云众测http:&#x2F;&#x2F;ce.wooyun.org 漏洞盒子https:&#x2F;&#x2F;www.vulbox.com Sobug白帽众测平台http:&#x2F;&#x2F;www.Sobug.com 补天平台https:&#x2F;&#x2F;www.butian.net&#x2F; 同舟共测-企业安全响应联盟https:&#x2F;&#x2F;tz.alipay.com&#x2F; 漏洞银行https:&#x2F;&#x2F;www.bugbank.cn&#x2F; 雷神众测https:&#x2F;&#x2F;www.bountyteam.com&#x2F; 360众测https:&#x2F;&#x2F;zhongce.360.net&#x2F; 火线众测http:&#x2F;&#x2F;www.huoxian.club&#x2F; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#国外Hackone https:&#x2F;&#x2F;www.hackerone.com&#x2F; Google Inc.安全应急响应中心http:&#x2F;&#x2F;cnsrc.org.cn&#x2F; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h2> <div class="note info simple"><p>微信搜索搜索应急响应中心</p></div><p> 百度应急响应中心<br> 腾讯安全应急响应中心<br> 顺丰安全应急响应中心<br> 奇安信安全应急响应中心<br> 哔哩哔哩安全应急响应中心<br> 富途 安全应急响应中心<br> ····· </p>]]></content>
      
      
      <categories>
          
          <category> 网安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言的数据类型</title>
      <link href="/2023/04/19/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2023/04/19/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="char"><a href="#char" class="headerlink" title="char"></a>char</h2><blockquote><p>大小: 1字节<br>范围:<br>unsigned char: 0 ~ 255（2^8-1）<br>char: -128 ~ 127<br><strong>减去1是因为考虑到0</strong></p></blockquote><h2 id="short"><a href="#short" class="headerlink" title="short"></a>short</h2><blockquote><p>大小：2字节<br>范围：<br>unsigned short：0 ~ 65535<br>short：-32768 ~ 32767</p></blockquote><h2 id="int"><a href="#int" class="headerlink" title="int"></a>int</h2><blockquote><p>大小：4字节<br>范围：<br>unsigned int:0 ~ 42亿9千万<br>int: -21亿 ~ 21亿</p></blockquote><h2 id="long"><a href="#long" class="headerlink" title="long"></a>long</h2><blockquote><p>大小：4字节<br>32位 4字节<br>64位 8字节</p></blockquote><h2 id="long-long"><a href="#long-long" class="headerlink" title="long long"></a>long long</h2><blockquote><p>大小：8字节<br>&#x2F;&#x2F;范围：很大（一般用不到）</p></blockquote><h2 id="float"><a href="#float" class="headerlink" title="float"></a>float</h2><blockquote><p>大小：4字节</p></blockquote><h2 id="double"><a href="#double" class="headerlink" title="double"></a>double</h2><blockquote><p>大小：8字节</p></blockquote><h2 id="long-double"><a href="#long-double" class="headerlink" title="long double"></a>long double</h2><blockquote><p>大小：16字节</p></blockquote><hr><p>总结</p><ul><li><strong>表示整数优先考虑int</strong></li><li><strong>表示浮点数优先考虑double</strong></li><li>变量的大小和常用的变量范围应该记住</li><li>再提一句，<strong>变量的大小离不开操作系统的位数</strong>。</li></ul><div class="flink"><div class="flink-name">原文章地址</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://zhuanlan.zhihu.com/p/103815776" title="知乎" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="null" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="知乎" />              </div>              <div class="flink-item-name">知乎</div>               <div class="flink-item-desc" title="变量的大小及范围">变量的大小及范围</div>            </a>          </div></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言字符数组</title>
      <link href="/2023/04/19/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84/"/>
      <url>/2023/04/19/C%E8%AF%AD%E8%A8%80%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="‘-0’就是-字符串结束标志"><a href="#‘-0’就是-字符串结束标志" class="headerlink" title="‘\0’就是 字符串结束标志"></a>‘\0’就是 字符串结束标志</h2><p><code>&#39;\0&#39;</code>是转译字符，意思是告诉编译器，这不是字符0，而是空字符。在C语言中没有专门的字符串变量，通常用一个字符数组来存放一个字符串，并规定以字符<code>&#39;\0&#39;</code>作为字符串的结束标志，<code>&#39;\0&#39;</code>作为标志占用<em>存储空间</em>，但不计入串的<em>实际长度</em></p><blockquote><p>sizeof()显示的是存储空间长度（包含 ‘\0’字符），</p><p>strlen()显示实际长度（不包含 ‘\0’字符）</p></blockquote><h2 id="字符数组的初始化"><a href="#字符数组的初始化" class="headerlink" title="字符数组的初始化"></a>字符数组的初始化</h2><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;逐个字符赋给数组中各元素char a[5] &#x3D; &#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;&#125;;   &#x2F;&#x2F;固定长度char b[] &#x3D; &#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;\0&#39;&#125;;  &#x2F;&#x2F;不固定长度&#x2F;&#x2F;字符串来为字符数组赋初值char c[] &#x3D; &quot;abcde&quot;;  &#x2F;&#x2F;固定长度char d[6]&#x3D;&quot;abcde&quot;;   &#x2F;&#x2F;不固定长度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大体分为两种</p><ul><li>逐个字符赋给数组中各元素<pre class="line-numbers language-none"><code class="language-none">char a[5] &#x3D; &#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;&#125;; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>这种方法定义时，系统会自动从未初始化的元素开始，将之后的元素赋为 <code>&#39;\0&#39;</code></p><pre class="line-numbers language-none"><code class="language-none">char b[] &#x3D; &#123;&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;\0&#39;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这种方法定义时，系统不会自动在字符串的末尾加上字符串结束符</p><blockquote><p>此时用sizeof()函数可以正确求出其所占的内存大小;用strlen()函数不能正确求出其长度，因为strlen是通过’\0’判断字符串结束的</p></blockquote><p>因此需要手动加一个结束标志<code>&#39;\0&#39;</code>，如果不加，就会越界，在输出后面就会有一个小方框</p><ul><li><p>利用字符串来为字符数组赋初值</p><p>当不固定数组长度时</p></li></ul><pre class="line-numbers language-none"><code class="language-none">char c[] &#x3D; &quot;abcde&quot;;或者char c[] &#x3D; &#123;&quot;abcde&quot;&#125;;   #实际中&#123;&#125;可以省略<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这种方法定义时，系统会自动在字符串的末尾加上字符串结束符<code>&#39;\0&#39;</code><br>所以当固定数组长度时</p><pre class="line-numbers language-none"><code class="language-none">char d[6]&#x3D;&quot;abcde&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就需要预留一个位置来存放字符串结束符</p><div class="flink"><div class="flink-name">参考文章</div> <div class="flink-list">          <div class="flink-list-item">            <a href="http://c.biancheng.net/view/333.html" title="C语言中文网" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="null" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="C语言中文网" />              </div>              <div class="flink-item-name">C语言中文网</div>               <div class="flink-item-desc" title="数组的存储，C语言数组的存储实质详解">数组的存储，C语言数组的存储实质详解</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://blog.csdn.net/wuwuku123/article/details/103608918" title="CSND" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="null" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="CSND" />              </div>              <div class="flink-item-name">CSND</div>               <div class="flink-item-desc" title="C中哪些方式定义的字符串，其末尾会自动添加‘\0’">C中哪些方式定义的字符串，其末尾会自动添加‘\0’</div>            </a>          </div></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+github\gitee\coding\云服务器？</title>
      <link href="/2023/04/18/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/04/18/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="本地搭建一个hexo博客"><a href="#本地搭建一个hexo博客" class="headerlink" title="本地搭建一个hexo博客"></a>本地搭建一个hexo博客</h2><a class="btn-beautify " href="https://zhuanlan.zhihu.com/p/552639819"   title="hexo教程"><i class="far fa-hand-point-right"></i><span>hexo教程</span></a><h2 id="应用主题hexo-butterfly"><a href="#应用主题hexo-butterfly" class="headerlink" title="应用主题hexo-butterfly"></a>应用主题hexo-butterfly</h2><a class="btn-beautify blue" href="https://butterfly.js.org"   title="hexo-butterfly"><i class="far fa-hand-point-right"></i><span>hexo-butterfly</span></a><h2 id="托管平台"><a href="#托管平台" class="headerlink" title="托管平台"></a>托管平台</h2><p>选择</p><ul><li><p><a href="">GitHub Pages</a><br>简介：全球最大的开源代码托管平台，现已被微软收购。<br>优缺点：稳定性强，支持Git部署、分支管理，使用方便。&#x2F;半墙状态，访问速度比较一般。<br>服务器速度：美国 GitHub+Fastly节点，200ms左右，速度一般。</p></li><li><p><a href="www.gitee.com">Gitee Pages</a><br>简介：码云，国内版Github，全中文平台。<br>优缺点：稳定性强，国内服务器速度快。自定义域名和自动部署需要收费。免费版需要手动部署且内容审核较严格。要写涉及敏感话题不建议使用，部署可以使用脚本自动部署更新，参考文章[Gitee Pages自动部署](.&#x2F;Gitee Pages自动部署.md)（突然想到如果我有一台服务器来运行脚本为什么不直接把博客部署在云服务器呢？）<br>服务器速度：国内节点，＜50ms，速度快。</p></li><li><p><a href="">Coding Pages</a><br>简介：企业化源码管理平台，已经不开放，没有静态网站部署选项了</p></li><li><p>云服务器</p><p>搞一台云服务器，在服务器建一个git仓库就可以部署到远端，用nginx服务器配置好网站路径，用公网IP就可以访问了，参考文章[Ubuntu 创建Git远程仓库](.&#x2F;Ubuntu 创建Git远程仓库.md)</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> gihub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS学习笔记</title>
      <link href="/2023/04/18/JS%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/04/18/JS%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言指针</title>
      <link href="/2023/04/18/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/"/>
      <url>/2023/04/18/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 创建Git远程仓库</title>
      <link href="/2023/04/18/Ubuntu%20%E5%88%9B%E5%BB%BAGit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
      <url>/2023/04/18/Ubuntu%20%E5%88%9B%E5%BB%BAGit%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1.安装git"></a>1.安装git</h3><p>在Ubuntu上安装git</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-初始化git"><a href="#2-初始化git" class="headerlink" title="2.初始化git"></a>2.初始化git</h3><pre class="line-numbers language-none"><code class="language-none">#告诉git，自己的名字与邮箱git config --global user.name &quot;Your Name&quot;git config --global user.email &quot;email@example.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-创建git用户"><a href="#3-创建git用户" class="headerlink" title="3.创建git用户"></a>3.创建git用户</h3><pre class="line-numbers language-none"><code class="language-none">adduser git     #此后需要输入密码与确认密码,也可以直接使用root用户<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-进入git-用户home，并创建相应的ssh文件，用于客户端免密码登陆时使用"><a href="#4-进入git-用户home，并创建相应的ssh文件，用于客户端免密码登陆时使用" class="headerlink" title="4.进入git 用户home，并创建相应的ssh文件，用于客户端免密码登陆时使用"></a>4.进入git 用户home，并创建相应的ssh文件，用于客户端免密码登陆时使用</h3><pre class="line-numbers language-none"><code class="language-none">#进入用户目录，root用户目录为&#96;&#x2F;root&#96;cd &#x2F;home&#x2F;git&#x2F;#没有就创建.ssh目录，客户端的公钥存在此目录文件中mkdir .ssh#创建&#x2F;打开authorized_keys文件，客户端的公钥存在此文件中cd .sshtouch authorized_keys#赋权，root用户不需要chmod 755 .ssh#更改文件以及其内文件的所属用户以及用户组chown -R git:git .ssh&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-ssh配置"><a href="#5-ssh配置" class="headerlink" title="5.ssh配置"></a>5.ssh配置</h3><p>在客户端（本地）生成私钥与公钥</p><p>打开gitbash或者cmd随便一个命令行窗口</p><pre class="line-numbers language-none"><code class="language-none">#生成名字不同的ssh密钥，#-C 指定自己的邮箱，与git config --global user.email &quot;email@example.com&quot;时候，指定的邮箱要一致ssh-keygen -t rsa -C &#39;xxxxx@youremail.com&#39; -f ~&#x2F;.ssh&#x2F;xxx_id_rsa           cd ~&#x2F;.ssh#进入密钥目录vim conf#修改密钥配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/18/CJjX3VyfOKMvnD8.png" alt="image-20230418211601657"></p><p><img src="https://s2.loli.net/2023/04/18/thFKeYyXqUw1SbM.png" alt="image-20230418211629235"></p><p>本地配置好后，再复制公钥内容，追加到Ubuntu服务器的<code>/home/git/.ssh/authorized_keys</code>文件中，不是git用户的就在当前用户家目录下的.ssh文件夹</p><p><img src="https://s2.loli.net/2023/04/18/FNJqOCQDvXxMHAV.png" alt="img"></p><p>用记事本打开<code>id_rsa.pub</code>文件，并复制到&#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorized_keys目录中</p><p><img src="https://s2.loli.net/2023/04/18/bv4jPtfBHSpkehN.png" alt="img"></p><p>以后再客户端进行克隆、提交等操作，就不会需要密码。</p><h3 id="6-在Ubuntu上创建远程仓库"><a href="#6-在Ubuntu上创建远程仓库" class="headerlink" title="6.在Ubuntu上创建远程仓库"></a>6.在Ubuntu上创建远程仓库</h3><pre class="line-numbers language-none"><code class="language-none">#切换到git用户，防止要修改文件夹的宿主su git cd &#x2F;var&#x2F;repo&#x2F;#创建远程仓库,仓库名字是&#96;ganahBlog.git&#96;git init --bare &#123;自定义仓库名name&#125;.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/18/o3MaKgUuHzy4sOE.webp" alt="img"></p><h3 id="7-Git-钩子（hooks"><a href="#7-Git-钩子（hooks" class="headerlink" title="7.Git 钩子（hooks)"></a>7.Git 钩子（hooks)</h3><p>执行下面的命令，在自动生成的<code>ganahBlog.git/hooks</code> 目录下创建一个新的钩子文件：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">vim <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>repo<span class="token operator">/</span>ganahBlog<span class="token punctuation">.</span>git<span class="token operator">/</span>hooks<span class="token operator">/</span>post<span class="token operator">-</span>receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开文件后，加入下面的代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">git</span> --work-tree<span class="token operator">=</span>/var/www/hexo --git-dir<span class="token operator">=</span>/var/repo/ganahBlog.git checkout <span class="token parameter variable">-f</span><span class="token comment">#git --work-tree就是文件上传位置，--git-dir就是仓库位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/18/ChQp6coSeHi2mBr.webp" alt="img"></p><p>将文件保存（方法参加上文）后，赋予该文件可执行权限：</p><pre class="line-numbers language-none"><code class="language-none">chmod +x &#x2F;var&#x2F;repo&#x2F;ganahBlog.git&#x2F;hooks&#x2F;post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><a class="btn-beautify outline" href="https://zhuanlan.zhihu.com/p/149294652"   title="Git Hooks 配置"><i class="far fa-hand-point-right"></i><span>Git Hooks 配置</span></a><h3 id="8-使用-Git-部署本地-Hexo-到远端服务器"><a href="#8-使用-Git-部署本地-Hexo-到远端服务器" class="headerlink" title="8. 使用 Git 部署本地 Hexo 到远端服务器"></a>8. 使用 Git 部署本地 Hexo 到远端服务器</h3><p>将服务器地址添加到受信任的站点，在本地任意目录从服务器上把hexo_static仓库克隆下来：</p><pre class="line-numbers language-none"><code class="language-none">git clone root@&#123;云服务器IP&#125;:&#x2F;var&#x2F;repo&#x2F;ganahBlog.git    #测试git功能<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注意：如果你在远端服务器创建了 Git 用户并设定为拥有者，请将 root 改成 git （git用户）。<br>编辑站点配置文件<code>_config.yml</code> , 将 url 改成<code>https://&#123;云服务器IP&#125;/</code></li></ul><p><img src="https://s2.loli.net/2023/04/18/QvU9fidlNscRBVY.webp" alt="img"></p><p>将 deploy 目标改为 {服务器用户名}@{服务IP}:&#x2F;var&#x2F;repo&#x2F;ganahBlog.git：</p><p><img src="https://s2.loli.net/2023/04/18/zWX24pLcByJAHVF.png" alt="image-20230418210843985"></p><p>在个人博客站点目录下，打开 Git bash ,使用 hexo clean &amp;&amp; hexo g -d 部署：</p><p><img src="https://s2.loli.net/2023/04/18/CLm5PkfMH9jugQe.webp" alt="img"></p><div class="flink"><div class="flink-name">参考文章</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://blog.csdn.net/zc_ad/article/details/84953039" title="CSDN" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="null" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="CSDN" />              </div>              <div class="flink-item-name">CSDN</div>               <div class="flink-item-desc" title="Ubuntu 创建Git远程仓库">Ubuntu 创建Git远程仓库</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://zhuanlan.zhihu.com/p/120743882" title="知乎" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="null" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="知乎" />              </div>              <div class="flink-item-name">知乎</div>               <div class="flink-item-desc" title="将hexo个人博客部署到个人云服务器">将hexo个人博客部署到个人云服务器</div>            </a>          </div></div></div>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim使用</title>
      <link href="/2023/04/18/vim%E4%BD%BF%E7%94%A8%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
      <url>/2023/04/18/vim%E4%BD%BF%E7%94%A8%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h2 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h2><p><code>esc</code>进入命令行模式</p><p><code>:set nu</code>设置行号</p><p><code>:q</code>退出文件编辑</p><p><code>:wq</code>保存退出</p><p><code>:q!</code>强制退出不报存</p><p>光标移动</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">单个字符移动：h<span class="token operator">:</span>  向左移动l<span class="token operator">:</span>  向右移动j<span class="token operator">:</span>  向下移动k<span class="token operator">:</span>  向上移动xh<span class="token operator">:</span>  向左移动x个字符距离单词移动：w<span class="token operator">:</span>  将光标移动到下一个单词的开头b<span class="token operator">:</span>  将光标移动到前一个单词的开头e<span class="token operator">:</span>  将光标移动到下一个单词的词末E<span class="token operator">:</span>  移动到单词的结尾<span class="token punctuation">(</span>忽略标点符号<span class="token punctuation">)</span>ge<span class="token operator">:</span>  将光标移动到上一个单词的词末<span class="token number">2</span>w<span class="token operator">:</span>  指定移动的次数行移动：$<span class="token operator">:</span>  将光标移动到当前行的行尾<span class="token number">0</span><span class="token operator">:</span>  将光标移动到当前行的行首<span class="token operator">^</span><span class="token operator">:</span>  将光标移动到当前行的第一个非空字符（行首和当前行非空字符不是一个位置）<span class="token number">2</span><span class="token operator">|</span><span class="token operator">:</span>  移到当前行的第<span class="token number">2</span>列fx<span class="token operator">:</span>  将光标移动到当前行的第一个字符x上<span class="token number">3f</span>x<span class="token operator">:</span> 将光标移动到航前行的第<span class="token number">3</span>个字符x上tx<span class="token operator">:</span>   将光标移动到目标字符x的前一个字符上fx和tx可以通过<span class="token punctuation">;</span>和<span class="token punctuation">,</span>进行重复移动，一个是正向重复，一个是反向重复<span class="token operator">%</span><span class="token operator">:</span>  用于符号间的移动，它会在一对<span class="token punctuation">(</span><span class="token punctuation">)</span>、<span class="token punctuation">[</span><span class="token punctuation">]</span>、<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>之间跳跃文本块移动：<span class="token punctuation">(</span>：  移到当前句子的开头<span class="token punctuation">)</span><span class="token operator">:</span>  移到下一个句子的开头<span class="token punctuation">&#123;</span><span class="token operator">:</span>  移到当前一段的开头<span class="token punctuation">&#125;</span><span class="token operator">:</span>  移到下一段的开头<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">:</span>  移到当前这一节的开头<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">:</span>  移到下一节的开头在屏幕中移动xG<span class="token operator">:</span>  跳转到指定的第x行，G移动到文件按末尾，``（<span class="token number">2</span>次单引号<span class="token punctuation">)</span>返回到跳转前的位置gg<span class="token operator">:</span>  移动到文件开头x<span class="token operator">%</span><span class="token operator">:</span>  移动到文件中间，就使用<span class="token number">50</span><span class="token operator">%</span>H<span class="token operator">:</span>  移动到homeM<span class="token operator">:</span>  移动到屏幕中间L<span class="token operator">:</span>  移动到一屏末尾ctrl<span class="token operator">+</span>G<span class="token operator">:</span>  查看当前的位置状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>滚屏与跳转</p><pre class="line-numbers language-none"><code class="language-none">半屏滚动:  ctrl+u&#x2F;ctrl+d全屏滚动:  ctrl+f&#x2F;ctrl+b定位光标的位置zz:  将光标置于屏幕的中间zt:  将光标移动到屏幕的顶部zb:  将光标移动到屏幕的底部设置跳转标记mx,my,mz设置三个位置&#96;x,&#96;y,&#96;z跳转到设置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文本插入操作</p><pre class="line-numbers language-none"><code class="language-none">i:  在当前光标的前面插入字符a:  在当前光标的后面追加字符o:  在当前光标的下一行行首插入字符I:  在一行的开头添加文本A:  在一行的结尾处添加文本O:  在光标当前行的上一行插入文本s:  删除当前光标处的字符并进入到插入模式S:  删除光标所在处的行，并进入到插入模式u:  撤销修改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文本删除操作</p><pre class="line-numbers language-none"><code class="language-none">字符删除x:  删除当前光标所在处的字符X:  删除当前光标左边的字符单词删除dw:  删除一个单词(从光标处到空格)daw:  无论光标在什么位置，删除光标所在的整个单词(包括空白字符)diw:  删除整个单词文本，但是保留空格字符不删除d2w:  删除从当前光标开始处的2个单词d$:  删除从光标到一行末尾的整个文本d0:  删除从光标到一行开头的所有单词dl:  删除当前光标处的字符&#x3D;xdh:  删除当前光标左边的字符&#x3D;X行删除dd:  删除当前光标处的一整行&#x3D;D5dd:  删除从光标开始处的5行代码dgg:  删除从光标到文本开头dG:  删除从光标到文本结尾行合并J:  删除一个分行符，将当前行与下一行合并<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文本复制、剪切与粘贴</p><pre class="line-numbers language-none"><code class="language-none">y:  复制，p:粘贴yw:  复制一个单词y2w:  复制2个单词y$:  复制从当前光标到行结尾的所有单词y0:  复制从当前光标到行首的所有单词yy:  复制一整行2yy:  复制从当前光标所在行开始的2行复制文本块    1.首先进入visual模式：v    2.移动光标选择文本    3.复制与粘贴的操作文本的修改与替换cw:  删除从光标处到单词结尾的文本并进入到插入模式cb:  删除从光标处到单词开头的文本并进入到插入模式cc:  删除一整行并进入到插入模式~： 修改光标下字符的大小写r:  替换当前光标下的字符R:  进入到替换模式xp:  交换光标和下一个字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文本的查找与替换</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;string   正向查找?string   反向查找设置高亮显示    :set hls    *按键将当前光标处的单词高亮显示，使用n浏览下一个查找高亮的结果:s&#x2F;old&#x2F;new   将当前行的第一个字符串old替换为new:s&#x2F;old&#x2F;new&#x2F;g   将当前行的所有字符串old替换为new:90s&#x2F;old&#x2F;new&#x2F;g  将指定行的所有字符串old替换为new:90,93s&#x2F;old&#x2F;new&#x2F;g  将指定范围的行的所有字符串old替换为new:%s&#x2F;old&#x2F;new&#x2F;g   将文本中所有的字符串old替换为new:%s&#x2F;old&#x2F;new&#x2F;gc  依次替换每个字符串关键字:%s&#x2F;^struct&#x2F;int&#x2F;g   将所有以struct开头的字符串替换为int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>撤销修改、重做与保存</p><pre class="line-numbers language-none"><code class="language-none">u:  撤销上一步的操作。Ctrl+r:  将原来的插销重做一遍:U  恢复一整行原来的面貌（文件打开时的文本状态）:q  若文件没有修改，直接退出:q!  文件已经被修改，放弃修改退出:wq  文件已经被修改，保存修改并退出:e!  放弃修改，重新回到文件打开时的状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编辑多个文件</p><pre class="line-numbers language-none"><code class="language-none">文件和缓冲区的区别文件是保存在磁盘上的，而打开的文件的文件是在内存中，在内存中有一个缓冲区，用来存放打开的文件。vim每次打开文件时都会创建一个缓冲区，vim支持打开多个文件:buffers   查看缓冲区列表&#x3D;&#x3D;ls:buffer N  根据缓冲区列表的编号跳转到指定缓冲区:bnext&#x2F;bprev  遍历缓冲区列表:bfirst&#x2F;blast  分别调到缓冲区列表的开头和结尾:write   将缓冲区的修改保存到磁盘上:edit! e!  放弃缓冲区的修改，恢复到文件打开时的状态:edit file  编辑另一个文件:wnext   保存当前缓冲区的修改并跳转到缓冲区列表中的下一个文件:set autowrite<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>标签页与折叠栏</p><pre class="line-numbers language-none"><code class="language-none">标签页的新建：tabedit file&#x2F;tab split标签页的切换: tabn&#x2F;tabp按键：gt&#x2F;gT标签页的关闭    tabclose 关闭当前的标签页: tabonly创建一个折叠    zf200G:将光标和200行之间的代码折叠起来折叠的打开与关闭    za:  打开和关闭折叠    zr&#x2F;zm: 一层一层地打开和关闭折叠    zR&#x2F;zM: 分别打开和关闭所有的折叠折叠键的光标移动    zj: 跳转到下一个折叠处    zk: 跳转到上一个折叠处删除折叠    zd: 删除光标下的折叠    zD: 删除光标下的折叠以及嵌套的折叠    zE: 删除所有的折叠标签    创建的折叠当退出vim之后就失效了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多窗口操作</p><pre class="line-numbers language-none"><code class="language-none">分割窗口    split&#x2F;vsplit filename窗口间跳转    ctrl+w hjkl    ctrl+w w移动窗口    ctrl+w HJKL调整窗口尺寸    ctrl+w +&#x2F;-  调整窗口的高度    ctrl+w &lt;&#x2F;&gt;  调整窗口的宽度    ctrl+w &#x3D; 所有的窗口设置相同的尺寸    :resize n将当前窗口尺寸调整为N行关闭窗口    close: 关闭一个窗口    qall: 退出所有窗口    qall!: 放弃修改，退出所有窗口    wqall: 保存并退出所有窗口    wall: 保存所有窗口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h2><p><code>a</code>或<code>i</code>进入</p><p><code>dd</code>删除一行</p><p><code>yy</code>复制一行</p><p><code>p</code>粘贴</p><h2 id="可视化模式"><a href="#可视化模式" class="headerlink" title="可视化模式"></a>可视化模式</h2><p><code>v</code>进入可视模式</p><p><code>V</code>进入行选择可视模式</p><p><code>Ctrl+v</code> 进入列选择可视模式</p>]]></content>
      
      
      <categories>
          
          <category> Linux学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据类型辨析</title>
      <link href="/2023/04/18/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BE%A8%E6%9E%90/"/>
      <url>/2023/04/18/python%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BE%A8%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center"></th><th align="center">列表</th><th align="center">元组</th><th align="center">集合</th><th align="center">字典</th></tr></thead><tbody><tr><td align="center">英文</td><td align="center">list</td><td align="center">tuple</td><td align="center">set</td><td align="center">dict</td></tr><tr><td align="center">可否读写</td><td align="center">读写</td><td align="center">只读</td><td align="center">读写</td><td align="center">读写</td></tr><tr><td align="center">可否重复</td><td align="center">是</td><td align="center">是</td><td align="center">否</td><td align="center">是</td></tr><tr><td align="center">存储方式</td><td align="center">值</td><td align="center">值</td><td align="center">键(不能重复)</td><td align="center">键值对(键不能重复)</td></tr><tr><td align="center">是否有序</td><td align="center">有序</td><td align="center">有序</td><td align="center">无序</td><td align="center">无序</td></tr></tbody></table><h2 id="列表（list）"><a href="#列表（list）" class="headerlink" title="列表（list）"></a>列表（list）</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> python <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span><span class="token string">'tuple'</span><span class="token punctuation">,</span><span class="token string">'set'</span><span class="token punctuation">]</span>     <span class="token comment">#新建一个列表</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token comment">#查看列表元素</span><span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'set'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a>增加元素</h3><ul><li><p><code>append</code></p><p>使用方法</p><p>list.append(obj)，obj是一个任意对象</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'dict'</span><span class="token punctuation">)</span><span class="token comment">#在末尾添加元素</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'set'</span><span class="token punctuation">,</span> <span class="token string">'dict'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment">#可以存储数字和字符串</span><span class="token operator">>></span><span class="token operator">></span> python  <span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'set'</span><span class="token punctuation">,</span> <span class="token string">'dict'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span>    <span class="token comment">#插入一个列表，作为一个元素插入</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'列表'</span><span class="token punctuation">,</span><span class="token string">'元组'</span><span class="token punctuation">,</span><span class="token string">'集合'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'set'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'列表'</span><span class="token punctuation">,</span> <span class="token string">'元组'</span><span class="token punctuation">,</span> <span class="token string">'集合'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code> extend</code></p><p>list.extend(seq)，seq是一个可迭代对象（列表，元组，字符串等）</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">  <span class="token comment">#插入一个列表，可以迭代插入</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'列表'</span><span class="token punctuation">,</span><span class="token string">'元组'</span><span class="token punctuation">,</span><span class="token string">'集合'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'set'</span><span class="token punctuation">,</span> <span class="token string">'列表'</span><span class="token punctuation">,</span> <span class="token string">'元组'</span><span class="token punctuation">,</span> <span class="token string">'集合'</span><span class="token punctuation">]</span>    <span class="token comment">#插入一个字符串，会一个一个字符插入</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'set'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'set'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">,</span> <span class="token string">'t'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code> insert</code><br>  list.insert(index, obj)，index是对象obj需要插入的索引位置，obj是要插入列表中的对象<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'tuple'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><ul><li><p><code> del</code></p><p>del list[i]，i是列表元素的索引，删除元素</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'set'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'列表'</span><span class="token punctuation">,</span> <span class="token string">'元组'</span><span class="token punctuation">,</span> <span class="token string">'集合'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">del</span> python<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'set'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code> pop</code></p><p>list.pop(i)，i是列表元素的索引，弹出指定位置元素，没有指定则是最后一个元素</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'set'</span><span class="token punctuation">,</span> <span class="token string">'列表'</span><span class="token punctuation">,</span> <span class="token string">'元组'</span><span class="token punctuation">,</span> <span class="token string">'集合'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token string">'列表'</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'set'</span><span class="token punctuation">,</span> <span class="token string">'元组'</span><span class="token punctuation">,</span> <span class="token string">'集合'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code> remove</code></p><p>list.remove(value)，value是指定元素值</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'set'</span><span class="token punctuation">,</span> <span class="token string">'元组'</span><span class="token punctuation">,</span> <span class="token string">'集合'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'元组'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'set'</span><span class="token punctuation">,</span> <span class="token string">'集合'</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  当列表有重复元素，默认移除第一个</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'set'</span><span class="token punctuation">,</span> <span class="token string">'list'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'set'</span><span class="token punctuation">,</span> <span class="token string">'list'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>切片</code></p><p>object[start_index : end_index : step]</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'列表'</span><span class="token punctuation">,</span> <span class="token string">'元组'</span><span class="token punctuation">,</span> <span class="token string">'集合'</span><span class="token punctuation">]</span><span class="token comment">#删除‘列表’，[:2]从头到第2个，[3:]从第3个到结尾</span><span class="token operator">>></span><span class="token operator">></span> python <span class="token operator">=</span> python<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>python<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'元组'</span><span class="token punctuation">,</span> <span class="token string">'集合'</span><span class="token punctuation">]</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <a class="btn-beautify blue" href="https://blog.csdn.net/qq_30460949/article/details/118888961"   title="切片操作"><i class="fa fa-arrow-circle-right"></i><span>切片操作</span></a><h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><ul><li><code> list[i] = value</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> python <span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span><span class="token string">'tuple'</span><span class="token punctuation">,</span><span class="token string">'set'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token string">'列表'</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'列表'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询元素"><a href="#查询元素" class="headerlink" title="查询元素"></a>查询元素</h3><ul><li><code> print(list[i])</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'列表'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>python<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h2><p>元组跟列表非常相似，用（）来表示，但是元组是<code>不可变</code>的，<code>不能修改</code>元组，元组<code>可以迭代</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> python <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">,</span><span class="token string">'tuple'</span><span class="token punctuation">,</span><span class="token string">'dict'</span><span class="token punctuation">)</span>  <span class="token comment">#新建元组，并初始化</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token comment">#查询全部</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'dict'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#查询指定元素</span><span class="token string">'tuple'</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'dict'</span><span class="token punctuation">)</span><span class="token comment">#查询元素出现次数</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token comment">#查询元素的序号</span><span class="token number">0</span><span class="token comment">#如果有两个相同元素，默认输出第一个的元素的序号</span><span class="token operator">>></span><span class="token operator">></span> python <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">,</span><span class="token string">'tuple'</span><span class="token punctuation">,</span><span class="token string">'dict'</span><span class="token punctuation">,</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> python <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">)</span>    <span class="token comment">#字符串作为迭代元素初始化元组</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token string">'list'</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'l'</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token string">'i'</span><span class="token operator">>></span><span class="token operator">></span> python <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>     <span class="token comment">#创建只有一个元素的元组</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token string">'list'</span><span class="token operator">>></span><span class="token operator">></span> t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span><span class="token string">'tuple'</span><span class="token punctuation">,</span><span class="token string">'set'</span><span class="token punctuation">]</span>   <span class="token comment">#列表迭代初始化</span><span class="token operator">>></span><span class="token operator">></span> python <span class="token operator">=</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'set'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典(dict)"></a>字典(dict)</h2><ul><li>字典是通过<code>键值对</code>的方式就数据存储下来，键必须是<code>唯一</code>的</li><li>键值对在字典中以这样的方式标记：d &#x3D; {key1 : value1, key2 : value2 }</li><li>注意它们的键&#x2F;值对用冒号分割，而各个对用逗号分割，所有这些都包括在花括号中</li><li>另外，记住字典中的键&#x2F;值对是<code>没有顺序</code>的<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#字典的操作，添加，删除，打印</span><span class="token operator">>></span><span class="token operator">></span> python <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'list'</span><span class="token punctuation">:</span><span class="token string">'列表'</span><span class="token punctuation">,</span><span class="token string">'tuple'</span><span class="token punctuation">:</span><span class="token string">'元组'</span><span class="token punctuation">,</span><span class="token string">'dict'</span><span class="token punctuation">:</span><span class="token string">'字典'</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span><span class="token string">'列表'</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#查看值</span>dict_values<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'列表'</span><span class="token punctuation">,</span> <span class="token string">'元组'</span><span class="token punctuation">,</span> <span class="token string">'字典'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#查看键</span>dict_keys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'dict'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment">#查看键值对</span>dict_items<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'列表'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'元组'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'dict'</span><span class="token punctuation">,</span> <span class="token string">'字典'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="集合-set"><a href="#集合-set" class="headerlink" title="集合(set)"></a>集合(set)</h2><p>与字典类似，但只包含键，而没有对应的值，<code>迭代初始化</code>，包含的数据<code>不重复</code><br>s &#x3D; set(list or tuple or string)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#以list数据对集合初始化</span><span class="token operator">>></span><span class="token operator">></span> t <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">,</span><span class="token string">'tuple'</span><span class="token punctuation">,</span><span class="token string">'dict'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> python <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> python<span class="token punctuation">&#123;</span><span class="token string">'list'</span><span class="token punctuation">,</span> <span class="token string">'tuple'</span><span class="token punctuation">,</span> <span class="token string">'dict'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="flink"><div class="flink-name">参考文章</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://blog.csdn.net/qq_42554007/article/details/90489570" title="CSDN" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="null" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="CSDN" />              </div>              <div class="flink-item-name">CSDN</div>               <div class="flink-item-desc" title="python的列表，字典，元组，集合的区别和各自使用方法">python的列表，字典，元组，集合的区别和各自使用方法</div>            </a>          </div></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全概述</title>
      <link href="/2023/04/12/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/04/12/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>网络安全</strong> 全称：<strong>网络空间安全</strong></p><p><strong>信息系统安全原则</strong></p><ul><li><p>保密性</p></li><li><p>完整性（不被篡改、丢失）</p></li><li><p>可用性（保证系统持续运行）</p></li><li><p>抗抵赖性</p></li><li><p>可控性（权限分配）</p></li></ul><p><img src="https://s2.loli.net/2023/04/12/dGJjrylHNtEA97p.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hacker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TS学习笔记</title>
      <link href="/2023/04/12/TS%E5%85%A5%E9%97%A8/"/>
      <url>/2023/04/12/TS%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><h4 id="TypeScript是什么？"><a href="#TypeScript是什么？" class="headerlink" title="TypeScript是什么？"></a>TypeScript是什么？</h4><p><strong>TS</strong> :Type Script，是一种对JS改进的语言</p><ul><li><p>以JavaScript为基础构建的语言</p></li><li><p>一个JavaScript 的超集</p></li><li><p>可以在任何支持JavaScript的平台执行</p><p><img src="https://s2.loli.net/2023/04/12/HafAdgi6EQcSCz8.png" alt="image-20230412115906445"></p></li></ul><h4 id="相较JS改进点？"><a href="#相较JS改进点？" class="headerlink" title="相较JS改进点？"></a>相较JS改进点？</h4><ul><li><p>类型</p></li><li><p>支持ES的新特性</p></li><li><p>添加ES不具备的新特性</p></li><li><p>丰富的配置选项</p></li><li><p>兼容性好</p></li><li><p>强大的开发工具</p></li></ul><h3 id="二、使用指南"><a href="#二、使用指南" class="headerlink" title="二、使用指南"></a>二、使用指南</h3><h4 id="1-TS开发环境搭建"><a href="#1-TS开发环境搭建" class="headerlink" title="1.TS开发环境搭建"></a>1.TS开发环境搭建</h4><blockquote><p>TS需要编译成JS运行，解析器是基于Node.js开发的，所以需要先安装Node.js</p></blockquote><p><code>下载、安装Node.js</code></p><a class="btn-beautify green" href="https://nodejs.org"   title=""><i class="fa fa-download"></i></a><p>下载LTS长期支持版</p><pre class="line-numbers language-none"><code class="language-none">node -v  #检查是否安装成功<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://s2.loli.net/2023/04/12/R2Pm3OVeMtXQYNF.png" alt="image-20230412124058733" style="zoom: 150%;" /><p><code>使用npm包管理工具安装TS</code></p><pre class="line-numbers language-none"><code class="language-none">#进入命令行#输入以下命令npm i -g typescripttsc #查看ts的编译器信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>创建TS文件</code></p><blockquote><p>文件名后缀.ts  文件名尽量不要数字开头</p></blockquote><p>编译ts文件</p><pre class="line-numbers language-none"><code class="language-none">tsc helloxxx.ts  #执行此命令编译helloxxx.ts，在当前目录生成对应js文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-语法"><a href="#2-语法" class="headerlink" title="2.语法"></a>2.语法</h4>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全常用术语</title>
      <link href="/2023/04/11/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%B8%B8%E7%94%A8%E6%9C%AF%E8%AF%AD/"/>
      <url>/2023/04/11/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%B8%B8%E7%94%A8%E6%9C%AF%E8%AF%AD/</url>
      
        <content type="html"><![CDATA[<h3 id="漏洞-vulnerability"><a href="#漏洞-vulnerability" class="headerlink" title="漏洞       vulnerability"></a>漏洞       vulnerability</h3><p> 漏洞指的是硬件、软件协议等存在的 安全 缺陷（非功能性缺陷）</p><h3 id="POC-Proof-of-Conecpt"><a href="#POC-Proof-of-Conecpt" class="headerlink" title="POC        Proof of Conecpt"></a>POC        Proof of Conecpt</h3><p> 能证明漏洞存在的代码</p><h3 id="漏扫"><a href="#漏扫" class="headerlink" title="漏扫"></a>漏扫</h3><p> 基于数据库对漏洞进行自动化扫描</p><h3 id="拿站"><a href="#拿站" class="headerlink" title="拿站"></a>拿站</h3><p> 得到一个网站的最高权限</p><h3 id="拖库（脱裤）"><a href="#拖库（脱裤）" class="headerlink" title="拖库（脱裤）"></a>拖库（脱裤）</h3><p> 网站被入侵，黑客窃取全部数据</p><h3 id="裤子"><a href="#裤子" class="headerlink" title="裤子"></a>裤子</h3><p>即得到的信息数据</p><h3 id="撞库"><a href="#撞库" class="headerlink" title="撞库"></a>撞库</h3><p> 已获得用户数据去批量尝试其他网站</p><h3 id="旁站入侵"><a href="#旁站入侵" class="headerlink" title="旁站入侵"></a>旁站入侵</h3><p> 同一台服务器多个网站，入侵同服务器的其他网站</p><h3 id="横向移动-（内网渗透）"><a href="#横向移动-（内网渗透）" class="headerlink" title="横向移动 （内网渗透）"></a>横向移动 （内网渗透）</h3><p> 攻击者入侵一台服务器成功以后，基于内部网络，继续入侵网段内的其他机器</p><h3 id="代理-proxy"><a href="#代理-proxy" class="headerlink" title="代理         proxy"></a>代理         proxy</h3><p> 帮我们发起网络请求的一台服务器</p><h3 id="补丁-patch"><a href="#补丁-patch" class="headerlink" title="补丁         patch"></a>补丁         patch</h3><p> 漏洞的修复程序</p><h3 id="渗透-penetration"><a href="#渗透-penetration" class="headerlink" title="渗透         penetration"></a>渗透         penetration</h3><ul><li><p>黑客入侵网站或计算机系统，获取到控制计算机权限的过程</p></li><li><p>渗透本身非法，授权的渗透测试合法</p></li></ul><h3 id="渗透测试-penetration-test"><a href="#渗透测试-penetration-test" class="headerlink" title="渗透测试         penetration test"></a>渗透测试         penetration test</h3><h3 id="木马-Trojan-horse"><a href="#木马-Trojan-horse" class="headerlink" title="木马         Trojan horse"></a>木马         Trojan horse</h3><p> 隐藏在计算机中的恶意程序，需要信号接应</p><h3 id="病毒-Virus"><a href="#病毒-Virus" class="headerlink" title="病毒        Virus"></a>病毒        Virus</h3><p> 恶意代码或程序（自动复制执行）</p><h3 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h3><p> 获取命令执行环境的操作</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p> 权限提升 Privilege Escalation</p><h3 id="VPN-Virtual-Private-Network"><a href="#VPN-Virtual-Private-Network" class="headerlink" title="VPN       Virtual Private Network"></a>VPN       Virtual Private Network</h3><ul><li><p>代理    </p></li><li><p>加密通信</p></li></ul><h3 id="蜜罐-Honeypot"><a href="#蜜罐-Honeypot" class="headerlink" title="蜜罐        Honeypot"></a>蜜罐        Honeypot</h3><p> 吸引攻击者攻击的伪装系统，用来实现溯源和反制</p><p> hfish</p><h3 id="沙箱-Sandbox"><a href="#沙箱-Sandbox" class="headerlink" title="沙箱       Sandbox"></a>沙箱       Sandbox</h3><p> 沙箱是一种按照安全策略限制程序的执行环境，就算有恶意代码，也只能影响沙箱环境不会影响到操作系统</p><p> <a href="s.threadbook.cn">微步云沙箱</a></p><h3 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h3><ul><li><p>模拟有漏洞的环境</p></li><li><p>可以是网站、容器、操作系统</p></li></ul><p><img src="https://s2.loli.net/2023/04/19/S5EGPmqUx3eHbV6.png" alt="image-20230414110450975"></p><p><a href="vulnhub.com">操作系统靶场镜像下载</a></p><h3 id="堡垒机"><a href="#堡垒机" class="headerlink" title="堡垒机"></a>堡垒机</h3><ul><li><p>运维中的跳板机   jumpserver</p></li><li><p>运维审计系统——资源、审批、审计、控制访问、事件记录</p></li></ul><h3 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h3><ul><li><p>Web应用防火墙——Web Application Firewall</p></li><li><p>对HTTP&#x2F;HTTPS的流量内容进行分析，拦截恶意攻击行为</p></li><li><p>硬件WAF、云WAF、软件型WAF</p></li></ul><h3 id="钓鱼网站"><a href="#钓鱼网站" class="headerlink" title="钓鱼网站"></a>钓鱼网站</h3><p> 冒充的网站，用来窃取用户的账号密码</p><h3 id="后门-backdoor"><a href="#后门-backdoor" class="headerlink" title="后门        backdoor"></a>后门        backdoor</h3><h3 id="CVE"><a href="#CVE" class="headerlink" title="CVE"></a>CVE</h3><p>Common Vulnerabilities and Exposures 通用漏洞披露</p><h3 id="CNVD"><a href="#CNVD" class="headerlink" title="CNVD"></a>CNVD</h3><p>国家信息安全漏洞共享平台 <a href="https://www.cnvd.org.cn/">https://www.cnvd.org.cn/</a></p><p>国家计算机应急响应中心 CNCERT维护 <a href="https://www.cert.org.cn/publish/main/index.html">https://www.cert.org.cn/publish/main/index.html</a></p><h3 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h3><p>一个公司为了应对各种安全事件所做的准备和事<br>后采取的措施</p><h3 id="SRC"><a href="#SRC" class="headerlink" title="SRC"></a>SRC</h3><p>Security Response Center    企业的应急响应中心<br><a href="http://0xsafe.org/">http://0xsafe.org/</a></p><h3 id="公益SRC"><a href="#公益SRC" class="headerlink" title="公益SRC"></a>公益SRC</h3><p><a href="https://www.vulbox.com/">https://www.vulbox.com/</a></p><p><a href="https://src.sjtu.edu.cn/">https://src.sjtu.edu.cn/</a></p><h3 id="网络空间测绘"><a href="#网络空间测绘" class="headerlink" title="网络空间测绘"></a>网络空间测绘</h3><ul><li><p>网络空间资源收录</p></li><li><p>网络空间搜索引擎</p><blockquote><p><a href="http://www.shodan.io/">www.shodan.io</a></p></blockquote></li></ul><blockquote><p><a href="https://fofa.info/">https://fofa.info/</a></p><p><a href="http://www.zoomeye.org/">www.zoomeye.org</a></p></blockquote><h3 id="ATT-amp-CK"><a href="#ATT-amp-CK" class="headerlink" title="ATT&amp;CK"></a>ATT&amp;CK</h3><ul><li><p>Adversarial Tactics, Techniques, and Common Knowledge  对抗战术、技术和通用知识   （攻击者技战术的知识库）</p></li><li><p>Mitre</p></li><li><p>风险分析模型 收集威胁情报，模拟APT攻击</p></li></ul><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><ul><li>Reverse</li><li>把程序还原为源代码，分析程序的运行过程</li></ul><h3 id="CICD"><a href="#CICD" class="headerlink" title="CICD"></a>CICD</h3><p><img src="https://s2.loli.net/2023/04/24/dHhwNxqlF9ryRum.png" alt="image-20230424120246539"></p><h3 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h3><ul><li><p>Development +Operations</p></li><li><p>开发测试运维一体化</p></li></ul><h3 id="DevSecOps"><a href="#DevSecOps" class="headerlink" title="DevSecOps"></a>DevSecOps</h3><p>Development + Security + Operations     安全开发与运维</p><h3 id="APT"><a href="#APT" class="headerlink" title="APT"></a>APT</h3><ul><li><p>Advanced Persistent Thread</p></li><li><p>APT 攻击高级     可持续威胁攻击，指对特定对象展开的持续有效的攻击活动</p></li></ul><h3 id="等保"><a href="#等保" class="headerlink" title="等保"></a>等保</h3><ul><li><p>网络安全等级保护</p></li><li><p>要求相关行业的单位和公司的信息系统必须进行定级，然后在公安机关<br>备案。然后建设整改，然后由测评机构评级，并且持续维护和监督</p></li></ul><h3 id="护网-（HVV）"><a href="#护网-（HVV）" class="headerlink" title="护网 （HVV）"></a>护网 （HVV）</h3><ul><li><p>国家组织牵头组织事业单位，国企单位，名企单位等1开展攻防两方的网络安全演习</p></li><li><p>攻-红     防-蓝</p></li></ul><h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul><li>Capture The  Flag     夺旗赛</li><li>在线CTF</li></ul><blockquote><p>bugku <a href="https://ctf.bugku.com/challenges/index">https://ctf.bugku.com/challenges/index</a></p><p>北京联合大学  <a href="https://buuoj.cn/challenges">https://buuoj.cn/challenges</a></p><p>CTFHub  <a href="https://www.ctfhub.com/">https://www.ctfhub.com/</a></p><p>bmzCTF  <a href="http://bmzclub.cn/challenges">http://bmzclub.cn/challenges</a></p><p>攻防世界  <a href="https://adworld.xctf.org.cn/">https://adworld.xctf.org.cn</a></p><p>CTFSHOW  <a href="https://ctf.show/challenges">https://ctf.show/challenges</a></p></blockquote><p><img src="C:\Users\23065\AppData\Roaming\Typora\typora-user-images\image-20230421105053629.png" alt="image-20230421105053629"></p><h3 id="跳板机"><a href="#跳板机" class="headerlink" title="跳板机"></a>跳板机</h3><p> 防止被追溯和识别身份，利用获取的肉鸡的来攻击其他目标</p><h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><p><img src="https://s2.loli.net/2023/04/12/BqoM4KlLrTHNmhd.png" alt="image_3.png"></p><h3 id="中间人攻击-Man-inMiddle"><a href="#中间人攻击-Man-inMiddle" class="headerlink" title="中间人攻击        Man-inMiddle"></a>中间人攻击        Man-inMiddle</h3><p><img src="https://s2.loli.net/2023/04/12/WhxfjUuzlCAbIFG.png" alt="image_2.png"></p><h3 id="0day"><a href="#0day" class="headerlink" title="0day"></a>0day</h3><ul><li><p>使用量非常大的通用产品的漏洞，有影响力</p></li><li><p>少数人发现还没有公开</p></li></ul><h3 id="攻击载荷-payload"><a href="#攻击载荷-payload" class="headerlink" title="攻击载荷       payload"></a>攻击载荷       payload</h3><p> 攻击的输入信息</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><ul><li><p>Exploit 利用</p></li><li><p>执行了这一段利用代码之后，就能达到攻击的目的</p></li></ul><h3 id="0day、1day、Nday"><a href="#0day、1day、Nday" class="headerlink" title="0day、1day、Nday"></a>0day、1day、Nday</h3><p><img src="https://s2.loli.net/2023/04/12/oXmUzR7kIveNF9W.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 术语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitee Pages自动部署</title>
      <link href="/2023/04/10/Gitee%20Pages%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2023/04/10/Gitee%20Pages%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>原因：gitee pages页面不会自动更新，手动登录更新太过繁琐<br>解决办法：定时运行python脚本模拟浏览器登录gitee更新部署<br>具体办法：可以在本地制定定时任务或者云服务器设置定时任务<br>本文主要是在Ubuntu20.04.1 LTS阿里云轻量应用服务器上进行</p></blockquote><h3 id="安装python以及下载对应的运行库"><a href="#安装python以及下载对应的运行库" class="headerlink" title="安装python以及下载对应的运行库"></a>安装python以及下载对应的运行库</h3><p><code>1.检查系统是否安装了python</code></p><pre class="line-numbers language-none"><code class="language-none">#在终端输入命令行python  或  python3 (都尝试一下)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>没有安装则会提示找不到命令<code>Command &#39;python&#39; not found</code><br>则进行下一步<br><code>2.安装依赖库</code></p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install build-essential checkinstallsudo apt-get install libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>3.创建文件夹</code></p><pre class="line-numbers language-none"><code class="language-none">mkdir -p &#x2F;etc&#x2F;python3.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>4.进入文件夹</code></p><pre class="line-numbers language-none"><code class="language-none">cd &#x2F;etc&#x2F;python3.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>5.下载安装包</code></p><pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.6.6&#x2F;Python-3.6.6.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>6.解压文件</code></p><pre class="line-numbers language-none"><code class="language-none">sudo tar xzvf Python-3.6.6.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>7.编译python源</code></p><pre class="line-numbers language-none"><code class="language-none">cd Python-3.6.6sudo .&#x2F;configure --enable-optimizations --prefix&#x3D;&#x2F;etc&#x2F;python3.6sudo make altinstall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>8.建立python3.6的软链接</code></p><pre class="line-numbers language-none"><code class="language-none">ln -s &#x2F;etc&#x2F;python3.6&#x2F;bin&#x2F;python3.6 &#x2F;usr&#x2F;bin&#x2F;python3.6ln -s &#x2F;etc&#x2F;python3.6&#x2F;bin&#x2F;pip3.6 &#x2F;usr&#x2F;bin&#x2F;pip3.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>9.将/etc/python3.6/bin加入PATH</code></p><pre class="line-numbers language-none"><code class="language-none">vim ~&#x2F;.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>复制以下代码,进入指定文件后，键盘按下 <strong>i</strong> 进入 <strong>insert</strong> 模式，添加如下内容，然后键盘按下<strong>ESC</strong> ,再输入 <strong>:wq</strong>,回车</p><p><code>10.激活配置</code></p><pre class="line-numbers language-none"><code class="language-none">source ~&#x2F;.bash_profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>11.检查安装</code></p><ul><li><p>查看python版本</p><pre class="line-numbers language-none"><code class="language-none">python3.6     # 输入pyhton3.6后回车即可<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>安装好后显示</p><p><img src="https://s2.loli.net/2023/04/10/rA7bXOaIqj3R1QG.png" alt="image-20230410142151400"></p><ul><li><p>检查pip3是否存在</p><pre class="line-numbers language-none"><code class="language-none">pip3 -V   # V是大写的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要是没有安装pip3</p><pre class="line-numbers language-none"><code class="language-none">sudo apt install python3-pip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><code>12.使用pip3安装selenium库</code></p><pre class="line-numbers language-none"><code class="language-none">pip3 install selenium<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装chrome浏览器"><a href="#安装chrome浏览器" class="headerlink" title="安装chrome浏览器"></a>安装chrome浏览器</h3><p><code>1.下载安装包</code></p><pre class="line-numbers language-none"><code class="language-none">wget https:&#x2F;&#x2F;dl.google.com&#x2F;linux&#x2F;direct&#x2F;google-chrome-stable_current_amd64.deb  #可能有点慢<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>2.安装chrome</code></p><pre class="line-numbers language-none"><code class="language-none">sudo apt install .&#x2F;google-chrome-stable_current_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>3.查看是否安装成功</code></p><pre class="line-numbers language-none"><code class="language-none">google-chrome --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="下载对应版本的chromedriver浏览器驱动"><a href="#下载对应版本的chromedriver浏览器驱动" class="headerlink" title="下载对应版本的chromedriver浏览器驱动"></a>下载对应版本的chromedriver浏览器驱动</h3><a class="btn-beautify outline" href="http://chromedriver.storage.googleapis.com/index.html"   title="chromedriver下载地址"><i class="far fa-hand-point-right"></i><span>chromedriver下载地址</span></a><p>根据chrome浏览器版本下载对应的chromedriver版本（没有一样的，就用chromedriver版本低于chrome版本）</p><p><img src="https://s2.loli.net/2023/04/10/5QrdTm4DIgHjRc9.png" alt="image-20230410144234775"></p><p><img src="https://s2.loli.net/2023/04/10/R5BQJiEXnZloebd.png" alt="image-20230410152343351"></p><p><code>1.下载完本地解压或者云端解压</code></p><p><code>2.把解压出来的chromedriver放到/usr/local/share目录下</code></p><p><code>3.建立两条软链接</code></p><blockquote><p>软链接类似于快捷方式，旨在不移动文件本地还可以使用</p></blockquote><pre class="line-numbers language-none"><code class="language-none">sudo ln -s &#x2F;usr&#x2F;local&#x2F;share&#x2F;chromedriver &#x2F;usr&#x2F;local&#x2F;bin&#x2F;   #在&#x2F;usr&#x2F;local&#x2F;bin&#x2F;目录下建立chromedriver的软链接sudo ln -s &#x2F;usr&#x2F;local&#x2F;share&#x2F;chromedriver &#x2F;usr&#x2F;bin&#x2F;# &#x2F;usr&#x2F;bin&#x2F;目录下建立chromedriver的软链接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>4.赋予可执行权限</code></p><pre class="line-numbers language-none"><code class="language-none">sudo chmod +x  &#x2F;usr&#x2F;local&#x2F;share&#x2F;chromedriver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="编写自动部署python脚本及本地调试"><a href="#编写自动部署python脚本及本地调试" class="headerlink" title="编写自动部署python脚本及本地调试"></a>编写自动部署python脚本及本地调试</h3><div class="note success modern"><p>我是在本地把代码调试好才上传到云服务器，本地是windows，运行同样需要python环境、谷歌浏览器、chromedriver</p></div><pre class="line-numbers language-none"><code class="language-none">import timefrom selenium import webdriverfrom selenium.webdriver.common.alert import Alert#定义选项（开启无头模式）options &#x3D; webdriver.ChromeOptions()options.add_argument(&#39;--headless&#39;)options.add_argument(&#39;--no-sandbox&#39;)options.add_argument(&#39;--disable-gpu&#39;)options.add_argument(&#39;--disable-dev-shm-usage&#39;)# 打开到gitee登录界面driver &#x3D; webdriver.Chrome(options&#x3D;options)driver.get(&#39;https:&#x2F;&#x2F;gitee.com&#x2F;login&#39;)# 输入账号user_login &#x3D; driver.find_element(&#39;id&#39;,&#39;user_login&#39;)user_login.send_keys(&quot;在这里输入账号 &quot;)# 输入密码driver.find_element(&#39;id&#39;,&#39;user_password&#39;).send_keys(&quot;在这里输入密码&quot;)# 点击登录按钮driver.find_element(&#39;xpath&#39;,    &#39;&#x2F;&#x2F;input[@class&#x3D;&quot;ui fluid orange submit button large&quot;]&#39;).click()time.sleep(2)# 切换到gitee pages界面--改为you_gitee_iddriver.get(&#39;https:&#x2F;&#x2F;gitee.com&#x2F;你的账户名&#x2F;你的仓库名&#x2F;pages&#39;)# 点击更新按钮--通过xpath确定点击位置driver.find_element(&#39;xpath&#39;, &#39;&#x2F;&#x2F;div[@class&#x3D;&quot;button orange redeploy-button ui update_deploy&quot;]&#39;).click()time.sleep(2)# 确认更新提示框--这个函数的作用是确认提示框Alert(driver).accept()# 等待5秒更新time.sleep(5)# 这个print其实没事什么用,如果真的要测试脚本是否运行成功，可以用try来抛出异常print(&quot;成功&quot;)# 脚本运行成功,退出浏览器driver.quit()# 写上更新日志# 我这里是写在T盘，可以改为自己喜欢的目录fp &#x3D; open(&quot;T:\工作台\gitee-deploy.txt&quot;, &quot;a+&quot;)now_time &#x3D; time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, time.localtime())fp.write(&quot;部署时间:&#123;0&#125;\n&quot;.format(now_time))fp.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>本地运行示例</p><p><img src="https://s2.loli.net/2023/04/10/YhCMBO62sf7NQRL.png" alt="image-20230410150225085"></p><h3 id="上传脚本运行测试"><a href="#上传脚本运行测试" class="headerlink" title="上传脚本运行测试"></a>上传脚本运行测试</h3><p><code>1.上传脚本到服务器</code></p><p><code>2.运行脚本</code></p><pre class="line-numbers language-none"><code class="language-none">python3  xxx.py   #xxx.py处填写脚本存放的路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/10/J68bsKTpjG4qBuS.png" alt="image-20230410150554885"></p><p><code>3.宝塔面板新建计划任务</code></p><p><img src="https://s2.loli.net/2023/04/10/JDATfL1YiplUZvS.png" alt="image-20230410150755134"></p><p><code>4.查看任务执行日志</code></p><p><img src="https://s2.loli.net/2023/04/10/tBq73phDWrz1G2v.png" alt="image-20230410150852704"></p><div class="note red flat"><p>参考文章</p><ul><li><a class="btn-beautify outline" href="https://zhuanlan.zhihu.com/p/98539899" title="python安装"><i class="far fa-hand-point-right"></i><span>python安装</span></a></li><li><a class="btn-beautify outline" href="https://blog.csdn.net/weixin_44184990/article/details/123590435" title="安装chrome和chromedriver"><i class="far fa-hand-point-right"></i><span>安装chrome和chromedriver</span></a></li></ul></div>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitee </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hacker</title>
      <link href="/2023/03/30/hacker%E9%BB%91%E5%AE%A2/"/>
      <url>/2023/03/30/hacker%E9%BB%91%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>hacker cracer  黑客</p><p>你是怎么看黑客的？或者说在你印象中黑客是怎样的？</p><p>是一言不合就入侵的罪犯还是凭一己之力对抗整个国家的勇士?</p><p>起初黑客和骇客都来源于单词”Hacker”，最早指十分热心钻研计算机技术，水平高超，在一般的程序员眼里差不多是无所不能的资深专家。</p><p>然而破解者”Cracker”最早专门指密码破解和软件破解的人，crack一词有“打开、砸开”的意思，因为从事暴力破解的难度往往小于从事技术破解，所以他们会调侃自己“砸开”了一个需要验证的软件之类的，所以叫做cracker。</p><p>黑客是一个中文词语，在台湾地区对应的中文词语为骇客，皆源自英文hacker，不同地区的中文使用习惯造成了翻译的差别。实际上，黑客（或骇客）与英文原文Hacker、Cracker等含义不能够达到完全对译，这是中英文语言词汇各自发展中形成的差异。Hacker一词，最初曾指热心于计算机技术、水平高超的电脑专家，尤其是程序设计人员，逐渐区分为白帽(DengKelen)、灰帽、黑帽等，其中黑帽（black hat）实际就是cracker。到了今天，黑客一词已被用于泛指那些专门利用计算机病毒搞破坏的家伙，对这些人的正确英文叫法是Cracker。在媒体报道中，黑客一词常指那些软件骇客(software cracker)，而与黑客相对的是红客。当然，也有正义的黑客。</p><p>黑客就像是这个现实的世界里的超人</p><p>他们见到了真正的自由</p><p>我们之所以向往，是因为我们身在井底，可本性是向往自由</p><p>他们的故事传奇而精彩，凭一己之力能做到很多事情</p><p>这种浪漫的英雄主义，怎么不让人神往？</p><p>更多的，黑客是一种勋章，是对程序员能力的肯定</p>]]></content>
      
      
      <categories>
          
          <category> 网安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hacker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些Html特效代码</title>
      <link href="/2022/11/28/%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84html%E4%BB%A3%E7%A0%81/"/>
      <url>/2022/11/28/%E4%B8%80%E4%BA%9B%E6%9C%89%E8%B6%A3%E7%9A%84html%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="烂漫粉色爱心"><a href="#烂漫粉色爱心" class="headerlink" title="烂漫粉色爱心"></a>烂漫粉色爱心</h2><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid2267374-20221128-1669638145563" alt="粉色爱心"></p><a class="btn-beautify outline" href="/add/01.html"   title="示例"><i class="far fa-hand-point-right"></i><span>示例</span></a><p>源代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;&lt;title&gt;粉色爱心&lt;&#x2F;title&gt; &lt;style&gt;html, body &#123;  height: 100%;  padding: 0;  margin: 0;  background: #000;&#125;canvas &#123;  width: 100%;  height: 100%;&#125;&lt;&#x2F;style&gt; &lt;&#x2F;head&gt;&lt;body&gt; &lt;div style&#x3D;&quot;text-align:center;clear:both;&quot;&gt;&lt;script src&#x3D;&quot;&#x2F;gg_bd_ad_720x90.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;&#x2F;follow.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;&lt;&#x2F;div&gt; &lt;canvas id&#x3D;&quot;pinkboard&quot;&gt;&lt;&#x2F;canvas&gt; &lt;script&gt;var settings &#x3D; &#123;  particles: &#123;    length:   500,    duration:   2,    velocity: 100,    effect: -0.75,    size:      30,  &#125;,&#125;; (function()&#123;var b&#x3D;0;var c&#x3D;[&quot;ms&quot;,&quot;moz&quot;,&quot;webkit&quot;,&quot;o&quot;];for(var a&#x3D;0;a&lt;c.length&amp;&amp;!window.requestAnimationFrame;++a)&#123;window.requestAnimationFrame&#x3D;window[c[a]+&quot;RequestAnimationFrame&quot;];window.cancelAnimationFrame&#x3D;window[c[a]+&quot;CancelAnimationFrame&quot;]||window[c[a]+&quot;CancelRequestAnimationFrame&quot;]&#125;if(!window.requestAnimationFrame)&#123;window.requestAnimationFrame&#x3D;function(h,e)&#123;var d&#x3D;new Date().getTime();var f&#x3D;Math.max(0,16-(d-b));var g&#x3D;window.setTimeout(function()&#123;h(d+f)&#125;,f);b&#x3D;d+f;return g&#125;&#125;if(!window.cancelAnimationFrame)&#123;window.cancelAnimationFrame&#x3D;function(d)&#123;clearTimeout(d)&#125;&#125;&#125;()); var Point &#x3D; (function() &#123;  function Point(x, y) &#123;    this.x &#x3D; (typeof x !&#x3D;&#x3D; &#39;undefined&#39;) ? x : 0;    this.y &#x3D; (typeof y !&#x3D;&#x3D; &#39;undefined&#39;) ? y : 0;  &#125;  Point.prototype.clone &#x3D; function() &#123;    return new Point(this.x, this.y);  &#125;;  Point.prototype.length &#x3D; function(length) &#123;    if (typeof length &#x3D;&#x3D; &#39;undefined&#39;)      return Math.sqrt(this.x * this.x + this.y * this.y);    this.normalize();    this.x *&#x3D; length;    this.y *&#x3D; length;    return this;  &#125;;  Point.prototype.normalize &#x3D; function() &#123;    var length &#x3D; this.length();    this.x &#x2F;&#x3D; length;    this.y &#x2F;&#x3D; length;    return this;  &#125;;  return Point;&#125;)(); var Particle &#x3D; (function() &#123;  function Particle() &#123;    this.position &#x3D; new Point();    this.velocity &#x3D; new Point();    this.acceleration &#x3D; new Point();    this.age &#x3D; 0;  &#125;  Particle.prototype.initialize &#x3D; function(x, y, dx, dy) &#123;    this.position.x &#x3D; x;    this.position.y &#x3D; y;    this.velocity.x &#x3D; dx;    this.velocity.y &#x3D; dy;    this.acceleration.x &#x3D; dx * settings.particles.effect;    this.acceleration.y &#x3D; dy * settings.particles.effect;    this.age &#x3D; 0;  &#125;;  Particle.prototype.update &#x3D; function(deltaTime) &#123;    this.position.x +&#x3D; this.velocity.x * deltaTime;    this.position.y +&#x3D; this.velocity.y * deltaTime;    this.velocity.x +&#x3D; this.acceleration.x * deltaTime;    this.velocity.y +&#x3D; this.acceleration.y * deltaTime;    this.age +&#x3D; deltaTime;  &#125;;  Particle.prototype.draw &#x3D; function(context, image) &#123;    function ease(t) &#123;      return (--t) * t * t + 1;    &#125;    var size &#x3D; image.width * ease(this.age &#x2F; settings.particles.duration);    context.globalAlpha &#x3D; 1 - this.age &#x2F; settings.particles.duration;    context.drawImage(image, this.position.x - size &#x2F; 2, this.position.y - size &#x2F; 2, size, size);  &#125;;  return Particle;&#125;)(); var ParticlePool &#x3D; (function() &#123;  var particles,      firstActive &#x3D; 0,      firstFree   &#x3D; 0,      duration    &#x3D; settings.particles.duration;    function ParticlePool(length) &#123;    particles &#x3D; new Array(length);    for (var i &#x3D; 0; i &lt; particles.length; i++)      particles[i] &#x3D; new Particle();  &#125;  ParticlePool.prototype.add &#x3D; function(x, y, dx, dy) &#123;    particles[firstFree].initialize(x, y, dx, dy);        firstFree++;    if (firstFree   &#x3D;&#x3D; particles.length) firstFree   &#x3D; 0;    if (firstActive &#x3D;&#x3D; firstFree       ) firstActive++;    if (firstActive &#x3D;&#x3D; particles.length) firstActive &#x3D; 0;  &#125;;  ParticlePool.prototype.update &#x3D; function(deltaTime) &#123;    var i;        if (firstActive &lt; firstFree) &#123;      for (i &#x3D; firstActive; i &lt; firstFree; i++)        particles[i].update(deltaTime);    &#125;    if (firstFree &lt; firstActive) &#123;      for (i &#x3D; firstActive; i &lt; particles.length; i++)        particles[i].update(deltaTime);      for (i &#x3D; 0; i &lt; firstFree; i++)        particles[i].update(deltaTime);    &#125;        while (particles[firstActive].age &gt;&#x3D; duration &amp;&amp; firstActive !&#x3D; firstFree) &#123;      firstActive++;      if (firstActive &#x3D;&#x3D; particles.length) firstActive &#x3D; 0;    &#125;          &#125;;  ParticlePool.prototype.draw &#x3D; function(context, image) &#123;    if (firstActive &lt; firstFree) &#123;      for (i &#x3D; firstActive; i &lt; firstFree; i++)        particles[i].draw(context, image);    &#125;    if (firstFree &lt; firstActive) &#123;      for (i &#x3D; firstActive; i &lt; particles.length; i++)        particles[i].draw(context, image);      for (i &#x3D; 0; i &lt; firstFree; i++)        particles[i].draw(context, image);    &#125;  &#125;;  return ParticlePool;&#125;)(); (function(canvas) &#123;  var context &#x3D; canvas.getContext(&#39;2d&#39;),      particles &#x3D; new ParticlePool(settings.particles.length),      particleRate &#x3D; settings.particles.length &#x2F; settings.particles.duration, &#x2F;&#x2F; particles&#x2F;sec      time;    function pointOnHeart(t) &#123;    return new Point(      160 * Math.pow(Math.sin(t), 3),      130 * Math.cos(t) - 50 * Math.cos(2 * t) - 20 * Math.cos(3 * t) - 10 * Math.cos(4 * t) + 25    );  &#125;    var image &#x3D; (function() &#123;    var canvas  &#x3D; document.createElement(&#39;canvas&#39;),        context &#x3D; canvas.getContext(&#39;2d&#39;);    canvas.width  &#x3D; settings.particles.size;    canvas.height &#x3D; settings.particles.size;    function to(t) &#123;      var point &#x3D; pointOnHeart(t);      point.x &#x3D; settings.particles.size &#x2F; 2 + point.x * settings.particles.size &#x2F; 350;      point.y &#x3D; settings.particles.size &#x2F; 2 - point.y * settings.particles.size &#x2F; 350;      return point;    &#125;    context.beginPath();    var t &#x3D; -Math.PI;    var point &#x3D; to(t);    context.moveTo(point.x, point.y);    while (t &lt; Math.PI) &#123;      t +&#x3D; 0.01;       point &#x3D; to(t);      context.lineTo(point.x, point.y);    &#125;    context.closePath();&#x2F;&#x2F; &lt;!-- 粉色#ea80b0--&gt;    context.fillStyle &#x3D; &#39;#ea80b0&#39;;    context.fill();      var image &#x3D; new Image();    image.src &#x3D; canvas.toDataURL();    return image;  &#125;)();    function render() &#123;    requestAnimationFrame(render);        var newTime   &#x3D; new Date().getTime() &#x2F; 1000,        deltaTime &#x3D; newTime - (time || newTime);    time &#x3D; newTime;        context.clearRect(0, 0, canvas.width, canvas.height);        var amount &#x3D; particleRate * deltaTime;    for (var i &#x3D; 0; i &lt; amount; i++) &#123;      var pos &#x3D; pointOnHeart(Math.PI - 2 * Math.PI * Math.random());      var dir &#x3D; pos.clone().length(settings.particles.velocity);      particles.add(canvas.width &#x2F; 2 + pos.x, canvas.height &#x2F; 2 - pos.y, dir.x, -dir.y);    &#125;        particles.update(deltaTime);    particles.draw(context, image);  &#125;    function onResize() &#123;    canvas.width  &#x3D; canvas.clientWidth;    canvas.height &#x3D; canvas.clientHeight;  &#125;  window.onresize &#x3D; onResize;    setTimeout(function() &#123;    onResize();    render();  &#125;, 10);&#125;)(document.getElementById(&#39;pinkboard&#39;)); &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="恋爱计时器"><a href="#恋爱计时器" class="headerlink" title="恋爱计时器"></a>恋爱计时器</h2><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid2267374-20221128-1669647394651" alt="恋爱计时器"></p><a class="btn-beautify outline" href="/add/03.html"   title="示例"><i class="far fa-hand-point-right"></i><span>示例</span></a><p>源代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;    &lt;title&gt;恋爱计时器&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;         &lt;div id&#x3D;&quot;elapseClock&quot;&gt;&lt;&#x2F;div&gt;    &lt;script&gt;        var t &#x3D; null;        t &#x3D; setTimeout(time, 1000);        function time() &#123;            clearTimeout(t);            BirthDay &#x3D; new Date(&quot;december 17,2021&quot;);            today &#x3D; new Date();            timeold &#x3D; (today.getTime() - BirthDay.getTime());            sectimeold &#x3D; timeold &#x2F; 1000            secondsold &#x3D; Math.floor(sectimeold);            msPerDay &#x3D; 24 * 60 * 60 * 1000            e_daysold &#x3D; timeold &#x2F; msPerDay            daysold &#x3D; Math.floor(e_daysold);            e_hrsold &#x3D; (e_daysold - daysold) * 24;            hrsold &#x3D; Math.floor(e_hrsold);            e_minsold &#x3D; (e_hrsold - hrsold) * 60;            minsold &#x3D; Math.floor((e_hrsold - hrsold) * 60);            seconds &#x3D; Math.floor((e_minsold - minsold) * 60);            &#x2F;&#x2F; document.write(&quot;2002年已经过去了&quot;+daysold+&quot;天&quot;+hrsold+&quot;小时&quot;+minsold+&quot;分&quot;+seconds+&quot;秒啦!&quot;);           var result &#x3D; document.getElementById(&quot;elapseClock&quot;)           result.innerHTML&#x3D;&quot;&lt;span class&#x3D;\&quot;digit\&quot;&gt;&quot; + daysold + &quot;&lt;&#x2F;span&gt; 天 &lt;span class&#x3D;\&quot;digit\&quot;&gt;&quot; + hrsold + &quot;&lt;&#x2F;span&gt; 时 &lt;span class&#x3D;\&quot;digit\&quot;&gt;&quot; + minsold + &quot;&lt;&#x2F;span&gt; 分 &lt;span class&#x3D;\&quot;digit\&quot;&gt;&quot; + seconds + &quot;&lt;&#x2F;span&gt; 秒&quot;            t &#x3D; setTimeout(time, 500);        &#125;    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="爱心跳动"><a href="#爱心跳动" class="headerlink" title="爱心跳动"></a>爱心跳动</h2><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid2267374-20221128-1669640995392" alt="爱心跳动"></p><a class="btn-beautify outline" href="/add/02.html"   title="示例"><i class="far fa-hand-point-right"></i><span>示例</span></a><p>源代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;    &lt;title&gt;爱心跳动&lt;&#x2F;title&gt;    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;       html, body&#123;          width: 100%;          height: 100%;          min-width: 500px;          min-height: 500px;          overflow: hidden;        &#125;        .heart &#123;          position: absolute;          width: 100px;          height: 90px;          top: 50%;          left: 50%;          margin-top: -45px;          margin-left: -50px;        &#125;        .heart:before,        .heart:after &#123;          position: absolute;          content: &quot;&quot;;          left: 50px;          top: 0;          width: 50px;          height: 80px;          background: #fc2e5a;          border-radius: 50px 50px 0 0;          transform: rotate(-45deg);          transform-origin: 0 100%;        &#125;        .heart:after &#123;          left: 0;          transform: rotate(45deg);          transform-origin :100% 100%;        &#125;        .heart1&#123;           animation: heart-anim 1s linear .4s infinite;        &#125;        .heart2&#123;           animation: pounding .5s linear infinite alternate;        &#125;        .heart1:after, .heart1:before&#123;          background-color: #ff7693;        &#125;        @keyframes pounding&#123;          0%&#123; transform: scale(1.5); &#125;          100%&#123; transform: scale(1); &#125;        &#125;        @keyframes heart-anim &#123;          46% &#123;            transform: scale(1);          &#125;          50% &#123;            transform: scale(1.3);          &#125;          52% &#123;            transform: scale(1.5);          &#125;          55% &#123;            transform: scale(3);          &#125;          100% &#123;            opacity: 0;            transform: scale(50);          &#125;        &#125;        &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;!--外圈大心--&gt;   &lt;div class&#x3D;&quot;heart heart1&quot;&gt;&lt;&#x2F;div&gt;  &lt;!--里面小心--&gt;   &lt;div class&#x3D;&quot;heart heart2&quot;&gt;&lt;&#x2F;div&gt;   &lt;&#x2F;body&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="黑客数据雨"><a href="#黑客数据雨" class="headerlink" title="黑客数据雨"></a>黑客数据雨</h2><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid2267374-20221128-1669641103179" alt="数据雨"></p><a class="btn-beautify outline" href="/add/10.html"   title="示例"><i class="far fa-hand-point-right"></i><span>示例</span></a><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;head&gt;    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot; &#x2F;&gt;    &lt;title&gt;MGT-404&lt;&#x2F;title&gt;    &lt;style&gt;      * &#123;        margin: 0;        padding: 0;      &#125;      body &#123;        background: black;          &#x2F;* 此处调整初次闪屏背景颜色 *&#x2F;      &#125;      canvas &#123;        display: block;      &#125;    &lt;&#x2F;style&gt;  &lt;&#x2F;head&gt;  &lt;body&gt;    &lt;canvas id&#x3D;&quot;ad&quot;&gt;&lt;&#x2F;canvas&gt;    &lt;script&gt;      var ad &#x3D; document.getElementById(&quot;ad&quot;);      var ctx &#x3D; ad.getContext(&quot;2d&quot;);      ad.height &#x3D; window.innerHeight;      ad.width &#x3D; window.innerWidth;      var chinese &#x3D; &quot;GREEF&quot;;   &#x2F;&#x2F;&lt;!--此处添加需要显示的文字--&gt;      chinese &#x3D; chinese.split(&quot;&quot;);      var font_size &#x3D; 10;  &#x2F;&#x2F;&#x2F;&lt;!--此处调整字符大小--&gt;      var columns &#x3D; ad.width &#x2F; font_size;      var drops &#x3D; [];      for (var x &#x3D; 0; x &lt; columns; x++) drops[x] &#x3D; 1;      function draw() &#123;        ctx.fillStyle &#x3D; &quot;rgba(0, 0, 0, 0.05)&quot;;  &#x2F;&#x2F;&lt;!--此处最后一个参数调整背景字符透明度--&gt;        ctx.fillRect(0, 0, ad.width, ad.height);        ctx.fillStyle &#x3D; &quot;#0F0&quot;;   &#x2F;&#x2F;&lt;!--此处为字体颜色，十六进制颜色码--&gt;        ctx.font &#x3D; font_size + &quot;px arial&quot;;        for (var i &#x3D; 0; i &lt; drops.length; i++) &#123;          var text &#x3D; chinese[Math.floor(Math.random() * chinese.length)]; &#x2F;&#x2F; &lt;!--此处修改成text&#x3D;&quot;具体文字&quot;  可以实现只显示固定文字无随机闪烁效果--&gt;          ctx.fillText(text, i * font_size, drops[i] * font_size);          if (drops[i] * font_size &gt; ad.height &amp;&amp; Math.random() &gt; 0.90)  &#x2F;&#x2F;&lt;!--此处最后一个参数调整文字离散程度，数字越小越密集--&gt;            drops[i] &#x3D; 0;          drops[i]++;        &#125;      &#125;      setInterval(draw, 70); &#x2F;&#x2F;&lt;!--此处调整下落速度，数字越小越快--&gt;    &lt;&#x2F;script&gt;  &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后，恋爱nao版爱心雨<br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid2267374-20221128-1669641274833" alt="爱心雨"></p><a class="btn-beautify outline" href="/add/06.html"   title="示例"><i class="far fa-hand-point-right"></i><span>示例</span></a><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;head&gt;    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot; &#x2F;&gt;    &lt;title&gt;MGT-404&lt;&#x2F;title&gt;    &lt;style&gt;      * &#123;        margin: 0;        padding: 0;      &#125;      body &#123;        background: black;       &#125;      canvas &#123;        display: block;      &#125;    &lt;&#x2F;style&gt;  &lt;&#x2F;head&gt;  &lt;body&gt;    &lt;canvas id&#x3D;&quot;ad&quot;&gt;&lt;&#x2F;canvas&gt;    &lt;script&gt;      var ad &#x3D; document.getElementById(&quot;ad&quot;);      var ctx &#x3D; ad.getContext(&quot;2d&quot;);      ad.height &#x3D; window.innerHeight;      ad.width &#x3D; window.innerWidth;      var chinese &#x3D; &quot;love&quot;;         chinese &#x3D; chinese.split(&quot;&quot;);      var font_size &#x3D; 10;        var columns &#x3D; ad.width &#x2F; font_size;      var drops &#x3D; [];      for (var x &#x3D; 0; x &lt; columns; x++) drops[x] &#x3D; 1;      function draw() &#123;        ctx.fillStyle &#x3D; &quot;rgba(0, 0, 0, 0.05)&quot;; &#x2F;&#x2F;此处最后一个参数调整背景字符透明度        ctx.fillRect(0, 0, ad.width, ad.height);        ctx.fillStyle &#x3D; &quot;#ea80b0&quot;;&#x2F;&#x2F;&quot;#0F0&quot;;   &#x2F;&#x2F;此处为字体颜色，十六进制颜色码        ctx.font &#x3D; font_size + &quot;px arial&quot;;        for (var i &#x3D; 0; i &lt; drops.length; i++) &#123;          var text &#x3D; &quot;❤&quot;;&#x2F;&#x2F;chinese[Math.floor(Math.random() * chinese.length)];  &#x2F;&#x2F;此处修改成text&#x3D;&quot;具体文字&quot;  可以实现只显示固定文字无随机闪烁效果          ctx.fillText(text, i * font_size, drops[i] * font_size);          if (drops[i] * font_size &gt; ad.height &amp;&amp; Math.random() &gt; 0.975)  &#x2F;&#x2F;此处最后一个参数调整文字离散程度，数字越小越密集            drops[i] &#x3D; 0;          drops[i]++;        &#125;      &#125;      setInterval(draw, 70); &#x2F;&#x2F;此处调整下落速度，数字越小越快    &lt;&#x2F;script&gt;  &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>另外一些很炫的动画特效</p></blockquote><h2 id="炫酷色彩"><a href="#炫酷色彩" class="headerlink" title="炫酷色彩"></a>炫酷色彩</h2><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid2267374-20221128-1669647559166" alt="炫酷色彩"></p><a class="btn-beautify outline" href="/add/04.html"   title="示例"><i class="far fa-hand-point-right"></i><span>示例</span></a><p>源代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;&lt;title&gt;star&lt;&#x2F;title&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;window.onload &#x3D; function () &#123;C &#x3D; Math.cos; &#x2F;&#x2F; cache Math objectsS &#x3D; Math.sin;U &#x3D; 0;w &#x3D; window;j &#x3D; document;d &#x3D; j.getElementById(&quot;c&quot;);c &#x3D; d.getContext(&quot;2d&quot;);W &#x3D; d.width &#x3D; w.innerWidth;H &#x3D; d.height &#x3D; w.innerHeight;c.fillRect(0, 0, W, H); &#x2F;&#x2F; resize &lt;canvas&gt; and draw black rect (default)c.globalCompositeOperation &#x3D; &quot;lighter&quot;;  &#x2F;&#x2F; switch to additive color applicationc.lineWidth &#x3D; 0.2;c.lineCap &#x3D; &quot;round&quot;;var bool &#x3D; 0, t &#x3D; 0; &#x2F;&#x2F; thetad.onmousemove &#x3D; function (e) &#123;if(window.T) &#123;if(D&#x3D;&#x3D;9) &#123; D&#x3D;Math.random()*15; f(1); &#125;clearTimeout(T);&#125;X &#x3D; e.pageX; &#x2F;&#x2F; grab mouse pixel coordsY &#x3D; e.pageY;a&#x3D;0; &#x2F;&#x2F; previous coord.xb&#x3D;0; &#x2F;&#x2F; previous coord.y A &#x3D; X, &#x2F;&#x2F; original coord.xB &#x3D; Y; &#x2F;&#x2F; original coord.yR&#x3D;(e.pageX&#x2F;W * 999&gt;&gt;0)&#x2F;999;r&#x3D;(e.pageY&#x2F;H * 999&gt;&gt;0)&#x2F;999;U&#x3D;e.pageX&#x2F;H * 360 &gt;&gt;0;D&#x3D;9;g &#x3D; 360 * Math.PI &#x2F; 180;T &#x3D; setInterval(f &#x3D; function (e) &#123; &#x2F;&#x2F; start looping spectrumc.save();c.globalCompositeOperation &#x3D; &quot;source-over&quot;; &#x2F;&#x2F; switch to additive color applicationif(e!&#x3D;1) &#123;c.fillStyle &#x3D; &quot;rgba(0,0,0,0.02)&quot;;c.fillRect(0, 0, W, H); &#x2F;&#x2F; resize &lt;canvas&gt; and draw black rect (default)&#125;c.restore();i &#x3D; 25; while(i --) &#123;c.beginPath();if(D &gt; 450 || bool) &#123; &#x2F;&#x2F; decrease diameterif(!bool) &#123; &#x2F;&#x2F; has hit maximumbool &#x3D; 1;&#125;if(D &lt; 0.1) &#123; &#x2F;&#x2F; has hit minimumbool &#x3D; 0;&#125;t -&#x3D; g; &#x2F;&#x2F; decrease thetaD -&#x3D; 0.1; &#x2F;&#x2F; decrease size&#125;if(!bool) &#123;t +&#x3D; g; &#x2F;&#x2F; increase thetaD +&#x3D; 0.1; &#x2F;&#x2F; increase size&#125;q &#x3D; (R &#x2F; r - 1) * t; &#x2F;&#x2F; create hypotrochoid from current mouse position, and setup variables (see: http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hypotrochoid)x &#x3D; (R - r) * C(t) + D * C(q) + (A + (X - A) * (i &#x2F; 25)) + (r - R); &#x2F;&#x2F; center on xy coordsy &#x3D; (R - r) * S(t) - D * S(q) + (B + (Y - B) * (i &#x2F; 25));if (a) &#123; &#x2F;&#x2F; draw once two points are setc.moveTo(a, b);c.lineTo(x, y)&#125;c.strokeStyle &#x3D; &quot;hsla(&quot; + (U % 360) + &quot;,100%,50%,0.75)&quot;; &#x2F;&#x2F; draw rainbow hypotrochoidc.stroke();a &#x3D; x; &#x2F;&#x2F; set previous coord.xb &#x3D; y; &#x2F;&#x2F; set previous coord.y&#125;U -&#x3D; 0.5; &#x2F;&#x2F; increment hueA &#x3D; X; &#x2F;&#x2F; set original coord.xB &#x3D; Y; &#x2F;&#x2F; set original coord.y&#125;, 16);&#125;j.onkeydown &#x3D; function(e) &#123; a&#x3D;b&#x3D;0; R +&#x3D; 0.05 &#125;d.onmousemove(&#123;pageX:300, pageY:290&#125;)&#125;&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body style&#x3D;&quot;margin:0px;padding:0px;width:100%;height:100%;overflow:hidden;&quot;&gt;&lt;canvas id&#x3D;&quot;c&quot;&gt;&lt;&#x2F;canvas&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="星空动画"><a href="#星空动画" class="headerlink" title="星空动画"></a>星空动画</h2><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid2267374-20221128-1669641614970" alt="星空动画"></p><a class="btn-beautify outline" href="/add/08.html"   title="示例"><i class="far fa-hand-point-right"></i><span>示例</span></a><p>源代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;&#x2F;title&gt;        &lt;style&gt;            body &#123;              width: 100%;              margin: 0;              overflow: hidden;            &#125;            canvas&#123;              display:block;            &#125;        &lt;&#x2F;style&gt;    &lt;&#x2F;head&gt;    &lt;body&gt;        &lt;canvas id&#x3D;&#39;canv&#39;&gt;&lt;&#x2F;canvas&gt;        &lt;script&gt;            var c &#x3D; document.getElementById(&#39;canv&#39;);&#x2F;&#x2F;获取canvas的Id            var $ &#x3D; c.getContext(&#39;2d&#39;);&#x2F;*设置绘制方式*&#x2F;            var u &#x3D; 0;            var go &#x3D; function() &#123;              var sc, g, g1, i, j, p, x, y, z, w, a, cur,                d &#x3D; new Date() &#x2F; 1000,                rnd &#x3D; shift(),                rnd1 &#x3D; d,                rnd2 &#x3D; 2.4,                rnd3 &#x3D; d * 0.2,                rnd1c &#x3D; Math.cos(rnd1),                rnd1s &#x3D; Math.sin(rnd1),                rnd2c &#x3D; Math.cos(rnd2),                rnd2s &#x3D; Math.sin(rnd2);              c.width &#x3D; window.innerWidth;              c.height &#x3D; window.innerHeight;              sc &#x3D; Math.max(c.width, c.height);              $.translate(c.width * 0.5, c.height * 0.5);&#x2F;&#x2F;从中心开始绘制              $.scale(sc, sc);&#x2F;&#x2F;放大最大数值              &#x2F;*线性渐变*&#x2F;              g &#x3D; $.createLinearGradient(-1, -2, 1, 2);              g.addColorStop(0.0, &#39;hsla(338, 95%, 25%, 1)&#39;);              g.addColorStop(0.5, &#39;hsla(260, 95%, 5%, 1)&#39;);              g.addColorStop(1.0, &#39;hsla(338, 95%, 30%, 1)&#39;);              $.fillStyle &#x3D; g;&#x2F;&#x2F;颜色              $.fillRect(-0.5, -0.5, 1, 1);              $.globalCompositeOperation &#x3D; &#39;lighter&#39;;              $.rotate(rnd3 % Math.PI * 2);&#x2F;*旋转*&#x2F;              for (i &#x3D; 0; i &lt; 300; i +&#x3D; 1) &#123;                p &#x3D; rnd();                x &#x3D; (p &amp; 0xff) &#x2F; 128 - 1;                y &#x3D; (p &gt;&gt;&gt; 8 &amp; 0xff) &#x2F; 128 - 1;                z &#x3D; (p &gt;&gt;&gt; 16 &amp; 0xff) &#x2F; 128 - 1;                w &#x3D; (p &gt;&gt;&gt; 24 &amp; 0xff) &#x2F; 256;                z +&#x3D; d * 0.5;                z &#x3D; (z + 1) % 2 - 1;                a &#x3D; (z + 1) * 0.5;                if (a &lt; 0.9) &#123;                  $.globalAlpha &#x3D; a &#x2F; 0.7;                &#125;else &#123;                  a -&#x3D; 0.9;                  $.globalAlpha &#x3D; 1 - a &#x2F; 0.1;                &#125;                cur &#x3D; x * rnd1c + y * rnd1s;                y &#x3D; x * rnd1s - y * rnd1c;                x &#x3D; cur;                cur &#x3D; y * rnd2c + z * rnd2s;                z &#x3D; y * rnd2s - z * rnd2c;                y &#x3D; cur;                z -&#x3D; 0.65;                if (z &gt;&#x3D; 0) &#123;                  continue;                &#125;                sc &#x3D; 0.1 &#x2F; z;                x *&#x3D; sc;                y *&#x3D; sc;                $.save();                g1 &#x3D; $.createRadialGradient(1, 1, 2, 1, 1, 1);                g1.addColorStop(0.0, &#39;hsla(&#39;+i+&#39;, 70%, 40%,.8)&#39;);                g1.addColorStop(0.5, &#39;hsla(&#39;+i+&#39;, 75%, 50%, 1)&#39;);                g1.addColorStop(1.0, &#39;hsla(&#39;+i+&#39;, 80%, 60%, .8)&#39;);                $.fillStyle &#x3D; g1;                $.translate(x, y);                $.scale(sc * 0.017, sc * 0.017);                $.beginPath();                $.moveTo(2, 0);                for (j &#x3D; 0; j &lt; 10; j +&#x3D; 1) &#123;                  $.rotate(Math.PI*2 * 0.1);                  $.lineTo(j % 2 + 1, 0);                &#125;                $.arc(10, 10, 1, 0, Math.PI * 2);                    $.rotate(Math.PI * 2 * 0.1);                $.closePath();                $.fill();                $.restore();              &#125;            &#125;;            &#x2F;*            Marsaglia&#39;s Xorshift128 PRG: http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Xorshift            *&#x2F;            var shift &#x3D; function(x, y, z, w) &#123;              x &#x3D; x || 1234567;              y &#x3D; y || 362436069;              z &#x3D; z || 521288629;              w &#x3D; w || 88675123;              return function() &#123;                var s &#x3D; x ^ (x &lt;&lt; 11);                x &#x3D; y;                y &#x3D; z;                z &#x3D; w;                w &#x3D; (w ^ (w &gt;&gt;&gt; 19)) ^ (s ^ (s &gt;&gt;&gt; 8));                return w;              &#125;;            &#125;            window.addEventListener(&#39;resize&#39;, function() &#123;              c.width &#x3D; window.innerWidth;              c.height &#x3D; window.innerHeight;            &#125;, false);            window.requestAnimationFrame &#x3D; window.requestAnimationFrame||            window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame ||            window.msRequestAnimationFrame;            var run &#x3D; function() &#123;              window.requestAnimationFrame(run);              go();            &#125;            run();        &lt;&#x2F;script&gt;    &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Butterfly标签外挂的使用</title>
      <link href="/2022/11/03/hexo-butterfly%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/11/03/hexo-butterfly%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>文章节选自<a href="https://butterfly.js.org/posts/4aa8abbe/">butterfly</a></p><p>仅供个人学习参考，转载请声明文章来自</p><div class="note red flat"><p>作者: Jerry<br>連結: <a href="https://butterfly.js.org/posts/4aa8abbe/">https://butterfly.js.org/posts/4aa8abbe/</a><br>來源: Butterfly<br>著作權歸作者所有。商業轉載請聯絡作者獲得授權，非商業轉載請註明出處。</p></div><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><pre class="line-numbers language-none"><code class="language-none">&#123;% note [color] [icon] [style] %&#125;这是note标签&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>名称</th><th align="center">用法</th></tr></thead><tbody><tr><td>color</td><td align="center">【可選】顔色(default &#x2F; blue &#x2F; pink &#x2F; red &#x2F; purple &#x2F; orange &#x2F; green)</td></tr><tr><td>icon</td><td align="center">【可選】可配置自定義 icon (只支持 fontawesome 圖標, 也可以配置 no-icon )</td></tr><tr><td>style</td><td align="center">【可選】可以覆蓋配置中的 style（simple&#x2F;modern&#x2F;flat&#x2F;disabled&#x2F;no-icon）</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">&#123;% note simple %&#125;默認 提示塊標籤&#123;% endnote %&#125;&#123;% note default simple %&#125;default 提示塊標籤&#123;% endnote %&#125;&#123;% note primary simple %&#125;primary 提示塊標籤&#123;% endnote %&#125;&#123;% note success simple %&#125;success 提示塊標籤&#123;% endnote %&#125;&#123;% note info simple %&#125;info 提示塊標籤&#123;% endnote %&#125;&#123;% note warning simple %&#125;warning 提示塊標籤&#123;% endnote %&#125;&#123;% note danger simple %&#125;danger 提示塊標籤&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="note simple"><p>默認 提示塊標籤</p></div><div class="note default simple"><p>default 提示塊標籤</p></div><div class="note primary simple"><p>primary 提示塊標籤</p></div><div class="note success simple"><p>success 提示塊標籤</p></div><div class="note info simple"><p>info 提示塊標籤</p></div><div class="note warning simple"><p>warning 提示塊標籤</p></div><div class="note danger simple"><p>danger 提示塊標籤</p></div><h2 id="gallery"><a href="#gallery" class="headerlink" title="gallery"></a>gallery</h2><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;gallery-group-main&quot;&gt;&#123;% galleryGroup &#39;壁紙&#39; &#39;收藏的一些壁紙&#39; &#39;&#x2F;Gallery&#x2F;wallpaper&#39; https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;11&#x2F;10&#x2F;T7Mu8Aod3egmC4Q.png %&#125;&#123;% galleryGroup &#39;漫威&#39; &#39;關於漫威的圖片&#39; &#39;&#x2F;Gallery&#x2F;marvel&#39; https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;8t97aVlp4hgyBGu.jpg %&#125;&#123;% galleryGroup &#39;OH MY GIRL&#39; &#39;關於OH MY GIRL的圖片&#39; &#39;&#x2F;Gallery&#x2F;ohmygirl&#39; https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;hOqbQ3BIwa6KWpo.jpg %&#125;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">壁紙</div>  <p>收藏的一些壁紙</p>  <a href='/Gallery/wallpaper'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">漫威</div>  <p>關於漫威的圖片</p>  <a href='/Gallery/marvel'></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">OH MY GIRL</div>  <p>關於OH MY GIRL的圖片</p>  <a href='/Gallery/ohmygirl'></a>  </figcaption>  </figure>  </div><p><strong>gallery相册</strong></p><div class="gallery">    <div class="fj-gallery  data" data-rowHeight="220" data-limit="10">    <span class="gallery-data">[{"url":"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg","alt":""}]</span>    </div>    <button class="gallery-load-more"><span>加载更多</span><i class="fa-solid fa-arrow-down"></i></button>    </div><h2 id="tag-hide"><a href="#tag-hide" class="headerlink" title="tag-hide"></a>tag-hide</h2><p><strong>Toggle</strong></p><pre class="line-numbers language-none"><code class="language-none">&#123;% hideToggle Butterfly安裝方法 %&#125;在你的博客根目錄裏git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;Butterfly如果想要安裝比較新的dev分支，可以git clone -b dev https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;Butterfly&#123;% endhideToggle %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details class="toggle" ><summary class="toggle-button" style="">Butterfly安裝方法</summary><div class="toggle-content"><p>在你的博客根目錄裏</p><p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;Butterfly</p><p>如果想要安裝比較新的dev分支，可以</p><p>git clone -b dev <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;Butterfly</p></div></details><p><strong>Block</strong></p><pre class="line-numbers language-none"><code class="language-none">查看答案&#123;% hideBlock 查看答案 %&#125;傻子，怎麼可能有答案&#123;% endhideBlock %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看答案</p><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><p>傻子，怎麼可能有答案</p></div></div><p><strong>inline</strong></p><pre class="line-numbers language-none"><code class="language-none">哪個英文字母最酷？ &#123;% hideInline 因為西裝褲(C裝酷),查看答案,#FF7242,#fff %&#125;門裏站着一個人? &#123;% hideInline 閃 %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>哪個英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">因為西裝褲(C裝酷)</span></span></p><p>門裏站着一個人? <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">閃</span></span></p><h2 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h2><pre class="line-numbers language-none"><code class="language-none">&#123;% mermaid %&#125;pie    title Key elements in Product X    &quot;Calcium&quot; : 42.96    &quot;Potassium&quot; : 50.05    &quot;Magnesium&quot; : 10.01    &quot;Iron&quot; :  5&#123;% endmermaid %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie    title Key elements in Product X    &quot;Calcium&quot; : 42.96    &quot;Potassium&quot; : 50.05    &quot;Magnesium&quot; : 10.01    &quot;Iron&quot; :  5  </pre></div><h2 id="tabs"><a href="#tabs" class="headerlink" title="tabs"></a>tabs</h2><pre class="line-numbers language-none"><code class="language-none">&#123;% tabs Unique name, [index] %&#125;&lt;!-- tab [Tab caption] [@icon] --&gt;Any content (support inline tags too).&lt;!-- endtab --&gt;&#123;% endtabs %&#125;Unique name   : Unique name of tabs block tag without comma.                Will be used in #id&#39;s as prefix for each tab with their index numbers.                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.                Only for current url of post&#x2F;page must be unique![index]       : Index number of active tab.                If not specified, first tab (1) will be selected.                If index is -1, no tab will be selected. It&#39;s will be something like spoiler.                Optional parameter.[Tab caption] : Caption of current tab.                If not caption specified, unique name with tab index suffix will be used as caption of tab.                If not caption specified, but specified icon, caption will empty.                Optional parameter.[@icon]       : FontAwesome icon name (full-name, look like &#39;fas fa-font&#39;)                Can be specified with or without space; e.g. &#39;Tab caption @icon&#39; similar to &#39;Tab caption@icon&#39;.                Optional parameter.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一個Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸彈</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字為第一個Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有圖標 沒有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="button"><a href="#button" class="headerlink" title="button"></a>button</h2><pre class="line-numbers language-none"><code class="language-none">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;[url]         : 鏈接[text]        : 按鈕文字[icon]        : [可選] 圖標[color]       : [可選] 按鈕背景顔色(默認style時）                      按鈕字體和邊框顔色(outline時)                      default&#x2F;blue&#x2F;pink&#x2F;red&#x2F;purple&#x2F;orange&#x2F;green[style]       : [可選] 按鈕樣式 默認實心                      outline&#x2F;留空[layout]      : [可選] 按鈕佈局 默認為line                      block&#x2F;留空[position]    : [可選] 按鈕位置 前提是設置了layout為block 默認為左邊                      center&#x2F;right&#x2F;留空[size]        : [可選] 按鈕大小                      larger&#x2F;留空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例</p><pre class="line-numbers language-none"><code class="language-none">This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly %&#125;This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly,far fa-hand-point-right %&#125;This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly,,outline %&#125;This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly,far fa-hand-point-right,outline %&#125;This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly,far fa-hand-point-right,larger %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/"   title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/"   title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p><h2 id="inlineimg"><a href="#inlineimg" class="headerlink" title="inlineimg"></a>inlineimg</h2><pre class="line-numbers language-none"><code class="language-none">&#123;% inlineImg [src] [height] %&#125;[src]      :    圖片鏈接[height]   ：   圖片高度限制【可選】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">你看我長得漂亮不![](https:&#x2F;&#x2F;i.loli.net&#x2F;2021&#x2F;03&#x2F;19&#x2F;2P6ivUGsdaEXSFI.png)我覺得很漂亮 &#123;% inlineImg https:&#x2F;&#x2F;i.loli.net&#x2F;2021&#x2F;03&#x2F;19&#x2F;5M4jUB3ynq7ePgw.png 150px %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你看我長得漂亮不</p><p><img src="https://i.loli.net/2021/03/19/2P6ivUGsdaEXSFI.png"></p><p>我覺得很漂亮 <img class="inline-img" src="https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png" style="height:150px"/></p><h2 id="label"><a href="#label" class="headerlink" title="label"></a>label</h2><pre class="line-numbers language-none"><code class="language-none">臣亮言：&#123;% label 先帝 %&#125;創業未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此誠&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈於內；&#123;% label 忠志之士 purple %&#125;，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。宮中、府中，俱為一體；陟罰臧否，不宜異同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>臣亮言：<mark class="hl-label default">先帝</mark> 創業未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此誠<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈於內；<mark class="hl-label purple">忠志之士</mark> ，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。<br>宮中、府中，俱為一體；陟罰臧否，不宜異同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。</p><h2 id="timeline"><a href="#timeline" class="headerlink" title="timeline"></a>timeline</h2><pre class="line-numbers language-none"><code class="language-none">&#123;% timeline title,color %&#125;&lt;!-- timeline title --&gt;xxxxx&lt;!-- endtimeline --&gt;&lt;!-- timeline title --&gt;xxxxx&lt;!-- endtimeline --&gt;&#123;% endtimeline %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th align="center">用法</th></tr></thead><tbody><tr><td>title</td><td align="center">标题&#x2F;时间线</td></tr><tr><td>color</td><td align="center">timeline 顏色default(留空) &#x2F; blue &#x2F; pink &#x2F; red &#x2F;purple &#x2F; orange &#x2F; green</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">&#123;% timeline 2022 %&#125;&lt;!-- timeline 01-02 --&gt;這是測試頁面&lt;!-- endtimeline --&gt;&#123;% endtimeline %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>這是測試頁面</p></div></div></div><h2 id="flink"><a href="#flink" class="headerlink" title="flink"></a>flink</h2><p>可在任何界面插入類似友情鏈接列表效果</p><p>內容格式與友情鏈接界面一樣，支持 yml 格式</p><pre class="line-numbers language-none"><code class="language-none">&#123;% flink %&#125;xxxxxx&#123;% endflink %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#123;% flink %&#125;- class_name: 友情鏈接  class_desc: 那些人，那些事  link_list:    - name: JerryC      link: https:&#x2F;&#x2F;jerryc.me&#x2F;      avatar: https:&#x2F;&#x2F;jerryc.me&#x2F;img&#x2F;avatar.png      descr: 今日事,今日畢    - name: Hexo      link: https:&#x2F;&#x2F;hexo.io&#x2F;zh-tw&#x2F;      avatar: https:&#x2F;&#x2F;d33wubrfki0l68.cloudfront.net&#x2F;6657ba50e702d84afb32fe846bed54fba1a77add&#x2F;827ae&#x2F;logo.svg      descr: 快速、簡單且強大的網誌框架- class_name: 網站  class_desc: 值得推薦的網站  link_list:    - name: Youtube      link: https:&#x2F;&#x2F;www.youtube.com&#x2F;      avatar: https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;05&#x2F;14&#x2F;9ZkGg8v3azHJfM1.png      descr: 視頻網站    - name: Weibo      link: https:&#x2F;&#x2F;www.weibo.com&#x2F;      avatar: https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;05&#x2F;14&#x2F;TLJBum386vcnI1P.png      descr: 中國最大社交分享平台    - name: Twitter      link: https:&#x2F;&#x2F;twitter.com&#x2F;      avatar: https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;05&#x2F;14&#x2F;5VyHPQqR6LWF39a.png      descr: 社交分享平台&#123;% endflink %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="flink"><div class="flink-name">友情鏈接</div><div class="flink-desc">那些人，那些事</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://jerryc.me/" title="JerryC" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://jerryc.me/img/avatar.png" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="JerryC" />              </div>              <div class="flink-item-name">JerryC</div>               <div class="flink-item-desc" title="今日事,今日畢">今日事,今日畢</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://hexo.io/zh-tw/" title="Hexo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="Hexo" />              </div>              <div class="flink-item-name">Hexo</div>               <div class="flink-item-desc" title="快速、簡單且強大的網誌框架">快速、簡單且強大的網誌框架</div>            </a>          </div></div><div class="flink-name">網站</div><div class="flink-desc">值得推薦的網站</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.youtube.com/" title="Youtube" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="Youtube" />              </div>              <div class="flink-item-name">Youtube</div>               <div class="flink-item-desc" title="視頻網站">視頻網站</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.weibo.com/" title="Weibo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="Weibo" />              </div>              <div class="flink-item-name">Weibo</div>               <div class="flink-item-desc" title="中國最大社交分享平台">中國最大社交分享平台</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://twitter.com/" title="Twitter" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="Twitter" />              </div>              <div class="flink-item-name">Twitter</div>               <div class="flink-item-desc" title="社交分享平台">社交分享平台</div>            </a>          </div></div></div>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux命令行基础</title>
      <link href="/2022/11/03/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/11/03/Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%93%8D%E4%BD%9C%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="账户"><a href="#账户" class="headerlink" title="账户"></a>账户</h2><p>添加用户<br>修改密码</p><h2 id="cat、more、less"><a href="#cat、more、less" class="headerlink" title="cat、more、less"></a>cat、more、less</h2><h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><h2 id="GDB"><a href="#GDB" class="headerlink" title="GDB"></a>GDB</h2><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><p>Bash版本信息 <code>bash -v</code><br>Linux系统版本 <code>uname -o</code><br>系统当前日期时间信息 <code>date</code><br>所有已经登录到系统的用户和登录信息 <code>last </code><br>当前目录位置 <code>pwd</code><br>系统月历 <code>cal</code></p><p>获取当前登录用户名 <code>whoami</code><br>从非root用户切换到root用户 <code>su</code>  <code>su -</code>  <code>su root</code><br>查看帮助 <code>[命令] --help</code> <code>man [命令]</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 命令行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux用户与控制台切换</title>
      <link href="/2022/11/03/Linux%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/11/03/Linux%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><p><strong>root</strong>——超级用户帐号（系统管理员），使用这个帐号可以在系统中做任何事情。</p><p><strong>普通用户</strong>——这个帐号供普通用户使用，可以进行有限的操作。</p><p>打开终端,可以看到</p><p><code>超级用户的提示符是“#”，其他用户的提示符是“$”</code></p><p><strong>root用户与普通用户之间切换?</strong></p><p>普通用户切换到超级用户 <code>su</code>或 <code>su root</code> ,回车,输入密码</p><p>用户切换到其他用户 <code>su 用户名</code> ,回车,输入密码</p><p><code>sudo</code>以root身份执行</p><h2 id="控制台使用"><a href="#控制台使用" class="headerlink" title="控制台使用"></a>控制台使用</h2><p>Linux是一个 真正的 <em>多用户</em> 操作系统，它可以同时接受多个用户登陆。Linux还允许一个用户进行多次登陆，这是因为Linux和UNIX一样，提供了虚拟控制台的访问方式，允许用户在同一时间从不同的 <em>虚拟控制台</em> 进行多次登陆</p><p>一般Linux有六个虚拟控制台(有的版本默认七个)，一个图形界面,其余控制台(纯命令行界面)界面,可以用Alt+ctrl+F1至Alt+ctrl+F6来切换访问</p><blockquote><p>所以,对于不同版本的Linux,组合键与默认界面的对应关系,以实际操作为准</p></blockquote><h3 id="命令行界面与图形界面切换"><a href="#命令行界面与图形界面切换" class="headerlink" title="命令行界面与图形界面切换?"></a>命令行界面与图形界面切换?</h3><ul><li><p>图形界面里,打开终端,输入 <code>init 3</code> 回车,进入命令行界面</p></li><li><p>命令行界面里,登录后,输入 <code>init 5</code> 回车,进入图形界面</p></li></ul><blockquote><p>Linux有两种界面</p><p>GUI(Graphical User Interface)图形用户界面</p><p>CLI(Command Line Interface)命令行界面</p></blockquote><h3 id="终端与命令行界面"><a href="#终端与命令行界面" class="headerlink" title="终端与命令行界面?"></a>终端与命令行界面?</h3><ul><li><p>终端是指GUI中的命令行窗口</p></li><li><p>命令行界面是指CLI,Linux提供的另一种操作界面</p></li></ul><p>Linux操作系统有七种不同的运行级别</p><ul><li>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</li><li>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</li><li>运行级别2：多用户状态(没有NFS)</li><li>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</li><li>运行级别4：系统未使用，保留</li><li>运行级别5：X11控制台，登陆后进入图形GUI模式</li><li>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</li></ul><p>也就是说linux共7种启动方式，模式5是进入图形界面，而模式3是进入命令行界面</p><blockquote><p>意义?</p><p>在图形界面里可以找到系统工具，里面的终端,即可在图形界面中使用控制台shell，就像在windows里使用cmd一样，符合使用windows的人的习惯</p><p>有些人可能不想习惯图形模式，反而习惯dos的命令模式</p><p>切换控制台最大的用处是当一个程序进入死锁或者死循环时,我们可以切换到另一个控制台来关闭这个进程</p><p>大多数服务器基本没有GUI界面,可以节省更多的资源</p></blockquote><h2 id="包管理工具"><a href="#包管理工具" class="headerlink" title="包管理工具"></a>包管理工具</h2><ul><li><p>ubuntu -apt</p></li><li><p>centos-yum</p></li><li><p>redhat-rpm</p></li><li><p>debian-dpkg</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSD、HDD 你都了解多少？</title>
      <link href="/2022/10/26/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/"/>
      <url>/2022/10/26/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  你的电脑内存还有多少呢？不知道大家平时会不会关注这些问题呢，大白的笔记本内存是8+512G的，平时下些基本软件，然后ps和几个编程软件，再来几个大游戏就能见底。更别说在虚拟机装上几个系统，还想让它流畅运行，简直天方夜谭！于是为了进一步优化自己的体验，大白终于在双十一剁手买了一条SSD 980（500G），现在双十一售价在430左右。当然，预算充足最好买1T的啦。</p><ul><li><p>如果你的电脑是因为硬盘老旧而卡顿</p></li><li><p>如果你想和大白一样实现空间自由</p></li><li><p>如果·····（想不到排比句了）</p></li><li><p>如果你也想选购一款性价比超高的硬盘 。那么，大白为你总结了一些关于硬盘和其它存储设备的知识点，避免踩坑！！看完这篇文章，趁着双十一还有优惠，赶紧入手啦！</p></li></ul><blockquote><p>这是全网最全面的硬盘选购指南（为什么说最全呢，因为大白已经把知乎上所有有关回答都看了一遍）</p><p>对于网上那些所谓的“年度最具性价比”、“最适合学生党”，大白总是半信半疑。网络上，科普与广告鱼龙混杂，一不小心就会被割韭菜。所以掌握一些基本知识还是很有必要的！</p></blockquote><h2 id="硬盘基本知识"><a href="#硬盘基本知识" class="headerlink" title="硬盘基本知识"></a>硬盘基本知识</h2><p>想了解的同学可以看一下，想入手硬盘的可以直接看后面的<strong>两种硬盘对比</strong>部分。</p><p><img src="https://s2.loli.net/2022/10/31/7NJVz5QSwprgKP3.png" alt="计算机存储.png"></p><p>如图所示，计算机存储的工作原理：</p><ul><li>计算机先从硬盘中读取数据</li><li>数据从硬盘进入内存条（RAM）</li><li>cpu从内存条中取数据进行运算所以对于计算机而言，硬盘的读取速度决定着平台的启动速度，而不是CPU以及内存条。</li></ul><p>目前市面上的硬盘有固态硬盘（又称SSD盘，新式硬盘）、机械硬盘（HHD传统硬盘）、混合硬盘（HHD 基于传统机械硬盘诞生出来的新硬盘）</p><p>最主要的只是前两种，<strong>固态硬盘（SSD）</strong>和  <strong>机械硬盘（HDD）</strong>.（<strong>为什么混合硬盘没人买？</strong>看文末的回答）</p><h2 id="两种硬盘对比（两者相对而言）"><a href="#两种硬盘对比（两者相对而言）" class="headerlink" title="两种硬盘对比（两者相对而言）"></a>两种硬盘对比（两者相对而言）</h2><p><img src="https://s2.loli.net/2022/10/31/GdtexObMoSfRLml.png" alt="硬盘速度对比.png"></p><p><strong>速度方面，可以说，高下立判   但是考虑到一些其他因素，有些时候并不总是SSD性价比高</strong></p><h3 id="固态硬盘"><a href="#固态硬盘" class="headerlink" title="固态硬盘"></a>固态硬盘</h3><blockquote><p>优点：轻巧、耐摔、无噪音、速度快</p></blockquote><blockquote><p>缺点：相对来说贵一点、数据不容易恢复</p></blockquote><p><img src="https://s2.loli.net/2022/10/31/buFILTRK47nl2cB.jpg" alt="SSD结构图"></p><p>影响固态硬盘速度的主要因素有：</p><ul><li><p>协议和接口类型（主要）</p></li><li><p>固态的内部构件（主控、闪存颗粒、外置缓存）</p><blockquote><p>一般来说，寿命和性能：3D Xpoint颗粒(inter)&gt; SQL颗粒&gt;MLC颗粒&gt;TLC颗粒(最常见)&gt;QLC颗粒</p><p>大白在这就只讲讲协议和接口层面，看完选一款合适的固态硬盘，完全够用。如果你想了解更深层的因素</p><p>可以去看看这篇文章<a href="https://www.reneelab.com.cn/difference-slc-mlc-tlc.html">链接</a></p></blockquote></li></ul><h3 id="先来基本了解一下协议和接口类型："><a href="#先来基本了解一下协议和接口类型：" class="headerlink" title="先来基本了解一下协议和接口类型："></a>先来基本了解一下协议和接口类型：</h3><p><img src="https://s2.loli.net/2022/10/31/MfecN7lodUua3Qh.jpg" alt="协议"></p><blockquote><p>协议：数据传输的标准，是数据传输双方共同遵循的一种规定准则.(NVME 快 , AHCI 慢)</p><p>总线通道：电脑元器件之间的通道，决定了硬盘速度的上限.(PCIE 快，SATA 慢)</p><p>接口：就是物理层面的接口，接口会和总线绑定，会影响硬盘速度上线，还会影响一个硬盘的外观（SATA 慢 ，PCIE  快，M.2 有三种设计    具体看文末<strong>关于M.2插槽兼容性和协议模式</strong>）</p></blockquote><p>根据常见的接口类型，固态硬盘大致可分为两类：SATA固态硬盘和M.2固态硬盘。</p><h3 id="SATA固态"><a href="#SATA固态" class="headerlink" title="SATA固态"></a>SATA固态</h3><img src="https://s2.loli.net/2022/10/31/r6H5BNnKltDI91s.jpg" alt="SATA固态" style="zoom:50%;" /><p>SATA固态硬盘外表呈小方块状，属于基础级别，仍采用传统硬盘的SATA接口,但该接口仍广泛应用于主流硬盘中 此外，虽然SATA固态硬盘只能走SATA总线，仅支持AHCI协议，但是SATA固态硬盘的速度比传统机械硬盘的速度要快，大概是机械硬盘的四倍（大概五百兆每秒左右）</p><h3 id="M-2固态"><a href="#M-2固态" class="headerlink" title="M.2固态"></a>M.2固态</h3><p><img src="https://s2.loli.net/2022/10/31/LB4AtSxj31Feun8.jpg" alt="M.2固态"></p><p>M.2固态是长条状，硬盘体积较小，也更轻薄，特别适用于笔记本电脑。M.2固态硬盘兼容AHCI和NVMe两种协议，可以走SATA或PCI-e通道。需要注意的是，并非所有M.2固态硬盘比SATA硬盘要快，因为M.2固态硬盘的速度也取决于其匹配的协议和通道。（速度从一千到几千兆每秒不等）</p><blockquote><p>对于品牌，大白不多做评价，也不会推荐，大白只总结知识点！</p></blockquote><table><thead><tr><th></th><th align="center">WD10EZEX标配</th><th align="center">860 EVO</th><th align="center">980</th><th align="center">980 PRO</th></tr></thead><tbody><tr><td>硬盘类型</td><td align="center">机械硬盘</td><td align="center">SATA固态</td><td align="center">M.2固态</td><td align="center">M.2固态</td></tr><tr><td>容量</td><td align="center">1TB</td><td align="center">1TB</td><td align="center">1TB</td><td align="center">1TB</td></tr><tr><td>价格</td><td align="center">270</td><td align="center">1000</td><td align="center">800</td><td align="center">1600</td></tr><tr><td>上层协议</td><td align="center">无</td><td align="center">AHCI</td><td align="center">NVME</td><td align="center">NVME</td></tr><tr><td>通道</td><td align="center">无</td><td align="center">SATA</td><td align="center">PCIE</td><td align="center">PCIE</td></tr><tr><td>读速</td><td align="center">60-150MB&#x2F;s</td><td align="center">550MB&#x2F;s</td><td align="center">3500MB&#x2F;s</td><td align="center">6900MB&#x2F;s</td></tr><tr><td>写速</td><td align="center">60-150MB&#x2F;s</td><td align="center">520MB&#x2F;s</td><td align="center">3000MB&#x2F;s</td><td align="center">5000MB&#x2F;s</td></tr></tbody></table><blockquote><p>细心的同学已经发现了，明明980和980PRO协议和接口都一样，为什么980PRO能快一倍呢！</p><p>这就涉及到另一个因素，内部构造。如果你想了解更深层的因素可以去看看这篇文章<a href="">链接</a></p></blockquote><h3 id="机械硬盘"><a href="#机械硬盘" class="headerlink" title="机械硬盘"></a>机械硬盘</h3><blockquote><p>优点：容量大 、便宜、数据恢复难度低 </p></blockquote><blockquote><p>缺点：读写速度慢</p></blockquote><p><img src="https://s2.loli.net/2022/10/31/XN9ShIt52gnGFzV.jpg" alt="HDD结构图"></p><p>机械硬盘的原理：电磁存储</p><p>它的外形有些像近现代的留声机。磁盘旋转，磁头在磁盘表面移动，读取或写入数据，转速越快，读写速度越快（速度往往不会超过两百兆每秒）</p><p>2021年，是机械硬盘诞生的第64个年头，可以说，作为存储数据的硬件设备，机械硬盘的技术已经十分成熟了</p><h3 id="关于数据恢复"><a href="#关于数据恢复" class="headerlink" title="关于数据恢复"></a>关于数据恢复</h3><ul><li>对于机械硬盘来说，就像是写铅笔字，可以说是无限次的写入次数</li><li>对于固态硬盘来说，就像是写钢笔字，固态硬盘中需要把有效数据抄到草稿纸上，将原先的一整页撕掉，然后再把新的数据和草稿上的有效数据放回去。但其实，无需担心固态硬盘的读写次数限制，比如市面上一款120GB的固态硬盘是，按照1000次的P&#x2F;E写入次数计算，这块硬盘的写入总量应该是120×1000&#x3D;120000GB，也就是你需要写入至少120TB的文件才会损坏，如果是每天写满120GB，要写1000天，也就是2.7年.而且，这个数据是个保底数据，就是说到了这个次数也不一定会坏，就算坏也不是马上就坏，可能会继续坚挺下去</li></ul><h3 id="关于M-2插槽兼容性和协议模式-买固态必看"><a href="#关于M-2插槽兼容性和协议模式-买固态必看" class="headerlink" title="关于M.2插槽兼容性和协议模式(买固态必看)"></a>关于M.2插槽兼容性和协议模式(买固态必看)</h3><p><strong>M.2固态的接口</strong></p><p>M.2固态的接口设计有3种，分别是 <strong>B key</strong>、**M key **和 <strong>B &amp; M key</strong>. 主要了解后两种，单独采用 **B key **接口的设备并不常见</p><img src="https://s2.loli.net/2022/10/31/GFzhncJdVgDWZaR.jpg" alt="M.2接口 " style="zoom:150%;" /><ul><li><p>M key，支持PCI-e x4通道（较快的）</p></li><li><p>B &amp; M key，在B key基础上扩展兼容性，既可以插B key的插槽，也可以插M key的插槽，但这种接口一般只支持SATA或PCI-e x2通道</p></li></ul><p><img src="https://s2.loli.net/2022/10/31/DvoIBl3Cy8MfOPs.jpg"></p><blockquote><p>所以M key接口才是更快的M.2固态，购买时认准一个缺口的M.key就行</p></blockquote><p><strong>M.2的尺寸</strong></p><p>根据长度又分为 <strong>2240 2260 2280 22110</strong></p><p>这里的<strong>22</strong>指的是固态的宽度，**40、60、80、110 **是长度</p><blockquote><p>（购买之前一定要了解清楚自己的电脑接口支持的固态硬盘尺寸哦）</p></blockquote><h3 id="为什么混合硬盘买的人少？（问题来自知乎，大白综合回答总结）"><a href="#为什么混合硬盘买的人少？（问题来自知乎，大白综合回答总结）" class="headerlink" title="为什么混合硬盘买的人少？（问题来自知乎，大白综合回答总结）"></a>为什么混合硬盘买的人少？（问题来自知乎，大白综合回答总结）</h3><p>混合硬盘<strong>性价比</strong>比不上SSD，是介于固态硬盘和机械硬盘的<strong>过渡产品</strong>。固态硬盘初期价格太高，折中出了这款混合硬盘</p><p>优点是复读取速度快</p><p>缺点是本质上还是机械硬盘</p><p>混合硬盘的闪存缓存一般只有8G，工作原理就是把读取多的部分放到闪存里，从而实现读取多的东西比较快 并不能实现全盘加速</p><p>混合硬盘放在2021年的今天这种SSD价格很低的情况下显得格格不入，但是这玩意刚出的时候那是真的厉害</p><p>放在10年前的2011年那时候的系统大小普遍不到4G</p><p>当时主流系统还是使用window xp而且安装完成后大小也才3G多</p><p>当时的混合硬盘SSD部分都是达到8G以上</p><p>当时的游戏大小也不超过8G，自然是香饽饽</p><h2 id="另外其他存储设备TF卡和SD卡、U盘和移动硬盘"><a href="#另外其他存储设备TF卡和SD卡、U盘和移动硬盘" class="headerlink" title="另外其他存储设备TF卡和SD卡、U盘和移动硬盘"></a>另外其他存储设备TF卡和SD卡、U盘和移动硬盘</h2><blockquote><p>多图警告⚠</p></blockquote><img src="https://s2.loli.net/2022/10/31/WFDLRMKjz84bpv7.jpg" style="zoom:70%;" /><p>TF卡由Motorola与SanDisk（闪迪）共同推出的最新一代的记忆卡规格。2004年推出。<strong>体积较小</strong>  TF卡主要于手机使用，但因它拥有体积极小的优点，随着不断提升的容量，它慢慢开始于GPS设备、便携式音乐播放器和一些快闪存储器盘中使用。</p><img src="https://s2.loli.net/2022/10/31/d1qbNWyLrk4SQpt.jpg" style="zoom:50%;" /><p>SD卡由日本松下、东芝及美国SanDisk公司于1999年8月共同开发研制。**体积大，有保护开关 **SD卡被广泛地于便携式装置上使用，例如数码相机、个人数码助理(PDA)和多媒体播放器等。</p><blockquote><p><strong>U盘和移动硬盘的比较</strong></p><p>使用寿命：U盘&lt;移动硬盘</p><p>速度上：U盘&lt;移动硬盘</p><p>便携性：U盘&gt;移动硬盘</p></blockquote><blockquote><p>移动硬盘无非就是硬盘加个壳连了根线，你可以当大号U盘使，但方不方便那就只有自己知道了。</p><p><strong>和普通硬盘有什么区别？</strong></p><p>寿命会更短。经常性拔插，并且因为是机体外，更容易受到颠簸损伤。</p></blockquote><p>关于U盘</p><p>补充一个小知识：U盘根据协议分为U盘2.0和U盘3.0    电脑的USB接口也会分2.0和3.0</p><ul><li><p>2.0的传输速度在几兆到几十兆每秒左右(接口中挡片是黑色的)</p></li><li><p>3.0的速度有几十兆到一百多兆每秒（接口中挡片是蓝色的）</p><img src="https://s2.loli.net/2022/10/31/qfbNRVuhFytzdT5.webp" style="zoom:50%;" /><p>（左边的是2.0右边的是3.0  ）</p><blockquote><p>3.0的U盘要配上3.0 USB 接口才能真正达到3.0的速度！</p></blockquote></li></ul><h2 id="加装了硬盘会有哪些变化"><a href="#加装了硬盘会有哪些变化" class="headerlink" title="加装了硬盘会有哪些变化"></a>加装了硬盘会有哪些变化</h2><ul><li><p>首先来说，看着空空的新盘，内存焦虑没有了。想存啥存啥，想下啥下啥</p></li><li><p>很多人说，装新固态，开机会变快。可是，系统不是在C盘嘛，难道也能变快？怎么说呢，大概是大白的电脑本来就不算慢，这点没怎么感受到。等下回把系统迁移到新盘试试，说不定能起飞</p></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>选购硬盘最好还是选大品牌的，不能光看数据和指标，内部颗粒芯片的质量也很重要，只有大品牌才能提供保障。</p><ul><li><p>明确自己的需求，是为了速度还是只是用来存储音视频图片文件</p></li><li><p>在购买固态硬盘时，要确认你的电脑主板支持哪种接口和通道</p></li><li><p>根据自己电脑的支持的接口和协议有针对性地选择方案</p></li><li><p>选择合适的品牌和价位</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 硬盘 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
