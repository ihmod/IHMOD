<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL冲突</title>
      <link href="/posts/8051b252.html"/>
      <url>/posts/8051b252.html</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p><img src="https://s2.loli.net/2023/05/09/Cy4auMdBHeRZE8K.png" alt="image-20230509161532585"></p><ul><li>phpstudy中的MySQL的服务启动又关掉了，无法正常使用数据库</li><li>启动过phpstudy的MySQL后（没起来），本地的MySQL连接工具也无法连接了</li></ul><h3 id="分析解决问题"><a href="#分析解决问题" class="headerlink" title="分析解决问题"></a>分析解决问题</h3><p>其实问题往简单说就一句话，有两个MySQL，运行时冲突了导致都不能正常运行，那我们只要卸载其中一个，就可以正常使用啦。</p><p><img src="https://s2.loli.net/2023/05/10/bWVIZEJsUyX5LAr.png" alt="5.7.26"></p><p><img src="https://s2.loli.net/2023/05/09/HR3yTcsGJnjtoWb.png" alt="5.7.38"></p><ul><li>删除服务</li><li>删除环境变量</li></ul><p>但是我有一种执念，又想保留原来的MySQL，又想phpstudy里的MySQL能正常使用。<br>于是开始查资料、分析到底是哪里冲突了</p><ul><li><p>推测一：端口占用</p><p>phpstudy也启动了一个MySQL服务，占用了默认的3306端口，结果哪个都不能正常启动</p><p>排错方法：</p><p>查看端口占用情况</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">netstat -ano|findstr &quot;3306&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有进程占用则杀掉</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#根据进程号查进程名，把1111替换成你查到的进程号tasklist|findstr &quot;1111&quot;；#根据进程名称杀进程：taskkill &#x2F;f &#x2F;t &#x2F;im  进程名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再尝试启动<br>我这里没有发现端口占用，显然不适用</p></li><li><p>推测二：缺少服务</p><p>先查看服务启动了没有</p><pre class="line-numbers language-none"><code class="language-none">#win+r,输入services.msc#回车<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="https://s2.loli.net/2023/05/09/Vbvr5HINcO4LDFx.png" alt="image-20230509163523300"></p><p>这个服务没有起来，而且路径显示的是本地的MySQL执行文件（本地5.7.38，phpstudy是5.7.26）</p><p>也就是说要phpstudy不能启动是因为没有对应的服务</p><blockquote><p>那能不能为phpstudy的MySQL注册一个服务呢，两个服务井水不犯河水，各自软件使用各自的MySQL服务在同一个端口(3306)，只要不在同一时间，这样子是否可行呢？</p></blockquote><p>注册MySQL服务<br>进入小皮的MySQL存放路径下的bin目录（例如D:\phpstudy_pro\Extensions\MySQL5.7.26\bin）<br>在此路径下打开CMD</p><blockquote><p>【mysqld】：是mysql的核心程序，用于管理mysql的数据库文件以及用户的请求操作，位于bin目录下</p><p>​此处进入小皮的MySQL的bin目录下使用，是因为Windows cmd的命令查找顺序</p><ul><li>1.从当前工作目录查找</li><li>2.环境变量系统PATH</li><li>3.环境变量用户PATH</li></ul></blockquote><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">#注册MySQL服务，后面加服务名mysqld  -install   服务名字 #移除MySQL服务mysqld -remove   服务名字 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/05/09/q59FlYueoBr6WEU.png" alt="image-20230509185552733"></p><p>测试这两个服务能不能正常启动、连接到数据库</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">net start MySQL(MySQL2)               #启动服务<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来要用到mysql命令登录，现在系统环境变量path里设置一下命令路径</p><p><img src="https://s2.loli.net/2023/05/09/qBbXfoLl5vSTA4k.png" alt="image-20230509193026660"></p><p>越往上，优先级越高</p><p><img src="https://s2.loli.net/2023/05/09/GHsQ9AVlRXOfTJg.png" alt="image-20230509193337253"></p><p>在path中交换顺序就可以切换mysql了</p><p><img src="https://s2.loli.net/2023/05/09/H1nUsiWKSPcyV3A.png" alt="image-20230509193813541"></p><p>测试登录情况</p><pre class="line-numbers language-none"><code class="language-none">mysql -u root -p            #登录用户名root,使用登录密码<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>本地MySQL</p><p><img src="https://s2.loli.net/2023/05/09/Nw69YOAd73pjXVk.png" alt="image-20230509214220392"></p><p>小皮MySQL</p><p><img src="https://s2.loli.net/2023/05/09/DbwShfJIesCGZ32.png" alt="image-20230509205017991"></p><p>报错了，Access denied for user ‘root‘@’localhost’ (using password: YES)，即密码不对，连不上</p><p>这时候想起来小皮的数据库根本没有初始化</p><pre class="line-numbers language-none"><code class="language-none">mysqld --initialize --console           #执行此命令要保证data目录是空的       <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初始化后用户默认为root，还有一个密码，登录后就可以更改密码</p><p>data目录下生成了一个MySQL连接的基本的数据库</p><p><img src="https://s2.loli.net/2023/05/10/LYFtpHk7qesdPiJ.png" alt="image-20230509210922720"></p><p>修改密码时报错</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">mysql&gt; use mysql;ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>具体参考：</p><a class="btn-beautify blue" href="https://blog.csdn.net/muziljx/article/details/81541896"   title="报错处理"><i class="fa fa-arrow-circle-right"></i><span>报错处理</span></a><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>至此大问题基本解决，两个MySQL服务都能起来，各自的连各自的数据库，但是是不是每次用完这个应用都要关闭对应的MySQL服务，再开另一个，还要修改系统环境变量，那有没有办法同时跑呢？</p><ul><li>首先端口肯定不能一样，修改小皮的MySQL的配置文件my.ini修改端口为3305或者其他非常用的端口</li></ul><p>但是命令行能跑，我们终归还是要回到开发环境，客户端能跑吗？</p><p>测试了一下，还是不能，崩溃，感情做了半天无用功捏？</p><p>但是还是得到了一些信息</p><p>情况：</p><ul><li>重启后Navicat（代表使用本地MySQL）可以正常启动，phpstudy启动后，Navicat也无法启动了。这里边肯定冲突了，可以操作的地方都操作了，理论是完全可行。</li><li>重启后小皮也无法启动MySQL</li></ul><p>分析：</p><p>还说要有影响因素就应该是注册表那类定义的优先级问题了，导致小皮启动MySQL时去找的默认的服务，我们自己注册的服务没有被识别，所以没起来</p><p>去网上查资料发现这样一个说法</p><p><img src="https://s2.loli.net/2023/05/10/FpLUakTiAyxwV52.png" alt="image-20230510104003786"></p><p>为了找出问题</p><ul><li><p>把本地的服务名改成MySQL1，小皮改成MySQL2，小皮和本地的Navicat能同时启动，但是MySQL2根本没启动</p></li><li><p>禁用MySQL2，发现本地可以跑小皮也可以跑，那小皮是跑在MySQL1上吗</p></li><li><p>禁用MySQL1，发现小皮还是可以启动，本地起不来，MySQL2服务也没起来，卧槽卧槽，这啥意思，小皮根本没用咱的服务！</p><p>看看端口，进程名</p></li></ul><pre class="line-numbers language-none"><code class="language-none">netstat -ano|findstr &quot;80&quot;tasklist|findstr &quot;15588&quot;taskkill &#x2F;f &#x2F;t &#x2F;im 进程名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>果然，小皮的数据库跑起来后后台就有个mysqld.exe的进程</p><p><img src="https://s2.loli.net/2023/05/10/4jzdheInVkaGWrN.png" alt="xiaop"></p><p>那这个是用的本地的还是集成环境的MySQL呢？</p><p>对比data目录下的数据库就可以知道两个连接下的数据库不一样</p><p><img src="https://s2.loli.net/2023/05/10/8r4hfUjN7Kgnlpi.png" alt="image-20230510132803973"></p><p>我们用数据库连接工具连一下</p><p>改一下连接属性</p><p><img src="https://s2.loli.net/2023/05/10/mAk1PecSGXKJgr4.png" alt="image-20230510132605691"></p><p><img src="https://s2.loli.net/2023/05/10/LASfGn4l2hT8YKt.png" alt="image-20230510132655948"></p><p>ok，显示的是小皮的数据库，说明小皮有自己的连接方式，并不依赖于服务</p><p>我们删除MySQL2服务再解除MySQL1的禁用，就可以了(对于Navicat连不上MySQL，请检查服务是否启动了，可以设置开机自启动)</p><p>至此，本地和小皮的数据库冲突解决</p><p><img src="https://s2.loli.net/2023/05/10/Jmlh4GoDYBHyXQr.png" alt="image-20230510134054259"></p>]]></content>
      
      
      <categories>
          
          <category> 疑惑 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> phpstudy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis-Plus学习</title>
      <link href="/posts/cc2af2d6.html"/>
      <url>/posts/cc2af2d6.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、MyBatis-Plus"><a href="#一、MyBatis-Plus" class="headerlink" title="一、MyBatis-Plus"></a>一、MyBatis-Plus</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p><a href="https://github.com/baomidou/mybatis-plus">MyBatis-Plus (opens new window)</a>（简称 MP）是一个 <a href="https://www.mybatis.org/mybatis-3/">MyBatis (opens new window)</a>的增强工具，在 MyBatis 的基础上只做增强不做改变，为简化开发、提高效率而生。</p><blockquote><p>我们的愿景是成为 MyBatis 最好的搭档，就像 <a href="https://baomidou.com/img/contra.jpg">魂斗罗</a> 中的 1P、2P，基友搭配，效率翻倍。</p></blockquote><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/relationship-with-mybatis.png" alt="img"></p><h2 id="2-特性"><a href="#2-特性" class="headerlink" title="2.特性"></a>2.特性</h2><ul><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响，如丝般顺滑</li><li><strong>损耗小</strong>：启动即会自动注入基本 CURD，性能基本无损耗，直接面向对象操作</li><li><strong>强大的 CRUD 操作</strong>：内置通用 Mapper、通用 Service，仅仅通过少量配置即可实现单表大部分 CRUD 操作，更有强大的条件构造器，满足各类使用需求</li><li><strong>支持 Lambda 形式调用</strong>：通过 Lambda 表达式，方便的编写各类查询条件，无需再担心字段写错</li><li><strong>支持主键自动生成</strong>：支持多达 4 种主键策略（内含分布式唯一 ID 生成器 - Sequence），可自由配置，完美解决主键问题</li><li><strong>支持 ActiveRecord 模式</strong>：支持 ActiveRecord 形式调用，实体类只需继承 Model 类即可进行强大的 CRUD 操作</li><li><strong>支持自定义全局通用操作</strong>：支持全局通用方法注入（ Write once, use anywhere ）</li><li><strong>内置代码生成器</strong>：采用代码或者 Maven 插件可快速生成 Mapper 、 Model 、 Service 、 Controller 层代码，支持模板引擎，更有超多自定义配置等您来使用</li><li><strong>内置分页插件</strong>：基于 MyBatis 物理分页，开发者无需关心具体操作，配置好插件之后，写分页等同于普通 List 查询</li><li><strong>分页插件支持多种数据库</strong>：支持 MySQL、MariaDB、Oracle、DB2、H2、HSQL、SQLite、Postgre、SQLServer 等多种数据库</li><li><strong>内置性能分析插件</strong>：可输出 SQL 语句以及其执行时间，建议开发测试时启用该功能，能快速揪出慢查询</li><li><strong>内置全局拦截插件</strong>：提供全表 delete 、 update 操作智能分析阻断，也可自定义拦截规则，预防误操作</li></ul><h2 id="3-支持数据库"><a href="#3-支持数据库" class="headerlink" title="3.支持数据库"></a>3.支持数据库</h2><blockquote><p>任何能使用 <code>MyBatis</code> 进行 CRUD, 并且支持标准 SQL 的数据库，具体支持情况如下，如果不在下列表查看分页部分教程 PR 您的支持。</p></blockquote><ul><li>MySQL，Oracle，DB2，H2，HSQL，SQLite，PostgreSQL，SQLServer，Phoenix，Gauss ，ClickHouse，Sybase，OceanBase，Firebird，Cubrid，Goldilocks，csiidb</li><li>达梦数据库，虚谷数据库，人大金仓数据库，南大通用(华库)数据库，南大通用数据库，神通数据库，瀚高数据库</li></ul><h2 id="4-框架结构"><a href="#4-框架结构" class="headerlink" title="4.框架结构"></a>4.框架结构</h2><img src="https://baomidou.com/img/mybatis-plus-framework.jpg" alt="framework" style="zoom:50%;" /><h2 id="5-官方地址"><a href="#5-官方地址" class="headerlink" title="5.官方地址"></a>5.官方地址</h2><blockquote><p><strong>官方网站：</strong><a href="https://baomidou.com/">https://baomidou.com/</a></p><p><strong>官方文档：</strong><a href="https://baomidou.com/pages/24112f/">https://baomidou.com/pages/24112f/</a></p></blockquote><h1 id="二、入门案例"><a href="#二、入门案例" class="headerlink" title="二、入门案例"></a>二、入门案例</h1><h2 id="1-开发环境"><a href="#1-开发环境" class="headerlink" title="1.开发环境"></a>1.开发环境</h2><ul><li><strong>IDE：IDEA 2019.3.5</strong></li><li><strong>JDK：JDK8+</strong></li><li><strong>构建工具：Maven 3.5.4</strong></li><li><strong>MySQL：MySQL 8.0.24</strong></li><li><strong>Navicat：Navicat Premium 15</strong></li><li><strong>Spring Boot：2.6.7</strong></li><li><strong>MyBatis-Plus：3.5.1</strong></li></ul><h2 id="2-建库建表"><a href="#2-建库建表" class="headerlink" title="2.建库建表"></a>2.建库建表</h2><ul><li><p><strong>打开Navicat运行以下SQL脚本进行建库建表</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE DATABASE &#96;mybatis_plus&#96; &#x2F;*!40100 DEFAULT CHARACTER SET utf8mb4 *&#x2F;; use &#96;mybatis_plus&#96;; CREATE TABLE &#96;user&#96; (     &#96;id&#96; bigint(20) NOT NULL COMMENT &#39;主键ID&#39;,     &#96;name&#96; varchar(30) DEFAULT NULL COMMENT &#39;姓名&#39;,     &#96;age&#96; int(11) DEFAULT NULL COMMENT &#39;年龄&#39;,     &#96;email&#96; varchar(50) DEFAULT NULL COMMENT &#39;邮箱&#39;,     PRIMARY KEY (&#96;id&#96;) ) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>插入几条测试数据</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">INSERT INTO user (id, name, age, email) VALUES (1, &#39;Jone&#39;, 18, &#39;test1@baomidou.com&#39;), (2, &#39;Jack&#39;, 20, &#39;test2@baomidou.com&#39;), (3, &#39;Tom&#39;, 28, &#39;test3@baomidou.com&#39;), (4, &#39;Sandy&#39;, 21, &#39;test4@baomidou.com&#39;), (5, &#39;Billie&#39;, 24, &#39;test5@baomidou.com&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-创建工程"><a href="#3-创建工程" class="headerlink" title="3.创建工程"></a>3.创建工程</h2><ul><li><p><strong>使用<code>Spring Initializer</code>快速初始化一个 Spring Boot 工程</strong></p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519140839640.png" alt="image-20220519140839640" style="zoom:80%;" /><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519141335981.png" alt="image-20220519141335981" style="zoom:80%;" /><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519141737405.png" alt="image-20220519141737405" style="zoom:80%;" /><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519141849937.png" alt="image-20220519141849937" style="zoom:80%;" /></li><li><p><strong>引入<code>MyBatis-Plus</code>的依赖</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>安装<code>Lombok</code>插件</strong></p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519143257305.png" alt="image-20220519143257305" style="zoom:80%;" /></li></ul><h2 id="4-配置编码"><a href="#4-配置编码" class="headerlink" title="4.配置编码"></a>4.配置编码</h2><ul><li><p><strong>配置<code>application.yml</code>文件</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">#配置端口server:  port: 80spring:  #配置数据源  datasource:    #配置数据源类型    type: com.zaxxer.hikari.HikariDataSource    #配置连接数据库的信息    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis_plus?characterEncoding&#x3D;utf-8&amp;useSSL&#x3D;false    username: &#123;username&#125;    password: &#123;password&#125;#MyBatis-Plus相关配置mybatis-plus:  configuration:    #配置日志    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>在 Spring Boot 启动类中添加 <code>@MapperScan</code> 注解，扫描 Mapper 文件夹</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootApplication@MapperScan(&quot;指定Mapper接口所在的包&quot;)public class MybatisPlusDemoApplication &#123;public static void main(String[] args) &#123;SpringApplication.run(MybatisPlusDemoApplication.class, args);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>编写实体类 <code>User.java</code>（此处使用了 Lombok 简化代码）</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Datapublic class User &#123;    private Long id;    private String name;    private Integer age;    private String email;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>编写 Mapper 包下的 <code>UserMapper</code>接口</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="5-测试查询"><a href="#5-测试查询" class="headerlink" title="5.测试查询"></a>5.测试查询</h2><ul><li><p><strong>编写一个测试类<code>MyBatisPlusTest.java</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@SpringBootTestpublic class MyBatisPlusTest &#123;    @Resource    private UserMapper userMapper;    &#x2F;**     * 测试查询所有数据     *&#x2F;    @Test    void testSelectList()&#123;        &#x2F;&#x2F;通过条件构造器查询一个list集合，若没有条件，则可以设置null为参数        List&lt;User&gt; users &#x3D; userMapper.selectList(null);        users.forEach(System.out::println);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>控制台打印查询结果</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220519150454211.png" alt="image-20220519150454211"></p></li></ul><h1 id="三、增删改查"><a href="#三、增删改查" class="headerlink" title="三、增删改查"></a>三、增删改查</h1><h2 id="1-BaseMapper-lt-T-gt"><a href="#1-BaseMapper-lt-T-gt" class="headerlink" title="1.BaseMapper&lt;T&gt;"></a>1.BaseMapper&lt;T&gt;</h2><blockquote><p>说明:</p><ul><li>通用 CRUD 封装BaseMapper 接口，为 <code>Mybatis-Plus</code> 启动时自动解析实体表关系映射转换为 <code>Mybatis</code> 内部对象注入容器</li><li>泛型 <code>T</code> 为任意实体对象</li><li>参数 <code>Serializable</code> 为任意类型主键 <code>Mybatis-Plus</code> 不推荐使用复合主键约定每一张表都有自己的唯一 <code>id</code> 主键</li><li>对象 <code>Wrapper</code> 为条件构造器</li></ul></blockquote><p>MyBatis-Plus中的基本CRUD在内置的BaseMapper中都已得到了实现，因此我们继承该接口以后可以直接使用。</p><p>本次演示的CRUD操作不包含参数带有条件构造器的方法，关于条件构造器将单独在一个章节进行演示。</p><hr><blockquote><p><strong>BaseMapper中提供的CRUD方法：</strong></p></blockquote><ul><li><p><strong>增加：Insert</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 插入一条记录int insert(T entity);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>删除：Delete</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 根据 entity 条件，删除记录int delete(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; wrapper);&#x2F;&#x2F; 删除（根据ID 批量删除）int deleteBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);&#x2F;&#x2F; 根据 ID 删除int deleteById(Serializable id);&#x2F;&#x2F; 根据 columnMap 条件，删除记录int deleteByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>修改：Update</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 根据 whereWrapper 条件，更新记录int update(@Param(Constants.ENTITY) T updateEntity, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; whereWrapper);&#x2F;&#x2F; 根据 ID 修改int updateById(@Param(Constants.ENTITY) T entity);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>查询：Selete</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 根据 ID 查询T selectById(Serializable id);&#x2F;&#x2F; 根据 entity 条件，查询一条记录T selectOne(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);&#x2F;&#x2F; 查询（根据ID 批量查询）List&lt;T&gt; selectBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);&#x2F;&#x2F; 根据 entity 条件，查询全部记录List&lt;T&gt; selectList(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);&#x2F;&#x2F; 查询（根据 columnMap 条件）List&lt;T&gt; selectByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);&#x2F;&#x2F; 根据 Wrapper 条件，查询全部记录List&lt;Map&lt;String, Object&gt;&gt; selectMaps(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);&#x2F;&#x2F; 根据 Wrapper 条件，查询全部记录。注意： 只返回第一个字段的值List&lt;Object&gt; selectObjs(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);&#x2F;&#x2F; 根据 entity 条件，查询全部记录（并翻页）IPage&lt;T&gt; selectPage(IPage&lt;T&gt; page, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);&#x2F;&#x2F; 根据 Wrapper 条件，查询全部记录（并翻页）IPage&lt;Map&lt;String, Object&gt;&gt; selectMapsPage(IPage&lt;T&gt; page, @Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);&#x2F;&#x2F; 根据 Wrapper 条件，查询总记录数Integer selectCount(@Param(Constants.WRAPPER) Wrapper&lt;T&gt; queryWrapper);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-调用Mapper层实现CRUD"><a href="#2-调用Mapper层实现CRUD" class="headerlink" title="2.调用Mapper层实现CRUD"></a>2.调用Mapper层实现CRUD</h2><h3 id="2-1插入"><a href="#2-1插入" class="headerlink" title="2.1插入"></a>2.1插入</h3><hr><blockquote><p><strong>最终执行的结果，所获取的id为1527206783590903810</strong></p><p><strong>这是因为MyBatis-Plus在实现插入数据时，会默认基于雪花算法的策略生成id</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;**  * 测试插入一条数据  * MyBatis-Plus在实现插入数据时，会默认基于雪花算法的策略生成id  *&#x2F;@Testpublic void testInsert()&#123;    User user &#x3D; new User();    user.setName(&quot;Vz&quot;);    user.setAge(21);    user.setEmail(&quot;vz@oz6.cn&quot;);    int result &#x3D; userMapper.insert(user);    System.out.println(result &gt; 0 ? &quot;添加成功！&quot; : &quot;添加失败！&quot;);    System.out.println(&quot;受影响的行数为：&quot; + result);    &#x2F;&#x2F;1527206783590903810（当前 id 为雪花算法自动生成的id）    System.out.println(&quot;id自动获取&quot; + user.getId());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2删除"><a href="#2-2删除" class="headerlink" title="2.2删除"></a>2.2删除</h3><hr><h4 id="a、根据ID删除数据"><a href="#a、根据ID删除数据" class="headerlink" title="a、根据ID删除数据"></a>a、根据ID删除数据</h4><blockquote><p><strong>调用方法：int deleteById(Serializable id);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;**  * 测试根据id删除一条数据  *&#x2F;@Testpublic void testDeleteById()&#123;    int result &#x3D; userMapper.deleteById(1527206783590903810L);    System.out.println(result &gt; 0 ? &quot;删除成功！&quot; : &quot;删除失败！&quot;);    System.out.println(&quot;受影响的行数为：&quot; + result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b、根据ID批量删除数据"><a href="#b、根据ID批量删除数据" class="headerlink" title="b、根据ID批量删除数据"></a>b、根据ID批量删除数据</h4><blockquote><p><strong>调用方法：int deleteBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;**  * 测试通过id批量删除数据  *&#x2F;@Testpublic void testDeleteBatchIds()&#123;    List&lt;Long&gt; ids &#x3D; Arrays.asList(6L,7L,8L);    int result &#x3D; userMapper.deleteBatchIds(ids);    System.out.println(result &gt; 0 ? &quot;删除成功！&quot; : &quot;删除失败！&quot;);    System.out.println(&quot;受影响的行数为：&quot; + result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="c、根据Map条件删除数据"><a href="#c、根据Map条件删除数据" class="headerlink" title="c、根据Map条件删除数据"></a>c、根据Map条件删除数据</h4><blockquote><p><strong>调用方法：int deleteByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;**   * 测试根据Map集合中所设置的条件删除数据   *&#x2F;@Testpublic void testDeleteByMap()&#123;    &#x2F;&#x2F;当前演示为根据name和age删除数据    &#x2F;&#x2F;执行SQL为：DELETE FROM user WHERE name &#x3D; ? AND age &#x3D; ?    Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();    map.put(&quot;name&quot;,&quot;Vz&quot;);    map.put(&quot;age&quot;,21);    int result &#x3D; userMapper.deleteByMap(map);    System.out.println(result &gt; 0 ? &quot;删除成功！&quot; : &quot;删除失败！&quot;);    System.out.println(&quot;受影响的行数为：&quot; + result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3修改"><a href="#2-3修改" class="headerlink" title="2.3修改"></a>2.3修改</h3><blockquote><p><strong>调用方法：int updateById(@Param(Constants.ENTITY) T entity);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;**  * 测试根据id修改用户信息  *&#x2F;@Testpublic void testUpdateById()&#123;    &#x2F;&#x2F;执行SQL为： UPDATE user SET name&#x3D;?, age&#x3D;?, email&#x3D;? WHERE id&#x3D;?    User user &#x3D; new User();    user.setId(6L);    user.setName(&quot;VzUpdate&quot;);    user.setAge(18);    user.setEmail(&quot;Vz@sina.com&quot;);    int result &#x3D; userMapper.updateById(user);    System.out.println(result &gt; 0 ? &quot;修改成功！&quot; : &quot;修改失败！&quot;);    System.out.println(&quot;受影响的行数为：&quot; + result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4查询"><a href="#2-4查询" class="headerlink" title="2.4查询"></a>2.4查询</h3><hr><h4 id="a、根据ID查询用户信息"><a href="#a、根据ID查询用户信息" class="headerlink" title="a、根据ID查询用户信息"></a>a、根据ID查询用户信息</h4><blockquote><p><strong>调用方法：T selectById(Serializable id);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;**  * 测试根据id查询用户数据  *&#x2F;@Testpublic void testSelectById()&#123;    User user &#x3D; userMapper.selectById(1L);    System.out.println(user);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b、根据多个ID查询多个用户信息"><a href="#b、根据多个ID查询多个用户信息" class="headerlink" title="b、根据多个ID查询多个用户信息"></a>b、根据多个ID查询多个用户信息</h4><blockquote><p><strong>调用方法：List<T> selectBatchIds(@Param(Constants.COLLECTION) Collection&lt;? extends Serializable&gt; idList);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;**  * 根据多个id查询用户数据  *&#x2F;@Testpublic void testSelectBatchIds()&#123;    &#x2F;&#x2F;执行SQL为：SELECT id,name,age,email FROM user WHERE id IN ( ? , ? , ? )    List&lt;Long&gt; ids &#x3D; Arrays.asList(1L,2L,3L);    List&lt;User&gt; users &#x3D; userMapper.selectBatchIds(ids);    users.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="c、根据Map条件查询用户信息"><a href="#c、根据Map条件查询用户信息" class="headerlink" title="c、根据Map条件查询用户信息"></a>c、根据Map条件查询用户信息</h4><blockquote><p><strong>调用方法：List<T> selectByMap(@Param(Constants.COLUMN_MAP) Map&lt;String, Object&gt; columnMap);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;**  * 根据Map所设置的条件查询用户  *&#x2F;@Testpublic void testSelectByMap()&#123;    &#x2F;&#x2F;执行SQL为：SELECT id,name,age,email FROM user WHERE age &#x3D; ?    Map&lt;String,Object&gt; map &#x3D; new HashMap&lt;&gt;();    map.put(&quot;age&quot;,18);    List&lt;User&gt; users &#x3D; userMapper.selectByMap(map);    users.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="d、查询所有用户信息"><a href="#d、查询所有用户信息" class="headerlink" title="d、查询所有用户信息"></a>d、查询所有用户信息</h4><blockquote><p><strong>调用方法：List<T> selectList(@Param(Constants.WRAPPER) Wrapper<T> queryWrapper);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;**  * 测试查询所有数据  *&#x2F;@Testvoid testSelectList()&#123;    List&lt;User&gt; users &#x3D; userMapper.selectList(null);    users.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-通用Service"><a href="#3-通用Service" class="headerlink" title="3.通用Service"></a>3.通用Service</h2><blockquote><p>说明:</p><ul><li>通用 Service CRUD 封装<code>IService</code>接口，进一步封装 CRUD 采用 <code>get 查询单行</code> <code>remove 删除</code> <code>list 查询集合</code> <code>page 分页</code> 前缀命名方式区分 <code>Mapper</code> 层避免混淆，</li><li>泛型 <code>T</code> 为任意实体对象</li><li>建议如果存在自定义通用 Service 方法的可能，请创建自己的 <code>IBaseService</code> 继承 <code>Mybatis-Plus</code> 提供的基类</li><li>对象 <code>Wrapper</code> 为 条件构造器</li></ul></blockquote><p>MyBatis-Plus中有一个接口 **<code>IService</code>**和其实现类 **<code>ServiceImpl</code>**，封装了常见的业务层逻辑，详情查看源码IService和ServiceImpl</p><p>因此我们在使用的时候仅需在自己定义的**<code>Service</code><strong>接口中继承</strong><code>IService</code><strong>接口，在自己的实现类中实现自己的Service并继承</strong><code>ServiceImpl</code>**即可</p><hr><blockquote><p><strong>IService中的CRUD方法</strong></p></blockquote><ul><li><p><strong>增加：Save、SaveOrUpdate</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 插入一条记录（选择字段，策略插入）boolean save(T entity);&#x2F;&#x2F; 插入（批量）boolean saveBatch(Collection&lt;T&gt; entityList);&#x2F;&#x2F; 插入（批量）boolean saveBatch(Collection&lt;T&gt; entityList, int batchSize);&#x2F;&#x2F; TableId 注解存在更新记录，否插入一条记录boolean saveOrUpdate(T entity);&#x2F;&#x2F; 根据updateWrapper尝试更新，否继续执行saveOrUpdate(T)方法boolean saveOrUpdate(T entity, Wrapper&lt;T&gt; updateWrapper);&#x2F;&#x2F; 批量修改插入boolean saveOrUpdateBatch(Collection&lt;T&gt; entityList);&#x2F;&#x2F; 批量修改插入boolean saveOrUpdateBatch(Collection&lt;T&gt; entityList, int batchSize);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>删除：Remove</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 根据 entity 条件，删除记录boolean remove(Wrapper&lt;T&gt; queryWrapper);&#x2F;&#x2F; 根据 ID 删除boolean removeById(Serializable id);&#x2F;&#x2F; 根据 columnMap 条件，删除记录boolean removeByMap(Map&lt;String, Object&gt; columnMap);&#x2F;&#x2F; 删除（根据ID 批量删除）boolean removeByIds(Collection&lt;? extends Serializable&gt; idList);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>修改：Update</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 根据 UpdateWrapper 条件，更新记录 需要设置sqlsetboolean update(Wrapper&lt;T&gt; updateWrapper);&#x2F;&#x2F; 根据 whereWrapper 条件，更新记录boolean update(T updateEntity, Wrapper&lt;T&gt; whereWrapper);&#x2F;&#x2F; 根据 ID 选择修改boolean updateById(T entity);&#x2F;&#x2F; 根据ID 批量更新boolean updateBatchById(Collection&lt;T&gt; entityList);&#x2F;&#x2F; 根据ID 批量更新boolean updateBatchById(Collection&lt;T&gt; entityList, int batchSize);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>查询：Get、List、Count</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 根据 ID 查询T getById(Serializable id);&#x2F;&#x2F; 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)T getOne(Wrapper&lt;T&gt; queryWrapper);&#x2F;&#x2F; 根据 Wrapper，查询一条记录T getOne(Wrapper&lt;T&gt; queryWrapper, boolean throwEx);&#x2F;&#x2F; 根据 Wrapper，查询一条记录Map&lt;String, Object&gt; getMap(Wrapper&lt;T&gt; queryWrapper);&#x2F;&#x2F; 根据 Wrapper，查询一条记录&lt;V&gt; V getObj(Wrapper&lt;T&gt; queryWrapper, Function&lt;? super Object, V&gt; mapper);&#x2F;&#x2F; 查询所有List&lt;T&gt; list();&#x2F;&#x2F; 查询列表List&lt;T&gt; list(Wrapper&lt;T&gt; queryWrapper);&#x2F;&#x2F; 查询（根据ID 批量查询）Collection&lt;T&gt; listByIds(Collection&lt;? extends Serializable&gt; idList);&#x2F;&#x2F; 查询（根据 columnMap 条件）Collection&lt;T&gt; listByMap(Map&lt;String, Object&gt; columnMap);&#x2F;&#x2F; 查询所有列表List&lt;Map&lt;String, Object&gt;&gt; listMaps();&#x2F;&#x2F; 查询列表List&lt;Map&lt;String, Object&gt;&gt; listMaps(Wrapper&lt;T&gt; queryWrapper);&#x2F;&#x2F; 查询全部记录List&lt;Object&gt; listObjs();&#x2F;&#x2F; 查询全部记录&lt;V&gt; List&lt;V&gt; listObjs(Function&lt;? super Object, V&gt; mapper);&#x2F;&#x2F; 根据 Wrapper 条件，查询全部记录List&lt;Object&gt; listObjs(Wrapper&lt;T&gt; queryWrapper);&#x2F;&#x2F; 根据 Wrapper 条件，查询全部记录&lt;V&gt; List&lt;V&gt; listObjs(Wrapper&lt;T&gt; queryWrapper, Function&lt;? super Object, V&gt; mapper);&#x2F;&#x2F; 查询总记录数int count();&#x2F;&#x2F; 根据 Wrapper 条件，查询总记录数int count(Wrapper&lt;T&gt; queryWrapper);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>分页：Page</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F; 根据 ID 查询T getById(Serializable id);&#x2F;&#x2F; 根据 Wrapper，查询一条记录。结果集，如果是多个会抛出异常，随机取一条加上限制条件 wrapper.last(&quot;LIMIT 1&quot;)T getOne(Wrapper&lt;T&gt; queryWrapper);&#x2F;&#x2F; 根据 Wrapper，查询一条记录T getOne(Wrapper&lt;T&gt; queryWrapper, boolean throwEx);&#x2F;&#x2F; 根据 Wrapper，查询一条记录Map&lt;String, Object&gt; getMap(Wrapper&lt;T&gt; queryWrapper);&#x2F;&#x2F; 根据 Wrapper，查询一条记录&lt;V&gt; V getObj(Wrapper&lt;T&gt; queryWrapper, Function&lt;? super Object, V&gt; mapper);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="4-调用Service层操作数据"><a href="#4-调用Service层操作数据" class="headerlink" title="4.调用Service层操作数据"></a>4.调用Service层操作数据</h2><blockquote><p>我们在自己的Service接口中通过继承MyBatis-Plus提供的IService接口，不仅可以获得其提供的CRUD方法，而且还可以使用自身定义的方法。</p></blockquote><ul><li><p><strong>创建<code>UserService</code>并继承<code>IService</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;**  * UserService继承IService模板提供的基础功能   *&#x2F;public interface UserService extends IService&lt;User&gt; &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>创建<code>UserService</code>的实现类并继承<code>ServiceImpl</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;**  * ServiceImpl实现了IService，提供了IService中基础功能的实现   * 若ServiceImpl无法满足业务需求，则可以使用自定的UserService定义方法，并在实现类中实现  *&#x2F;@Servicepublic class UserServiceImpl extends ServiceImpl&lt;UserMapper,User&gt; implements UserService&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>测试查询记录数</strong></p><blockquote><p><strong>调用方法：int count();</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void testGetCount()&#123;    &#x2F;&#x2F;查询总记录数    &#x2F;&#x2F;执行的SQL为：SELECT COUNT( * ) FROM user    long count &#x3D; userService.count();    System.out.println(&quot;总记录数：&quot; + count);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>测试批量插入数据</strong></p><blockquote><p><strong>调用方法：boolean saveBatch(Collection<T> entityList);</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void test()&#123;    List&lt;User&gt; list &#x3D; new ArrayList&lt;&gt;();    for (int i &#x3D; 1; i &lt;&#x3D; 10; i++) &#123;        User user &#x3D; new User();        user.setName(&quot;Vz&quot;+i);        user.setAge(20+i);        list.add(user);    &#125;    boolean b &#x3D; userService.saveBatch(list);    System.out.println(b ? &quot;添加成功！&quot; : &quot;添加失败！&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="四、常用注解"><a href="#四、常用注解" class="headerlink" title="四、常用注解"></a>四、常用注解</h1><blockquote><p>MyBatis-Plus提供的注解可以帮我们解决一些数据库与实体之间相互映射的问题。</p></blockquote><h2 id="1-TableName"><a href="#1-TableName" class="headerlink" title="1.@TableName"></a>1.@TableName</h2><blockquote><p>经过以上的测试，在使用MyBatis-Plus实现基本的CRUD时，我们并没有指定要操作的表，只是在Mapper接口继承BaseMapper时，设置了泛型User，而操作的表为user表，由此得出结论，MyBatis-Plus在确定操作的表时，由BaseMapper的泛型决定，即实体类型决定，且默认操作的表名和实体类型的类名一致。</p></blockquote><h3 id="1-1引出问题"><a href="#1-1引出问题" class="headerlink" title="1.1引出问题"></a>1.1引出问题</h3><hr><blockquote><p><strong>若实体类类型的类名和要操作的表的表名不一致，会出现什么问题？</strong></p></blockquote><ul><li><p>我们将表<code>user</code>更名为<code>t_user</code>，测试查询功能</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520093844842.png" alt="image-20220520093844842"></p></li><li><p>程序抛出异常，<strong>Table ‘mybatis_plus.user’ doesn’t exist</strong>，因为现在的表名为<code>t_user</code>，而默认操作的表名和实体类型的类名一致，即<code>user</code>表</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520094126411.png" alt="image-20220520094126411"></p></li></ul><h3 id="1-2解决问题"><a href="#1-2解决问题" class="headerlink" title="1.2解决问题"></a>1.2解决问题</h3><hr><h4 id="a、使用注解解决问题"><a href="#a、使用注解解决问题" class="headerlink" title="a、使用注解解决问题"></a>a、使用注解解决问题</h4><blockquote><p><strong>在实体类类型上添加<code>@TableName(&quot;t_user&quot;)</code>，标识实体类对应的表，即可成功执行SQL语句</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Data@TableName(&quot;t_user&quot;)public class User &#123;    private Long id;    private String name;    private Integer age;    private String email;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b、使用全局配置解决问题"><a href="#b、使用全局配置解决问题" class="headerlink" title="b、使用全局配置解决问题"></a>b、使用全局配置解决问题</h4><blockquote><p><strong>在开发的过程中，我们经常遇到以上的问题，即实体类所对应的表都有固定的前缀，例如 <code>t_</code> 或 <code>tbl_</code> 此时，可以使用MyBatis-Plus提供的全局配置，为实体类所对应的表名设置默认的前缀，那么就不需要在每个实体类上通过@TableName标识实体类对应的表</strong></p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">mybatis-plus:  global-config:    db-config:      # 设置实体类所对应的表的统一前缀      table-prefix: t_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-TableId"><a href="#2-TableId" class="headerlink" title="2.@TableId"></a>2.@TableId</h2><blockquote><p><strong>经过以上的测试，MyBatis-Plus在实现CRUD时，会默认将id作为主键列，并在插入数据时，默认基于雪花算法的策略生成id</strong></p></blockquote><h3 id="2-1引出问题"><a href="#2-1引出问题" class="headerlink" title="2.1引出问题"></a>2.1引出问题</h3><hr><blockquote><p><strong>若实体类和表中表示主键的不是id，而是其他字段，例如uid，MyBatis-Plus会自动识别uid为主键列吗？</strong></p></blockquote><ul><li><p>我们实体类中的属性<code>id</code>改为<code>uid</code>，将表中的字段<code>id</code>也改为<code>uid</code>，测试添加功能</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520100939157.png" alt="image-20220520100939157"></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520100715109.png" alt="image-20220520100715109"></p></li><li><p>程序抛出异常，<strong>Field ‘uid’ doesn’t have a default value</strong>，说明MyBatis-Plus没有将<code>uid</code>作为主键赋值</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520101317761.png" alt="image-20220520101317761"></p></li></ul><h3 id="2-2解决问题"><a href="#2-2解决问题" class="headerlink" title="2.2解决问题"></a>2.2解决问题</h3><hr><blockquote><p><strong>在实体类中uid属性上通过<code>@TableId</code>将其标识为主键，即可成功执行SQL语句</strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Datepublic class User &#123;    @TableId    private Long uid;    private String name;    private Integer age;    private String email;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-TableId的value属性"><a href="#2-3-TableId的value属性" class="headerlink" title="2.3@TableId的value属性"></a>2.3@TableId的value属性</h3><hr><blockquote><p>若实体类中主键对应的属性为id，而表中表示主键的字段为uid，此时若只在属性id上添加注解@TableId，则抛出异常**Unknown column ‘id’ in ‘field list’**，即MyBatis-Plus仍然会将id作为表的主键操作，而表中表示主键的是字段uid此时需要通过@TableId注解的value属性，指定表中的主键字段，<code>@TableId(&quot;uid&quot;)</code>或<code>@TableId(value=&quot;uid&quot;)</code></p></blockquote><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520103030977.png" alt="image-20220520103030977"></p><h3 id="2-4-TableId的type属性"><a href="#2-4-TableId的type属性" class="headerlink" title="2.4@TableId的type属性"></a>2.4@TableId的type属性</h3><hr><blockquote><p><strong>type属性用来定义主键策略：默认雪花算法</strong></p></blockquote><p><strong>常用的主键策略：</strong></p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">IdType.ASSIGN_ID（默认）</td><td align="center">基于雪花算法的策略生成数据id，与数据库id是否设置自增无关</td></tr><tr><td align="center">IdType.AUTO</td><td align="center">使用数据库的自增策略，注意，该类型请确保数据库设置了id自增，</td></tr></tbody></table><p><strong>配置全局主键策略：</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">#MyBatis-Plus相关配置mybatis-plus:  configuration:    #配置日志    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  global-config:    db-config:      #配置mp的主键策略为自增      id-type: auto      # 设置实体类所对应的表的统一前缀      table-prefix: t_<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-TbaleField"><a href="#3-TbaleField" class="headerlink" title="3.@TbaleField"></a>3.@TbaleField</h2><blockquote><p>经过以上的测试，我们可以发现，MyBatis-Plus在执行SQL语句时，要保证实体类中的属性名和表中的字段名一致</p><p>如果实体类中的属性名和字段名不一致的情况，会出现什么问题呢？</p></blockquote><h3 id="3-1情况一"><a href="#3-1情况一" class="headerlink" title="3.1情况一"></a>3.1情况一</h3><hr><p>若实体类中的属性使用的是驼峰命名风格，而表中的字段使用的是下划线命名风格</p><p>例如实体类属性<code>userName</code>，表中字段<code>user_name</code></p><p>此时MyBatis-Plus会自动将下划线命名风格转化为驼峰命名风格</p><p>相当于在MyBatis中配置</p><h3 id="3-2情况二"><a href="#3-2情况二" class="headerlink" title="3.2情况二"></a>3.2情况二</h3><hr><blockquote><p>若实体类中的属性和表中的字段不满足情况1</p><p>例如实体类属性<code>name</code>，表中字段<code>username</code></p><p>此时需要在实体类属性上使用<code>@TableField(&quot;username&quot;)</code>设置属性所对应的字段名</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class User &#123;    @TableId(&quot;uid&quot;)    private Long id;    @TableField(&quot;username&quot;)    private String name;    private Integer age;    private String email;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-TableLogic"><a href="#4-TableLogic" class="headerlink" title="4.@TableLogic"></a>4.@TableLogic</h2><h3 id="4-1逻辑删除"><a href="#4-1逻辑删除" class="headerlink" title="4.1逻辑删除"></a>4.1逻辑删除</h3><hr><blockquote><p>物理删除：真实删除，将对应数据从数据库中删除，之后查询不到此条被删除的数据</p><p>逻辑删除：假删除，将对应数据中代表是否被删除字段的状态修改为“被删除状态”，之后在数据库中仍旧能看到此条数据记录</p><p>使用场景：可以进行数据恢复</p></blockquote><h3 id="4-2实现逻辑删除"><a href="#4-2实现逻辑删除" class="headerlink" title="4.2实现逻辑删除"></a>4.2实现逻辑删除</h3><hr><ul><li><p><strong>数据库中创建逻辑删除状态列，设置默认值为0</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520134529809.png" alt="image-20220520134529809"></p></li><li><p><strong>实体类中添加逻辑删除属性</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520134636112.png" alt="image-20220520134636112"></p></li><li><p><strong>测试删除功能，真正执行的是修改</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void testDeleteById()&#123;    int result &#x3D; userMapper.deleteById(1527472864163348482L);    System.out.println(result &gt; 0 ? &quot;删除成功！&quot; : &quot;删除失败！&quot;);    System.out.println(&quot;受影响的行数为：&quot; + result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520135637388.png" alt="image-20220520135637388"></p></li><li><p><strong>此时执行查询方法，查询的结果为自动添加条件<code>is_deleted=0</code></strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220520140036445.png" alt="image-20220520140036445"></p></li></ul><h1 id="五、条件构造器"><a href="#五、条件构造器" class="headerlink" title="五、条件构造器"></a>五、条件构造器</h1><h2 id="1-Wrapper介绍"><a href="#1-Wrapper介绍" class="headerlink" title="1.Wrapper介绍"></a>1.Wrapper介绍</h2><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220521092812125.png" alt="image-20220521092812125"></p><ul><li><p><code>Wrapper</code> ： 条件构造抽象类，最顶端父类</p><ul><li><p><code>AbstractWrapper </code>： 用于查询条件封装，生成 sql 的 where 条件</p><ul><li><p><code>QueryWrapper </code>： 查询条件封装</p></li><li><p><code>UpdateWrapper </code>： Update 条件封装</p></li><li><p><code>AbstractLambdaWrapper </code>： 使用Lambda 语法</p><ul><li><p><code>LambdaQueryWrapper </code>：用于Lambda语法使用的查询Wrapper</p></li><li><p><code>LambdaUpdateWrapper </code>： Lambda 更新封装Wrapper</p></li></ul></li></ul></li></ul></li></ul><h2 id="2-QueryWrapper"><a href="#2-QueryWrapper" class="headerlink" title="2.QueryWrapper"></a>2.QueryWrapper</h2><ul><li><p><strong>组装查询条件</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 AND (username LIKE ? AND age BETWEEN ? AND ? AND email IS NOT NULL)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void test01()&#123;    &#x2F;&#x2F;查询用户名包含a，年龄在20到30之间，邮箱信息不为null的用户信息    QueryWrapper&lt;User&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();    queryWrapper.like(&quot;username&quot;,&quot;a&quot;).between(&quot;age&quot;,20,30).isNotNull(&quot;email&quot;);    List&lt;User&gt; users &#x3D; userMapper.selectList(queryWrapper);    users.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>组装排序条件</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,username AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 ORDER BY age DESC,id ASC</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void test02()&#123;    &#x2F;&#x2F;查询用户信息，按照年龄的降序排序，若年龄相同，则按照id升序排序    QueryWrapper&lt;User&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();    queryWrapper.orderByDesc(&quot;age&quot;).orderByAsc(&quot;id&quot;);    List&lt;User&gt; users &#x3D; userMapper.selectList(queryWrapper);    users.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>组装删除条件</strong></p><blockquote><p><strong>执行SQL：</strong>UPDATE t_user SET is_deleted&#x3D;1 WHERE is_deleted&#x3D;0 AND (email IS NULL)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void test03()&#123;    &#x2F;&#x2F;删除邮箱地址为null的用户信息    QueryWrapper&lt;User&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();    queryWrapper.isNull(&quot;email&quot;);    int result &#x3D; userMapper.delete(queryWrapper);    System.out.println(result &gt; 0 ? &quot;删除成功！&quot; : &quot;删除失败！&quot;);    System.out.println(&quot;受影响的行数为：&quot; + result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>条件的优先级</strong></p><blockquote><p><strong>执行SQL：</strong>UPDATE t_user SET user_name&#x3D;?, email&#x3D;? WHERE is_deleted&#x3D;0 AND (age &gt; ? AND user_name LIKE ? OR email IS NULL)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void test04()&#123;    &#x2F;&#x2F;将（年龄大于20并且用户名中包含有a）或邮箱为null的用户信息修改    UpdateWrapper&lt;User&gt; updateWrapper &#x3D; new UpdateWrapper&lt;&gt;();    updateWrapper.gt(&quot;age&quot;,20).like(&quot;username&quot;,&quot;a&quot;).or().isNull(&quot;email&quot;);    User user &#x3D; new User();    user.setName(&quot;Oz&quot;);    user.setEmail(&quot;test@oz6.com&quot;);    int result &#x3D; userMapper.update(user, updateWrapper);    System.out.println(result &gt; 0 ? &quot;修改成功！&quot; : &quot;修改失败！&quot;);    System.out.println(&quot;受影响的行数为：&quot; + result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>执行SQL：</strong>UPDATE t_user SET username&#x3D;?, email&#x3D;? WHERE is_deleted&#x3D;0 AND (username LIKE ? AND (age &gt; ? OR email IS NULL))</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void test05()&#123;    &#x2F;&#x2F;将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改    UpdateWrapper&lt;User&gt; updateWrapper &#x3D; new UpdateWrapper&lt;&gt;();    updateWrapper.like(&quot;username&quot;,&quot;a&quot;).and(i-&gt;i.gt(&quot;age&quot;,20).or().isNull(&quot;email&quot;));    User user &#x3D; new User();    user.setName(&quot;Vz7797&quot;);    user.setEmail(&quot;test@ss8o.com&quot;);    int result &#x3D; userMapper.update(user, updateWrapper);    System.out.println(result &gt; 0 ? &quot;修改成功！&quot; : &quot;修改失败！&quot;);    System.out.println(&quot;受影响的行数为：&quot; + result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>组装select子句</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT username,age,email FROM t_user WHERE is_deleted&#x3D;0</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void test06()&#123;    &#x2F;&#x2F;查询用户的用户名、年龄、邮箱信息    QueryWrapper&lt;User&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();    queryWrapper.select(&quot;username&quot;,&quot;age&quot;,&quot;email&quot;);    List&lt;Map&lt;String, Object&gt;&gt; maps &#x3D; userMapper.selectMaps(queryWrapper);    maps.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>实现子查询</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 AND (uid IN (select uid from t_user where uid &lt;&#x3D; 100))</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void test07()&#123;    &#x2F;&#x2F;查询id小于等于100的用户信息    QueryWrapper&lt;User&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();    queryWrapper.inSql(&quot;uid&quot;, &quot;select uid from t_user where uid &lt;&#x3D; 100&quot;);    List&lt;User&gt; list &#x3D; userMapper.selectList(queryWrapper);    list.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-UpdateWrapper"><a href="#3-UpdateWrapper" class="headerlink" title="3.UpdateWrapper"></a>3.UpdateWrapper</h2><blockquote><p>UpdateWrapper不仅拥有QueryWrapper的组装条件功能，还提供了set方法进行修改对应条件的数据库信息</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void test08()&#123;    &#x2F;&#x2F;将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改    UpdateWrapper&lt;User&gt; updateWrapper &#x3D; new UpdateWrapper&lt;&gt;();    updateWrapper.like(&quot;username&quot;,&quot;a&quot;).and( i -&gt; i.gt(&quot;age&quot;,20).or().isNull(&quot;email&quot;)).set(&quot;email&quot;,&quot;svip@qq.com&quot;);    int result &#x3D; userMapper.update(null, updateWrapper);    System.out.println(result &gt; 0 ? &quot;修改成功！&quot; : &quot;修改失败！&quot;);    System.out.println(&quot;受影响的行数为：&quot; + result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-condition"><a href="#4-condition" class="headerlink" title="4.condition"></a>4.condition</h2><blockquote><p>在真正开发的过程中，组装条件是常见的功能，而这些条件数据来源于用户输入，是可选的，因此我们在组装这些条件时，必须先判断用户是否选择了这些条件，若选择则需要组装该条件，若没有选择则一定不能组装，以免影响SQL执行的结果</p></blockquote><ul><li><p><strong>思路一</strong></p><blockquote><p><strong>执行SQL：</strong>SELECT uid AS id,user_name AS name,age,email,is_deleted FROM t_user WHERE is_deleted&#x3D;0 AND (user_name LIKE ? AND age &lt;&#x3D; ?)</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void test09()&#123;    String username &#x3D; &quot;a&quot;;    Integer ageBegin &#x3D; null;    Integer ageEnd &#x3D; 30;    QueryWrapper&lt;User&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();    if(StringUtils.isNotBlank(username))&#123;        &#x2F;&#x2F;isNotBlank判断某个字符创是否不为空字符串、不为null、不为空白符        queryWrapper.like(&quot;user_name&quot;, username);    &#125;    if(ageBegin !&#x3D; null)&#123;        queryWrapper.ge(&quot;age&quot;, ageBegin);    &#125;    if(ageEnd !&#x3D; null)&#123;        queryWrapper.le(&quot;age&quot;, ageEnd);    &#125;    List&lt;User&gt; list &#x3D; userMapper.selectList(queryWrapper);    list.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>思路二</strong></p><blockquote><p>上面的实现方案没有问题，但是代码比较复杂，我们可以使用带condition参数的重载方法构建查询条件，简化代码的编写</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void test10()&#123;    String username &#x3D; &quot;a&quot;;    Integer ageBegin &#x3D; null;    Integer ageEnd &#x3D; 30;    QueryWrapper&lt;User&gt; queryWrapper &#x3D; new QueryWrapper&lt;&gt;();    queryWrapper.like(StringUtils.isNotBlank(username), &quot;user_name&quot;, username)        .ge(ageBegin !&#x3D; null, &quot;age&quot;, ageBegin)        .le(ageEnd !&#x3D; null, &quot;age&quot;, ageEnd);    List&lt;User&gt; list &#x3D; userMapper.selectList(queryWrapper);    list.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="5-LambdaQueryWrapper"><a href="#5-LambdaQueryWrapper" class="headerlink" title="5.LambdaQueryWrapper"></a>5.LambdaQueryWrapper</h2><blockquote><p>功能等同于QueryWrapper，提供了Lambda表达式的语法可以避免填错列名。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void test11()&#123;    String username &#x3D; &quot;a&quot;;    Integer ageBegin &#x3D; null;    Integer ageEnd &#x3D; 30;    LambdaQueryWrapper&lt;User&gt; queryWrapper &#x3D; new LambdaQueryWrapper&lt;&gt;();    queryWrapper.like(StringUtils.isNotBlank(username), User::getName, username)        .ge(ageBegin !&#x3D; null, User::getAge, ageBegin)        .le(ageEnd !&#x3D; null, User::getAge, ageEnd);    List&lt;User&gt; list &#x3D; userMapper.selectList(queryWrapper);    list.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-LambdaUpdateWrapper"><a href="#6-LambdaUpdateWrapper" class="headerlink" title="6.LambdaUpdateWrapper"></a>6.LambdaUpdateWrapper</h2><blockquote><p>功能等同于UpdateWrapper，提供了Lambda表达式的语法可以避免填错列名。</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">public void test12()&#123;    &#x2F;&#x2F;将用户名中包含有a并且（年龄大于20或邮箱为null）的用户信息修改    LambdaUpdateWrapper&lt;User&gt; updateWrapper &#x3D; new LambdaUpdateWrapper&lt;&gt;();    updateWrapper.like(User::getName, &quot;a&quot;)        .and(i -&gt; i.gt(User::getAge, 20).or().isNull(User::getEmail));    updateWrapper.set(User::getName, &quot;小黑&quot;).set(User::getEmail,&quot;abc@atguigu.com&quot;);    int result &#x3D; userMapper.update(null, updateWrapper);    System.out.println(&quot;result：&quot;+result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="六、常用插件"><a href="#六、常用插件" class="headerlink" title="六、常用插件"></a>六、常用插件</h1><h2 id="1-分页插件"><a href="#1-分页插件" class="headerlink" title="1.分页插件"></a>1.分页插件</h2><blockquote><p>MyBatis Plus自带分页插件，只要简单的配置即可实现分页功能</p></blockquote><ul><li><p><strong>添加配置类<code>MyBatisPlusConfig</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Configuration@MapperScan(&quot;com.atguigu.mybatisplus.mapper&quot;)public class MyBatisPlusConfig &#123;    @Bean    public MybatisPlusInterceptor mybatisPlusInterceptor()&#123;        MybatisPlusInterceptor interceptor &#x3D; new MybatisPlusInterceptor();        &#x2F;&#x2F;添加分页插件        interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));        return interceptor;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>编写测试方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void testPage()&#123;    &#x2F;&#x2F;new Page()中的两个参数分别是当前页码，每页显示数量    Page&lt;User&gt; page &#x3D; userMapper.selectPage(new Page&lt;&gt;(1, 2), null);    List&lt;User&gt; users &#x3D; page.getRecords();    users.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="2-自定义分页"><a href="#2-自定义分页" class="headerlink" title="2.自定义分页"></a>2.自定义分页</h2><blockquote><p>上面调用的是MyBatis-Plus提供的带有分页的方法，那么我们自己定义的方法如何实现分页呢？</p></blockquote><ul><li><p><strong>在<code>UserMapper</code>接口中定义一个方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;**  * 根据年龄查询用户列表，分页显示   * @param page 分页对象,xml中可以从里面进行取值,传递参数 Page 即自动分页,必须放在第一位   * @param age 年龄   * @return   *&#x2F;Page&lt;User&gt; selectPageVo(@Param(&quot;page&quot;) Page&lt;User&gt; page,@Param(&quot;age&quot;) Integer age);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>在<code>UserMapper.xml</code>中编写SQL实现该方法</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>selectPageVo<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id,username as name,age,email from t_user where age > #&#123;age&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p><strong>编写测试方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void testPageVo()&#123;    Page&lt;User&gt; page &#x3D; userMapper.selectPageVo(new Page&lt;User&gt;(1,2), 20);    List&lt;User&gt; users &#x3D; page.getRecords();    users.forEach(System.out::println);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-乐观锁"><a href="#3-乐观锁" class="headerlink" title="3.乐观锁"></a>3.乐观锁</h2><blockquote><p><strong>作用：当要更新一条记录的时候，希望这条记录没有被别人更新</strong></p></blockquote><p>乐观锁的实现方式：</p><ul><li>取出记录时，获取当前 version</li><li>更新时，带上这个 version</li><li>执行更新时， set version &#x3D; newVersion where version &#x3D; oldVersion</li><li>如果 version 不对，就更新失败</li></ul><h3 id="3-1场景"><a href="#3-1场景" class="headerlink" title="3.1场景"></a>3.1场景</h3><hr><ul><li>一件商品，成本价是80元，售价是100元。老板先是通知小李，说你去把商品价格增加50元。小李正在玩游戏，耽搁了一个小时。正好一个小时后，老板觉得商品价格增加到150元，价格太高，可能会影响销量。又通知小王，你把商品价格降低30元。</li><li>此时，小李和小王同时操作商品后台系统。小李操作的时候，系统先取出商品价格100元；小王也在操作，取出的商品价格也是100元。小李将价格加了50元，并将100+50&#x3D;150元存入了数据库；小王将商品减了30元，并将100-30&#x3D;70元存入了数据库。是的，如果没有锁，小李的操作就完全被小王的覆盖了。</li><li>现在商品价格是70元，比成本价低10元。几分钟后，这个商品很快出售了1千多件商品，老板亏1万多。</li></ul><h3 id="3-2乐观锁与悲观锁"><a href="#3-2乐观锁与悲观锁" class="headerlink" title="3.2乐观锁与悲观锁"></a>3.2乐观锁与悲观锁</h3><hr><ul><li>上面的故事，如果是乐观锁，小王保存价格前，会检查下价格是否被人修改过了。如果被修改过了，则重新取出的被修改后的价格，150元，这样他会将120元存入数据库。</li><li>如果是悲观锁，小李取出数据后，小王只能等小李操作完之后，才能对价格进行操作，也会保证最终的价格是120元。</li></ul><h3 id="3-3模拟修改冲突"><a href="#3-3模拟修改冲突" class="headerlink" title="3.3模拟修改冲突"></a>3.3模拟修改冲突</h3><hr><ul><li><p><strong>数据库中增加商品表</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE TABLE t_product (     id BIGINT(20) NOT NULL COMMENT &#39;主键ID&#39;,     NAME VARCHAR(30) NULL DEFAULT NULL COMMENT &#39;商品名称&#39;,     price INT(11) DEFAULT 0 COMMENT &#39;价格&#39;,     VERSION INT(11) DEFAULT 0 COMMENT &#39;乐观锁版本号&#39;,     PRIMARY KEY (id) );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>添加一条数据</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">INSERT INTO t_product (id, NAME, price) VALUES (1, &#39;外星人笔记本&#39;, 100);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>添加一个实体类<code>Product</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Datapublic class Product &#123;    private Long id;    private String name;    private Integer price;    private Integer version;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>添加一个Mapper接口<code>ProductMapper</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface ProductMapper extends BaseMapper&lt;Product&gt; &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>测试方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void testProduct01()&#123;    &#x2F;&#x2F;1.小李获取商品价格    Product productLi &#x3D; productMapper.selectById(1);    System.out.println(&quot;小李获取的商品价格为：&quot; + productLi.getPrice());    &#x2F;&#x2F;2.小王获取商品价格    Product productWang &#x3D; productMapper.selectById(1);    System.out.println(&quot;小李获取的商品价格为：&quot; + productWang.getPrice());    &#x2F;&#x2F;3.小李修改商品价格+50    productLi.setPrice(productLi.getPrice()+50);    productMapper.updateById(productLi);    &#x2F;&#x2F;4.小王修改商品价格-30    productWang.setPrice(productWang.getPrice()-30);    productMapper.updateById(productWang);    &#x2F;&#x2F;5.老板查询商品价格    Product productBoss &#x3D; productMapper.selectById(1);    System.out.println(&quot;老板获取的商品价格为：&quot; + productBoss.getPrice());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>执行结果</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220521225803162.png" alt="image-20220521225803162"></p></li></ul><h3 id="3-4乐观锁解决问题"><a href="#3-4乐观锁解决问题" class="headerlink" title="3.4乐观锁解决问题"></a>3.4乐观锁解决问题</h3><hr><ul><li><p><strong>实体类<code>version</code>字段添加注解<code>@Version</code></strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Datapublic class Product &#123;    private Long id;    private String name;    private Integer price;    @Version    private Integer version;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>添加乐观锁插件配置</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Beanpublic MybatisPlusInterceptor mybatisPlusInterceptor()&#123;    MybatisPlusInterceptor interceptor &#x3D; new MybatisPlusInterceptor();    &#x2F;&#x2F;添加分页插件    interceptor.addInnerInterceptor(new PaginationInnerInterceptor(DbType.MYSQL));    &#x2F;&#x2F;添加乐观锁插件    interceptor.addInnerInterceptor(new OptimisticLockerInnerInterceptor());    return interceptor;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>再次执行测试方法</strong></p><blockquote><p>小李查询商品信息：</p><p>​SELECT id,name,price,version FROM t_product WHERE id&#x3D;?</p><p>小王查询商品信息：</p><p>​SELECT id,name,price,version FROM t_product WHERE id&#x3D;?</p><p>小李修改商品价格，自动将version+1</p><p>​UPDATE t_product SET name&#x3D;?, price&#x3D;?, version&#x3D;? WHERE id&#x3D;? AND version&#x3D;?</p><p>​Parameters: 外星人笔记本(String), 150(Integer), 1(Integer), 1(Long), 0(Integer)</p><p>小王修改商品价格，此时version已更新，条件不成立，修改失败</p><p>​UPDATE t_product SET name&#x3D;?, price&#x3D;?, version&#x3D;? WHERE id&#x3D;? AND version&#x3D;?</p><p>​Parameters: 外星人笔记本(String), 70(Integer), 1(Integer), 1(Long), 0(Integer)</p><p>最终，小王修改失败，查询价格：150</p><p>​SELECT id,name,price,version FROM t_product WHERE id&#x3D;?</p></blockquote></li><li><p><strong>优化执行流程</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void testProduct01()&#123;    &#x2F;&#x2F;1.小李获取商品价格    Product productLi &#x3D; productMapper.selectById(1);    System.out.println(&quot;小李获取的商品价格为：&quot; + productLi.getPrice());    &#x2F;&#x2F;2.小王获取商品价格    Product productWang &#x3D; productMapper.selectById(1);    System.out.println(&quot;小李获取的商品价格为：&quot; + productWang.getPrice());    &#x2F;&#x2F;3.小李修改商品价格+50    productLi.setPrice(productLi.getPrice()+50);    productMapper.updateById(productLi);    &#x2F;&#x2F;4.小王修改商品价格-30    productWang.setPrice(productWang.getPrice()-30);    int result &#x3D; productMapper.updateById(productWang);    if(result &#x3D;&#x3D; 0)&#123;        &#x2F;&#x2F;操作失败，重试        Product productNew &#x3D; productMapper.selectById(1);        productNew.setPrice(productNew.getPrice()-30);        productMapper.updateById(productNew);    &#125;    &#x2F;&#x2F;5.老板查询商品价格    Product productBoss &#x3D; productMapper.selectById(1);    System.out.println(&quot;老板获取的商品价格为：&quot; + productBoss.getPrice());&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220521230448577.png" alt="image-20220521230448577"></p></li></ul><h1 id="七、通用枚举"><a href="#七、通用枚举" class="headerlink" title="七、通用枚举"></a>七、通用枚举</h1><blockquote><p>表中的有些字段值是固定的，例如性别（男或女），此时我们可以使用MyBatis-Plus的通用枚举来实现</p></blockquote><ul><li><p><strong>数据库表添加字段<code>sex</code></strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220521231317777.png" alt="image-20220521231317777"></p></li><li><p><strong>创建通用枚举类型</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Getterpublic enum SexEnum &#123;    MALE(1, &quot;男&quot;),    FEMALE(2, &quot;女&quot;);    @EnumValue &#x2F;&#x2F;将注解所标识的属性的值存储到数据库中    private int sex;    private String sexName;    SexEnum(Integer sex, String sexName) &#123;        this.sex &#x3D; sex;        this.sexName &#x3D; sexName;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>User实体类中添加属性sex</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public class User &#123;    private Long id;    @TableField(&quot;username&quot;)    private String name;    private Integer age;    private String email;    @TableLogic    private int isDeleted;  &#x2F;&#x2F;逻辑删除    private SexEnum sex;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>配置扫描通用枚举</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">#MyBatis-Plus相关配置mybatis-plus:  #指定mapper文件所在的地址  mapper-locations: classpath:mapper&#x2F;*.xml  configuration:    #配置日志    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl  global-config:    banner: off    db-config:      #配置mp的主键策略为自增      id-type: auto      # 设置实体类所对应的表的统一前缀      table-prefix: t_  #配置类型别名所对应的包  type-aliases-package: com.atguigu.mybatisplus.pojo  # 扫描通用枚举的包  type-enums-package: com.atguigu.mybatisplus.enums<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>执行测试方法</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Testpublic void test()&#123;    User user &#x3D; new User();    user.setName(&quot;admin&quot;);    user.setAge(33);    user.setSex(SexEnum.MALE);    int result &#x3D; userMapper.insert(user);    System.out.println(&quot;result:&quot;+result);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h1 id="八、多数据源"><a href="#八、多数据源" class="headerlink" title="八、多数据源"></a>八、多数据源</h1><blockquote><p>适用于多种场景：纯粹多库、 读写分离、 一主多从、 混合模式等</p></blockquote><p>场景说明：</p><p>我们创建两个库，分别为：<code>mybatis_plus</code>（以前的库不动）与<code>mybatis_plus_1</code>（新建），将mybatis_plus库的<code>product</code>表移动到mybatis_plus_1库，这样每个库一张表，通过一个测试用例分别获取用户数据与商品数据，如果获取到说明多库模拟成功</p><h2 id="1-创建数据库及表"><a href="#1-创建数据库及表" class="headerlink" title="1.创建数据库及表"></a>1.创建数据库及表</h2><ul><li><p><strong>创建数据库<code>mybatis_plus_1</code>和表&#96;product</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">CREATE DATABASE &#96;mybatis_plus_1&#96; &#x2F;*!40100 DEFAULT CHARACTER SET utf8mb4 *&#x2F;;use &#96;mybatis_plus_1&#96;; CREATE TABLE product (     id BIGINT(20) NOT NULL COMMENT &#39;主键ID&#39;,     name VARCHAR(30) NULL DEFAULT NULL COMMENT &#39;商品名称&#39;,     price INT(11) DEFAULT 0 COMMENT &#39;价格&#39;,     version INT(11) DEFAULT 0 COMMENT &#39;乐观锁版本号&#39;,     PRIMARY KEY (id) );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>添加测试数据</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">INSERT INTO product (id, NAME, price) VALUES (1, &#39;外星人笔记本&#39;, 100);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>删除<code>mybatis_plus</code>库中的<code>product</code>表</strong> </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">use mybatis_plus; DROP TABLE IF EXISTS product;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="2-新建工程引入依赖"><a href="#2-新建工程引入依赖" class="headerlink" title="2.新建工程引入依赖"></a>2.新建工程引入依赖</h2><blockquote><p><strong>自行新建一个Spring Boot工程并选择MySQL驱动及Lombok依赖</strong></p></blockquote><p><strong>引入MyBaits-Plus的依赖及多数据源的依赖</strong></p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dynamic-datasource-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-编写配置文件"><a href="#3-编写配置文件" class="headerlink" title="3.编写配置文件"></a>3.编写配置文件</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  # 配置数据源信息  datasource:    dynamic:      # 设置默认的数据源或者数据源组,默认值即为master      primary: master      # 严格匹配数据源,默认false.true未匹配到指定数据源时抛异常,false使用默认数据源      strict: false      datasource:        master:          url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis_plus?characterEncoding&#x3D;utf-8&amp;useSSL&#x3D;false          driver-class-name: com.mysql.cj.jdbc.Driver          username: root          password: 132537        slave_1:          url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis_plus_1?characterEncoding&#x3D;utf-8&amp;useSSL&#x3D;false          driver-class-name: com.mysql.cj.jdbc.Driver          username: root          password: 132537<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-创建实体类"><a href="#4-创建实体类" class="headerlink" title="4.创建实体类"></a>4.创建实体类</h2><ul><li><p>新建一个<code>User</code>实体类（如果数据库表名有t_前缀记得配置）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Datapublic class User &#123;    private Long id;    private String name;    private Integer age;    private String email;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>新建一个实体类<code>Product</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@Datapublic class Product &#123;    private Long id;    private String name;    private Integer price;    private Integer version;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="5-创建Mapper及Service"><a href="#5-创建Mapper及Service" class="headerlink" title="5.创建Mapper及Service"></a>5.创建Mapper及Service</h2><ul><li><p>新建接口<code>UserMapper</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface UserMapper extends BaseMapper&lt;User&gt; &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>新建接口<code>ProductMapper</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">public interface ProductMapper extends BaseMapper&lt;Product&gt; &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>新建Service接口<code>UserService</code>指定操作的数据源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@DS(&quot;master&quot;) &#x2F;&#x2F;指定操作的数据源，master为user表public interface UserService extends IService&lt;User&gt; &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>新建Service接口<code>ProductService</code>指定操作的数据源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">@DS(&quot;slave_1&quot;)public interface ProductService extends IService&lt;Product&gt; &#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>自行建立Service的实现类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">...<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="6-编写测试方法"><a href="#6-编写测试方法" class="headerlink" title="6.编写测试方法"></a>6.编写测试方法</h2><blockquote><p><strong>记得在启动类中添加注解<code>@MapperScan()</code></strong></p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">class TestDatasourceApplicationTests &#123;@ResourceUserService userService;@ResourceProductService productService;@Testvoid contextLoads() &#123;User user &#x3D; userService.getById(1L);Product product &#x3D; productService.getById(1L);System.out.println(&quot;User &#x3D; &quot; + user);System.out.println(&quot;Product &#x3D; &quot; + product);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522113049945.png" alt="image-20220522113049945"></p><h1 id="九、MyBatisX插件"><a href="#九、MyBatisX插件" class="headerlink" title="九、MyBatisX插件"></a>九、MyBatisX插件</h1><blockquote><p>MyBatis-Plus为我们提供了强大的mapper和service模板，能够大大的提高开发效率。</p><p>但是在真正开发过程中，MyBatis-Plus并不能为我们解决所有问题，例如一些复杂的SQL，多表联查，我们就需要自己去编写代码和SQL语句，我们该如何快速的解决这个问题呢，这个时候可以使用MyBatisX插件。</p><p>MyBatisX一款基于 IDEA 的快速开发插件，为效率而生。</p></blockquote><h2 id="1-安装MyBatisX插件"><a href="#1-安装MyBatisX插件" class="headerlink" title="1.安装MyBatisX插件"></a>1.安装MyBatisX插件</h2><blockquote><p><strong>打开IDEA，File-&gt; Setteings-&gt;Plugins-&gt;MyBatisX，搜索栏搜索MyBatisX然后安装。</strong></p></blockquote><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522115718361.png" alt="image-20220522115718361"></p><h2 id="2-快速生成代码"><a href="#2-快速生成代码" class="headerlink" title="2.快速生成代码"></a>2.快速生成代码</h2><ul><li><p>新建一个Spring Boot项目引入依赖（创建工程时记得勾选lombok及mysql驱动）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dynamic-datasource-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置数据源信息</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">spring:  datasource:    type: com.zaxxer.hikari.HikariDataSource    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mybatis_plus?characterEncoding&#x3D;utf-8&amp;useSSL&#x3D;false    username: root    password: 132537<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在IDEA中与数据库建立链接</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522120758740.png" alt="image-20220522120758740"></p></li><li><p>填写数据库信息并保存</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522121434468.png" alt="image-20220522121434468"></p></li><li><p>找到我们需要生成的表点击右键</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522121613909.png" alt="image-20220522121613909"></p></li><li><p>填写完信息以后下一步</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522122127649.png" alt="image-20220522122127649"></p></li><li><p>继续填写信息</p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522122525598.png" alt="image-20220522122525598"></p></li><li><p><strong>大功告成（真特么好用yyds）</strong></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522122612334.png" alt="image-20220522122612334"></p></li></ul><h2 id="3-快速生成CRUD"><a href="#3-快速生成CRUD" class="headerlink" title="3.快速生成CRUD"></a>3.快速生成CRUD</h2><blockquote><p>MyBaitsX可以根据我们在Mapper接口中输入的方法名快速帮我们生成对应的sql语句</p></blockquote><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522123143852.png" alt="image-20220522123143852"></p><p><img src="https://image-bed-vz.oss-cn-hangzhou.aliyuncs.com/MyBatis-Plus/image-20220522123202310.png" alt="image-20220522123202310"></p><h1 id="十、致谢"><a href="#十、致谢" class="headerlink" title="十、致谢"></a>十、致谢</h1><p>感谢尚硅谷杨博超老师：<a href="https://www.bilibili.com/video/BV12R4y157Be?p=1">https://www.bilibili.com/video/BV12R4y157Be?p=1</a></p><p>感谢MyBatis-Plus作者苞米豆：<a href="https://baomidou.com/">https://baomidou.com/</a></p><p>感谢自己又坚持学习了一门课程：<a href="https://www.oz6.cn/">https://www.oz6.cn/</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis-Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SRC收集</title>
      <link href="/posts/23e904a0.html"/>
      <url>/posts/23e904a0.html</url>
      
        <content type="html"><![CDATA[<div class="note info simple"><ul><li>企业SRC</li><li>众测平台</li><li>公众号关注动态<br>(按ctrl~F搜索页面内容，代码块也可以折叠)</li></ul></div><h2 id="企业SRC收集"><a href="#企业SRC收集" class="headerlink" title="企业SRC收集"></a>企业SRC收集</h2><pre class="line-numbers language-none"><code class="language-none"> A 阿里巴巴 (ASRC) https:&#x2F;&#x2F;security.alibaba.com&#x2F;  阿里云先知 https:&#x2F;&#x2F;xianzhi.aliyun.com&#x2F;    爱奇艺 (71SRC) https:&#x2F;&#x2F;security.iqiyi.com&#x2F;    安全狗 http:&#x2F;&#x2F;security.safedog.cn&#x2F;index.html   安恒 https:&#x2F;&#x2F;security.dbappsecurity.com.cn&#x2F;    B BIGO (BSRC) https:&#x2F;&#x2F;security.bigo.sg&#x2F;    BOSS直聘 (BSSRC) https:&#x2F;&#x2F;src.zhipin.com&#x2F;    百度 (BSRC) https:&#x2F;&#x2F;bsrc.baidu.com&#x2F;    百合 (BHSRC) https:&#x2F;&#x2F;src.baihe.com&#x2F;    贝贝 (BBSRC) https:&#x2F;&#x2F;src.beibei.com.cn&#x2F;    贝壳 (BKSRC) https:&#x2F;&#x2F;security.ke.com&#x2F;    本木医疗 (BMSRC) https:&#x2F;&#x2F;security.benmu-health.com&#x2F;src&#x2F;    哔哩哔哩 (BILISRC) https:&#x2F;&#x2F;security.bilibili.com&#x2F;   C 菜鸟网络 (CNSRC) https:&#x2F;&#x2F;sec.cainiao.com&#x2F;   D DHgate (DHSRC) http:&#x2F;&#x2F;dhsrc.dhgate.com&#x2F;    大疆 (DJISRC) https:&#x2F;&#x2F;security.dji.com&#x2F;    滴滴出行 (DSRC) https:&#x2F;&#x2F;sec.didichuxing.com&#x2F;    东方财富 (EMSRC) https:&#x2F;&#x2F;security.eastmoney.com&#x2F;   斗米 (DMSRC) https:&#x2F;&#x2F;security.doumi.com&#x2F;    斗鱼 (DYSRC) https:&#x2F;&#x2F;security.douyu.com&#x2F;    度小满 (DXMSRC) https:&#x2F;&#x2F;security.duxiaoman.com&#x2F;   F 法大大 (FSRC) https:&#x2F;&#x2F;sec.fadada.com&#x2F;   富友 (FSRC) https:&#x2F;&#x2F;fsrc.fuiou.com&#x2F;    G 瓜子 (GZSRC) https:&#x2F;&#x2F;security.guazi.com&#x2F;    H 好未来 (100TALSRC) https:&#x2F;&#x2F;src.100tal.com&#x2F;    合合 (ISRC) https:&#x2F;&#x2F;security.intsig.com&#x2F;    恒昌 (HCSRC) http:&#x2F;&#x2F;src.credithc.com&#x2F;    虎牙 (HSRC) https:&#x2F;&#x2F;src.huya.com&#x2F;    华为 (HBP) https:&#x2F;&#x2F;bugbounty.huawei.com&#x2F;    华住 (HSRC) https:&#x2F;&#x2F;sec.huazhu.com&#x2F;    欢聚时代 (YSRC) https:&#x2F;&#x2F;security.yy.com&#x2F;    货拉拉 (LLSRC) https:&#x2F;&#x2F;llsrc.huolala.cn&#x2F;     J 焦点 (FSRC) https:&#x2F;&#x2F;security.focuschina.com&#x2F;    金山办公 (WPSSRC) https:&#x2F;&#x2F;security.wps.cn&#x2F;   金山云 (KYSRC) https:&#x2F;&#x2F;kysrc.vulbox.com&#x2F;    京东 (JSRC) https:&#x2F;&#x2F;security.jd.com&#x2F;   竞技世界 (JJSRC) https:&#x2F;&#x2F;security.jj.cn&#x2F;    K 酷狗 (KGSRC) https:&#x2F;&#x2F;security.kugou.com&#x2F;    快手 (KwaiSRC) https:&#x2F;&#x2F;security.kuaishou.com&#x2F;    旷视 (MSRC) https:&#x2F;&#x2F;megvii.huoxian.cn&#x2F;   L 老虎证券 (TigerSRC) https:&#x2F;&#x2F;security.itiger.com&#x2F;    乐信 (LXSRC) http:&#x2F;&#x2F;security.lexinfintech.com&#x2F;    理想 https:&#x2F;&#x2F;security.lixiang.com&#x2F;    联想 (LSRC) https:&#x2F;&#x2F;lsrc.vulbox.com&#x2F;   猎聘 (LPSRC) https:&#x2F;&#x2F;security.liepin.com&#x2F;    M  MYSRC https:&#x2F;&#x2F;mysrc.group&#x2F;    马蜂窝 (MFWSRC) https:&#x2F;&#x2F;security.mafengwo.cn&#x2F;    蚂蚁集团 (AntSRC) https:&#x2F;&#x2F;security.alipay.com&#x2F;    美丽联合 (MLSRC) https:&#x2F;&#x2F;security.mogu.com&#x2F;    美团 (MTSRC) https:&#x2F;&#x2F;security.meituan.com&#x2F;    魅族 (MEIXZUSRC) https:&#x2F;&#x2F;sec.meizu.com&#x2F;    陌陌 (MMSRC) https:&#x2F;&#x2F;security.immomo.com&#x2F;    N 你我贷 (NSRC) http:&#x2F;&#x2F;www.niwodai.com&#x2F;sec&#x2F;index.htm    O OPPO (OSRC) https:&#x2F;&#x2F;security.oppo.com&#x2F;    P 平安 (PSRC) https:&#x2F;&#x2F;security.pingan.com&#x2F;   平安汇聚 (ISRC) https:&#x2F;&#x2F;isrc.pingan.com&#x2F;    Q 千米 (QMSRC) https:&#x2F;&#x2F;security.qianmi.com&#x2F;    去哪儿 (QSRC) https:&#x2F;&#x2F;security.qunar.com&#x2F;   R  融360 (Rong360SRC) https:&#x2F;&#x2F;security.rong360.com&#x2F;   S SHEIN https:&#x2F;&#x2F;security.shein.com&#x2F;    SOUL https:&#x2F;&#x2F;security.soulapp.cn&#x2F;    360 (360SRC) https:&#x2F;&#x2F;security.360.cn&#x2F;    深信服 (SSRC) https:&#x2F;&#x2F;security.sangfor.com.cn&#x2F;    世纪佳缘 (JYSRC) https:&#x2F;&#x2F;src.jiayuan.com&#x2F;    水滴安全 (SDSRC) https:&#x2F;&#x2F;security.shuidihuzhu.com&#x2F;    顺丰 (SFSRC) http:&#x2F;&#x2F;sfsrc.sf-express.com&#x2F;    搜狗  http:&#x2F;&#x2F;sec.sogou.com&#x2F;    苏宁 (SNSRC) https:&#x2F;&#x2F;security.suning.com&#x2F;    T T3出行 (T3SRC) https:&#x2F;&#x2F;security.t3go.cn&#x2F;    TCL (TCLSRC) https:&#x2F;&#x2F;src.tcl.com&#x2F;    腾讯 (TSRC) https:&#x2F;&#x2F;security.tencent.com&#x2F;    同程旅行 (LYSRC) https:&#x2F;&#x2F;sec.ly.com&#x2F;    同程数科 (TJSRC) https:&#x2F;&#x2F;securitytcjf.com&#x2F;    统信(USRC) https:&#x2F;&#x2F;src.uniontech.com&#x2F;    同舟共测 https:&#x2F;&#x2F;tz.alipay.com&#x2F;    途虎 (THSRC) https:&#x2F;&#x2F;security.tuhu.cn&#x2F;    途牛 (TNSRC) https:&#x2F;&#x2F;sec.tuniu.com&#x2F;    U UCLOUD (USRC) https:&#x2F;&#x2F;sec.ucloud.cn&#x2F;   V VIPKID (VKSRC) https:&#x2F;&#x2F;security.vipkid.com.cn&#x2F;   VIVO (vivoSRC) https:&#x2F;&#x2F;security.vivo.com.cn&#x2F;    W WiFi万能钥匙 (WIFISRC) https:&#x2F;&#x2F;sec.wifi.com&#x2F;    挖财 (WACSRC) https:&#x2F;&#x2F;sec.wacai.com&#x2F;    完美世界 (PWSRC) https:&#x2F;&#x2F;security.wanmei.com&#x2F;    网易 (NSRC) https:&#x2F;&#x2F;aq.163.com&#x2F;   唯品会 (VSRC) https:&#x2F;&#x2F;sec.vip.com&#x2F;    微博 (WSRC) https:&#x2F;&#x2F;wsrc.weibo.com&#x2F;    微众 (WSRC)https:&#x2F;&#x2F;security.webank.com&#x2F;   58 (58SRC) https:&#x2F;&#x2F;security.58.com&#x2F;    伍林堂 (WSRC) https:&#x2F;&#x2F;www.wulintang.net&#x2F;    X 喜马拉雅 (XMSRC) https:&#x2F;&#x2F;security.ximalaya.com&#x2F;    享道出行 (SDSRC) https:&#x2F;&#x2F;src.saicmobility.com&#x2F;    小米 (MISRC) https:&#x2F;&#x2F;sec.xiaomi.com&#x2F;    小赢 (XYSRC) https:&#x2F;&#x2F;security.xiaoying.com&#x2F;    携程 (CSRC) https:&#x2F;&#x2F;sec.ctrip.com&#x2F;    新浪 (SSRC) https:&#x2F;&#x2F;sec.sina.com.cn&#x2F;    讯飞 (XFSRC) https:&#x2F;&#x2F;security.iflytek.com&#x2F;    Y 易宠 (ESRC) https:&#x2F;&#x2F;sec.epet.com&#x2F;   一加 (ONESRC https:&#x2F;&#x2F;security.oneplus.com&#x2F;    一起教育 (17SRC) https:&#x2F;&#x2F;security.17zuoye.com&#x2F;    宜信 (CESRC) https:&#x2F;&#x2F;security.creditease.cn&#x2F;   银联 (USRC) https:&#x2F;&#x2F;security.unionpay.com&#x2F;    萤石 (YSCR) https:&#x2F;&#x2F;ysrc.ys7.com&#x2F;    有赞 (YZSRC) https:&#x2F;&#x2F;src.youzan.com&#x2F;    Z 字节跳动 https:&#x2F;&#x2F;security.bytedance.com&#x2F;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="众测平台"><a href="#众测平台" class="headerlink" title="众测平台"></a>众测平台</h2> <pre class="line-numbers language-none"><code class="language-none">#国内乌云众测http:&#x2F;&#x2F;ce.wooyun.org 漏洞盒子https:&#x2F;&#x2F;www.vulbox.com Sobug白帽众测平台http:&#x2F;&#x2F;www.Sobug.com 补天平台https:&#x2F;&#x2F;www.butian.net&#x2F; 同舟共测-企业安全响应联盟https:&#x2F;&#x2F;tz.alipay.com&#x2F; 漏洞银行https:&#x2F;&#x2F;www.bugbank.cn&#x2F; 雷神众测https:&#x2F;&#x2F;www.bountyteam.com&#x2F; 360众测https:&#x2F;&#x2F;zhongce.360.net&#x2F; 火线众测http:&#x2F;&#x2F;www.huoxian.club&#x2F; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">#国外Hackone https:&#x2F;&#x2F;www.hackerone.com&#x2F; Google Inc.安全应急响应中心http:&#x2F;&#x2F;cnsrc.org.cn&#x2F; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h2> <div class="note info simple"><p>微信搜索搜索应急响应中心</p></div><p> 百度应急响应中心<br> 腾讯安全应急响应中心<br> 顺丰安全应急响应中心<br> 奇安信安全应急响应中心<br> 哔哩哔哩安全应急响应中心<br> 富途 安全应急响应中心<br> ····· </p>]]></content>
      
      
      <categories>
          
          <category> 网安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 创建Git远程仓库</title>
      <link href="/posts/22bf3c2f.html"/>
      <url>/posts/22bf3c2f.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1.安装git"></a>1.安装git</h3><p>在Ubuntu上安装git</p><pre class="line-numbers language-none"><code class="language-none">sudo apt-get install git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-初始化git"><a href="#2-初始化git" class="headerlink" title="2.初始化git"></a>2.初始化git</h3><pre class="line-numbers language-none"><code class="language-none">#告诉git，自己的名字与邮箱git config --global user.name &quot;Your Name&quot;git config --global user.email &quot;email@example.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-创建git用户"><a href="#3-创建git用户" class="headerlink" title="3.创建git用户"></a>3.创建git用户</h3><pre class="line-numbers language-none"><code class="language-none">adduser git     #此后需要输入密码与确认密码,也可以直接使用root用户<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-进入git-用户home，并创建相应的ssh文件，用于客户端免密码登陆时使用"><a href="#4-进入git-用户home，并创建相应的ssh文件，用于客户端免密码登陆时使用" class="headerlink" title="4.进入git 用户home，并创建相应的ssh文件，用于客户端免密码登陆时使用"></a>4.进入git 用户home，并创建相应的ssh文件，用于客户端免密码登陆时使用</h3><pre class="line-numbers language-none"><code class="language-none">#进入用户目录，root用户目录为&#96;&#x2F;root&#96;cd &#x2F;home&#x2F;git&#x2F;#没有就创建.ssh目录，客户端的公钥存在此目录文件中mkdir .ssh#创建&#x2F;打开authorized_keys文件，客户端的公钥存在此文件中cd .sshtouch authorized_keys#赋权，root用户不需要chmod 755 .ssh#更改文件以及其内文件的所属用户以及用户组chown -R git:git .ssh&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-ssh配置"><a href="#5-ssh配置" class="headerlink" title="5.ssh配置"></a>5.ssh配置</h3><p>在客户端（本地）生成私钥与公钥</p><p>打开gitbash或者cmd随便一个命令行窗口</p><pre class="line-numbers language-none"><code class="language-none">#生成名字不同的ssh密钥，#-C 指定自己的邮箱，与git config --global user.email &quot;email@example.com&quot;时候，指定的邮箱要一致ssh-keygen -t rsa -C &#39;xxxxx@youremail.com&#39; -f ~&#x2F;.ssh&#x2F;xxx_id_rsa           cd ~&#x2F;.ssh#进入密钥目录vim conf#修改密钥配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/18/CJjX3VyfOKMvnD8.png" alt="image-20230418211601657"></p><p><img src="https://s2.loli.net/2023/04/18/thFKeYyXqUw1SbM.png" alt="image-20230418211629235"></p><p>本地配置好后，再复制公钥内容，追加到Ubuntu服务器的<code>/home/git/.ssh/authorized_keys</code>文件中，不是git用户的就在当前用户家目录下的.ssh文件夹</p><p><img src="https://s2.loli.net/2023/04/18/FNJqOCQDvXxMHAV.png" alt="img"></p><p>用记事本打开<code>id_rsa.pub</code>文件，并复制到&#x2F;home&#x2F;git&#x2F;.ssh&#x2F;authorized_keys目录中</p><p><img src="https://s2.loli.net/2023/04/18/bv4jPtfBHSpkehN.png" alt="img"></p><p>以后再客户端进行克隆、提交等操作，就不会需要密码。</p><h3 id="6-在Ubuntu上创建远程仓库"><a href="#6-在Ubuntu上创建远程仓库" class="headerlink" title="6.在Ubuntu上创建远程仓库"></a>6.在Ubuntu上创建远程仓库</h3><pre class="line-numbers language-none"><code class="language-none">#切换到git用户，防止要修改文件夹的宿主su git cd &#x2F;var&#x2F;repo&#x2F;#创建远程仓库,仓库名字是&#96;ganahBlog.git&#96;git init --bare &#123;自定义仓库名name&#125;.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/18/o3MaKgUuHzy4sOE.webp" alt="img"></p><h3 id="7-Git-钩子（hooks"><a href="#7-Git-钩子（hooks" class="headerlink" title="7.Git 钩子（hooks)"></a>7.Git 钩子（hooks)</h3><p>执行下面的命令，在自动生成的<code>ganahBlog.git/hooks</code> 目录下创建一个新的钩子文件：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp">vim &#x2F;var&#x2F;repo&#x2F;ganahBlog.git&#x2F;hooks&#x2F;post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开文件后，加入下面的代码：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#!&#x2F;bin&#x2F;bashgit --work-tree&#x3D;&#x2F;var&#x2F;www&#x2F;hexo --git-dir&#x3D;&#x2F;var&#x2F;repo&#x2F;ganahBlog.git checkout -f#git --work-tree就是文件上传位置，--git-dir就是仓库位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2023/04/18/ChQp6coSeHi2mBr.webp" alt="img"></p><p>将文件保存（方法参加上文）后，赋予该文件可执行权限：</p><pre class="line-numbers language-none"><code class="language-none">chmod +x &#x2F;var&#x2F;repo&#x2F;ganahBlog.git&#x2F;hooks&#x2F;post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><a class="btn-beautify outline" href="https://zhuanlan.zhihu.com/p/149294652"   title="Git Hooks 配置"><i class="far fa-hand-point-right"></i><span>Git Hooks 配置</span></a><h3 id="8-使用-Git-部署本地-Hexo-到远端服务器"><a href="#8-使用-Git-部署本地-Hexo-到远端服务器" class="headerlink" title="8. 使用 Git 部署本地 Hexo 到远端服务器"></a>8. 使用 Git 部署本地 Hexo 到远端服务器</h3><p>将服务器地址添加到受信任的站点，在本地任意目录从服务器上把hexo_static仓库克隆下来：</p><pre class="line-numbers language-none"><code class="language-none">git clone root@&#123;云服务器IP&#125;:&#x2F;var&#x2F;repo&#x2F;ganahBlog.git    #测试git功能<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>注意：如果你在远端服务器创建了 Git 用户并设定为拥有者，请将 root 改成 git （git用户）。<br>编辑站点配置文件<code>_config.yml</code> , 将 url 改成<code>https://&#123;云服务器IP&#125;/</code></li></ul><p><img src="https://s2.loli.net/2023/04/18/QvU9fidlNscRBVY.webp" alt="img"></p><p>将 deploy 目标改为 {服务器用户名}@{服务IP}:&#x2F;var&#x2F;repo&#x2F;ganahBlog.git：</p><p><img src="https://s2.loli.net/2023/04/18/zWX24pLcByJAHVF.png" alt="image-20230418210843985"></p><p>在个人博客站点目录下，打开 Git bash ,使用 hexo clean &amp;&amp; hexo g -d 部署：</p><p><img src="https://s2.loli.net/2023/04/18/CLm5PkfMH9jugQe.webp" alt="img"></p><div class="flink"><div class="flink-name">参考文章</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://blog.csdn.net/zc_ad/article/details/84953039" title="CSDN" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="null" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="CSDN" />              </div>              <div class="flink-item-name">CSDN</div>               <div class="flink-item-desc" title="Ubuntu 创建Git远程仓库">Ubuntu 创建Git远程仓库</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://zhuanlan.zhihu.com/p/120743882" title="知乎" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="null" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="知乎" />              </div>              <div class="flink-item-name">知乎</div>               <div class="flink-item-desc" title="将hexo个人博客部署到个人云服务器">将hexo个人博客部署到个人云服务器</div>            </a>          </div></div></div>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python数据类型辨析</title>
      <link href="/posts/19c091e.html"/>
      <url>/posts/19c091e.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center"></th><th align="center">列表</th><th align="center">元组</th><th align="center">集合</th><th align="center">字典</th></tr></thead><tbody><tr><td align="center">英文</td><td align="center">list</td><td align="center">tuple</td><td align="center">set</td><td align="center">dict</td></tr><tr><td align="center">可否读写</td><td align="center">读写</td><td align="center">只读</td><td align="center">读写</td><td align="center">读写</td></tr><tr><td align="center">可否重复</td><td align="center">是</td><td align="center">是</td><td align="center">否</td><td align="center">是</td></tr><tr><td align="center">存储方式</td><td align="center">值</td><td align="center">值</td><td align="center">键(不能重复)</td><td align="center">键值对(键不能重复)</td></tr><tr><td align="center">是否有序</td><td align="center">有序</td><td align="center">有序</td><td align="center">无序</td><td align="center">无序</td></tr></tbody></table><h2 id="列表（list）"><a href="#列表（list）" class="headerlink" title="列表（list）"></a>列表（list）</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">&gt;&gt;&gt; python &#x3D; [&#39;list&#39;,&#39;tuple&#39;,&#39;set&#39;]     #新建一个列表&gt;&gt;&gt; python#查看列表元素[&#39;list&#39;, &#39;tuple&#39;, &#39;set&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="增加元素"><a href="#增加元素" class="headerlink" title="增加元素"></a>增加元素</h3><ul><li><p><code>append</code></p><p>使用方法</p><p>list.append(obj)，obj是一个任意对象</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">&gt;&gt;&gt; python.append(&#39;dict&#39;)#在末尾添加元素&gt;&gt;&gt; python[&#39;list&#39;, &#39;tuple&#39;, &#39;set&#39;, &#39;dict&#39;]&gt;&gt;&gt; python.append(10)   #可以存储数字和字符串&gt;&gt;&gt; python  [&#39;list&#39;, &#39;tuple&#39;, &#39;set&#39;, &#39;dict&#39;, 10]    #插入一个列表，作为一个元素插入&gt;&gt;&gt; type &#x3D; [&#39;列表&#39;,&#39;元组&#39;,&#39;集合&#39;]&gt;&gt;&gt; python.append(type)&gt;&gt;&gt; python[&#39;list&#39;, &#39;tuple&#39;, &#39;set&#39;, [&#39;列表&#39;, &#39;元组&#39;, &#39;集合&#39;]] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code> extend</code></p><p>list.extend(seq)，seq是一个可迭代对象（列表，元组，字符串等）</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">  #插入一个列表，可以迭代插入&gt;&gt;&gt; type &#x3D; [&#39;列表&#39;,&#39;元组&#39;,&#39;集合&#39;]&gt;&gt;&gt; python.extend(type)&gt;&gt;&gt; python[&#39;list&#39;, &#39;tuple&#39;, &#39;set&#39;, &#39;列表&#39;, &#39;元组&#39;, &#39;集合&#39;]    #插入一个字符串，会一个一个字符插入&gt;&gt;&gt; python[&#39;list&#39;, &#39;tuple&#39;, &#39;set&#39;]&gt;&gt;&gt; python.extend(&#39;list&#39;)&gt;&gt;&gt; python[&#39;list&#39;, &#39;tuple&#39;, &#39;set&#39;, &#39;l&#39;, &#39;i&#39;, &#39;s&#39;, &#39;t&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code> insert</code><br>  list.insert(index, obj)，index是对象obj需要插入的索引位置，obj是要插入列表中的对象<pre class="line-numbers language-python" data-language="python"><code class="language-python">&gt;&gt;&gt; python[&#39;list&#39;]&gt;&gt;&gt; python.insert(1,&#39;tuple&#39;)&gt;&gt;&gt; python[&#39;list&#39;, &#39;tuple&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><ul><li><p><code> del</code></p><p>del list[i]，i是列表元素的索引，删除元素</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">&gt;&gt;&gt; python[&#39;list&#39;, &#39;tuple&#39;, &#39;set&#39;, [&#39;列表&#39;, &#39;元组&#39;, &#39;集合&#39;]]&gt;&gt;&gt; del python[3]&gt;&gt;&gt; python[&#39;list&#39;, &#39;tuple&#39;, &#39;set&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code> pop</code></p><p>list.pop(i)，i是列表元素的索引，弹出指定位置元素，没有指定则是最后一个元素</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">&gt;&gt;&gt; python[&#39;list&#39;, &#39;tuple&#39;, &#39;set&#39;, &#39;列表&#39;, &#39;元组&#39;, &#39;集合&#39;]&gt;&gt;&gt; python.pop(3)&#39;列表&#39;&gt;&gt;&gt; python[&#39;list&#39;, &#39;tuple&#39;, &#39;set&#39;, &#39;元组&#39;, &#39;集合&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code> remove</code></p><p>list.remove(value)，value是指定元素值</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">&gt;&gt;&gt; python[&#39;list&#39;, &#39;tuple&#39;, &#39;set&#39;, &#39;元组&#39;, &#39;集合&#39;]&gt;&gt;&gt; python.remove(&#39;元组&#39;)&gt;&gt;&gt; python[&#39;list&#39;, &#39;tuple&#39;, &#39;set&#39;, &#39;集合&#39;] <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  当列表有重复元素，默认移除第一个</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">&gt;&gt;&gt; python[&#39;list&#39;, &#39;tuple&#39;, &#39;set&#39;, &#39;list&#39;]&gt;&gt;&gt; python.remove(&#39;list&#39;)&gt;&gt;&gt; python[&#39;tuple&#39;, &#39;set&#39;, &#39;list&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>切片</code></p><p>object[start_index : end_index : step]</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"> &gt;&gt;&gt; python[&#39;list&#39;, &#39;tuple&#39;, &#39;列表&#39;, &#39;元组&#39;, &#39;集合&#39;]#删除‘列表’，[:2]从头到第2个，[3:]从第3个到结尾&gt;&gt;&gt; python &#x3D; python[:2]+python[3:]&gt;&gt;&gt; python[&#39;list&#39;, &#39;tuple&#39;, &#39;元组&#39;, &#39;集合&#39;]  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <a class="btn-beautify blue" href="https://blog.csdn.net/qq_30460949/article/details/118888961"   title="切片操作"><i class="fa fa-arrow-circle-right"></i><span>切片操作</span></a><h3 id="修改元素"><a href="#修改元素" class="headerlink" title="修改元素"></a>修改元素</h3><ul><li><code> list[i] = value</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">&gt;&gt;&gt; python [&#39;list&#39;,&#39;tuple&#39;,&#39;set&#39;]&gt;&gt;&gt; python[2] &#x3D;  &#39;列表&#39;&gt;&gt;&gt; python[&#39;list&#39;, &#39;tuple&#39;, &#39;列表&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询元素"><a href="#查询元素" class="headerlink" title="查询元素"></a>查询元素</h3><ul><li><code> print(list[i])</code></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">&gt;&gt;&gt; python[&#39;list&#39;, &#39;tuple&#39;, &#39;列表&#39;]&gt;&gt;&gt; print(python[2])列表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="元组-tuple"><a href="#元组-tuple" class="headerlink" title="元组(tuple)"></a>元组(tuple)</h2><p>元组跟列表非常相似，用（）来表示，但是元组是<code>不可变</code>的，<code>不能修改</code>元组，元组<code>可以迭代</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">&gt;&gt;&gt; python &#x3D; (&#39;list&#39;,&#39;tuple&#39;,&#39;dict&#39;)  #新建元组，并初始化&gt;&gt;&gt; python#查询全部(&#39;list&#39;, &#39;tuple&#39;, &#39;dict&#39;)&gt;&gt;&gt; python[1]#查询指定元素&#39;tuple&#39;&gt;&gt;&gt; python.count(&#39;dict&#39;)#查询元素出现次数1&gt;&gt;&gt; python.index(&#39;list&#39;)#查询元素的序号0#如果有两个相同元素，默认输出第一个的元素的序号&gt;&gt;&gt; python &#x3D; (&#39;list&#39;,&#39;tuple&#39;,&#39;dict&#39;,&#39;list&#39;)&gt;&gt;&gt; python.index(&#39;list&#39;)0&gt;&gt;&gt; python &#x3D; (&#39;list&#39;)    #字符串作为迭代元素初始化元组&gt;&gt;&gt; python&#39;list&#39;&gt;&gt;&gt; python[0]&#39;l&#39;&gt;&gt;&gt; python[1]&#39;i&#39;&gt;&gt;&gt; python &#x3D; (&#39;list&#39;,)     #创建只有一个元素的元组&gt;&gt;&gt; python[0]&#39;list&#39;&gt;&gt;&gt; t &#x3D; [&#39;list&#39;,&#39;tuple&#39;,&#39;set&#39;]   #列表迭代初始化&gt;&gt;&gt; python &#x3D; (t)&gt;&gt;&gt; python[&#39;list&#39;, &#39;tuple&#39;, &#39;set&#39;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典(dict)"></a>字典(dict)</h2><ul><li>字典是通过<code>键值对</code>的方式就数据存储下来，键必须是<code>唯一</code>的</li><li>键值对在字典中以这样的方式标记：d &#x3D; {key1 : value1, key2 : value2 }</li><li>注意它们的键&#x2F;值对用冒号分割，而各个对用逗号分割，所有这些都包括在花括号中</li><li>另外，记住字典中的键&#x2F;值对是<code>没有顺序</code>的<pre class="line-numbers language-python" data-language="python"><code class="language-python">#字典的操作，添加，删除，打印&gt;&gt;&gt; python &#x3D; &#123;&#39;list&#39;:&#39;列表&#39;,&#39;tuple&#39;:&#39;元组&#39;,&#39;dict&#39;:&#39;字典&#39;&#125;&gt;&gt;&gt; python[&#39;list&#39;]&#39;列表&#39;&gt;&gt;&gt; python.values()#查看值dict_values([&#39;列表&#39;, &#39;元组&#39;, &#39;字典&#39;])&gt;&gt;&gt; python.keys()#查看键dict_keys([&#39;list&#39;, &#39;tuple&#39;, &#39;dict&#39;])&gt;&gt;&gt; python.items()       #查看键值对dict_items([(&#39;list&#39;, &#39;列表&#39;), (&#39;tuple&#39;, &#39;元组&#39;), (&#39;dict&#39;, &#39;字典&#39;)])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="集合-set"><a href="#集合-set" class="headerlink" title="集合(set)"></a>集合(set)</h2><p>与字典类似，但只包含键，而没有对应的值，<code>迭代初始化</code>，包含的数据<code>不重复</code><br>s &#x3D; set(list or tuple or string)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">#以list数据对集合初始化&gt;&gt;&gt; t &#x3D; [&#39;list&#39;,&#39;tuple&#39;,&#39;dict&#39;]&gt;&gt;&gt; python &#x3D; set(t)&gt;&gt;&gt; python&#123;&#39;list&#39;, &#39;tuple&#39;, &#39;dict&#39;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="flink"><div class="flink-name">参考文章</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://blog.csdn.net/qq_42554007/article/details/90489570" title="CSDN" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="null" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="CSDN" />              </div>              <div class="flink-item-name">CSDN</div>               <div class="flink-item-desc" title="python的列表，字典，元组，集合的区别和各自使用方法">python的列表，字典，元组，集合的区别和各自使用方法</div>            </a>          </div></div></div>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络安全常用术语</title>
      <link href="/posts/d1d1c7d2.html"/>
      <url>/posts/d1d1c7d2.html</url>
      
        <content type="html"><![CDATA[<h3 id="漏洞-vulnerability"><a href="#漏洞-vulnerability" class="headerlink" title="漏洞       vulnerability"></a>漏洞       vulnerability</h3><p> 漏洞指的是硬件、软件协议等存在的 安全 缺陷（非功能性缺陷）</p><h3 id="POC-Proof-of-Conecpt"><a href="#POC-Proof-of-Conecpt" class="headerlink" title="POC        Proof of Conecpt"></a>POC        Proof of Conecpt</h3><p> 能证明漏洞存在的代码</p><h3 id="漏扫"><a href="#漏扫" class="headerlink" title="漏扫"></a>漏扫</h3><p> 基于数据库对漏洞进行自动化扫描</p><h3 id="拿站"><a href="#拿站" class="headerlink" title="拿站"></a>拿站</h3><p> 得到一个网站的最高权限</p><h3 id="拖库（脱裤）"><a href="#拖库（脱裤）" class="headerlink" title="拖库（脱裤）"></a>拖库（脱裤）</h3><p> 网站被入侵，黑客窃取全部数据</p><h3 id="裤子"><a href="#裤子" class="headerlink" title="裤子"></a>裤子</h3><p>即得到的信息数据</p><h3 id="撞库"><a href="#撞库" class="headerlink" title="撞库"></a>撞库</h3><p> 已获得用户数据去批量尝试其他网站</p><h3 id="旁站入侵"><a href="#旁站入侵" class="headerlink" title="旁站入侵"></a>旁站入侵</h3><p> 同一台服务器多个网站，入侵同服务器的其他网站</p><h3 id="横向移动-（内网渗透）"><a href="#横向移动-（内网渗透）" class="headerlink" title="横向移动 （内网渗透）"></a>横向移动 （内网渗透）</h3><p> 攻击者入侵一台服务器成功以后，基于内部网络，继续入侵网段内的其他机器</p><h3 id="代理-proxy"><a href="#代理-proxy" class="headerlink" title="代理         proxy"></a>代理         proxy</h3><p> 帮我们发起网络请求的一台服务器</p><h3 id="补丁-patch"><a href="#补丁-patch" class="headerlink" title="补丁         patch"></a>补丁         patch</h3><p> 漏洞的修复程序</p><h3 id="渗透-penetration"><a href="#渗透-penetration" class="headerlink" title="渗透         penetration"></a>渗透         penetration</h3><ul><li><p>黑客入侵网站或计算机系统，获取到控制计算机权限的过程</p></li><li><p>渗透本身非法，授权的渗透测试合法</p></li></ul><h3 id="渗透测试-penetration-test"><a href="#渗透测试-penetration-test" class="headerlink" title="渗透测试         penetration test"></a>渗透测试         penetration test</h3><h3 id="木马-Trojan-horse"><a href="#木马-Trojan-horse" class="headerlink" title="木马         Trojan horse"></a>木马         Trojan horse</h3><p> 隐藏在计算机中的恶意程序，需要信号接应</p><h3 id="病毒-Virus"><a href="#病毒-Virus" class="headerlink" title="病毒        Virus"></a>病毒        Virus</h3><p> 恶意代码或程序（自动复制执行）</p><h3 id="Getshell"><a href="#Getshell" class="headerlink" title="Getshell"></a>Getshell</h3><p> 获取命令执行环境的操作</p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p> 权限提升 Privilege Escalation</p><h3 id="VPN-Virtual-Private-Network"><a href="#VPN-Virtual-Private-Network" class="headerlink" title="VPN       Virtual Private Network"></a>VPN       Virtual Private Network</h3><ul><li><p>代理    </p></li><li><p>加密通信</p></li></ul><h3 id="蜜罐-Honeypot"><a href="#蜜罐-Honeypot" class="headerlink" title="蜜罐        Honeypot"></a>蜜罐        Honeypot</h3><p> 吸引攻击者攻击的伪装系统，用来实现溯源和反制</p><p> hfish</p><h3 id="沙箱-Sandbox"><a href="#沙箱-Sandbox" class="headerlink" title="沙箱       Sandbox"></a>沙箱       Sandbox</h3><p> 沙箱是一种按照安全策略限制程序的执行环境，就算有恶意代码，也只能影响沙箱环境不会影响到操作系统</p><p> <a href="s.threadbook.cn">微步云沙箱</a></p><h3 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h3><ul><li><p>模拟有漏洞的环境</p></li><li><p>可以是网站、容器、操作系统</p></li></ul><p><img src="https://s2.loli.net/2023/04/19/S5EGPmqUx3eHbV6.png" alt="image-20230414110450975"></p><p><a href="vulnhub.com">操作系统靶场镜像下载</a></p><h3 id="堡垒机"><a href="#堡垒机" class="headerlink" title="堡垒机"></a>堡垒机</h3><ul><li><p>运维中的跳板机   jumpserver</p></li><li><p>运维审计系统——资源、审批、审计、控制访问、事件记录</p></li></ul><h3 id="WAF"><a href="#WAF" class="headerlink" title="WAF"></a>WAF</h3><ul><li><p>Web应用防火墙——Web Application Firewall</p></li><li><p>对HTTP&#x2F;HTTPS的流量内容进行分析，拦截恶意攻击行为</p></li><li><p>硬件WAF、云WAF、软件型WAF</p></li></ul><h3 id="钓鱼网站"><a href="#钓鱼网站" class="headerlink" title="钓鱼网站"></a>钓鱼网站</h3><p> 冒充的网站，用来窃取用户的账号密码</p><h3 id="后门-backdoor"><a href="#后门-backdoor" class="headerlink" title="后门        backdoor"></a>后门        backdoor</h3><h3 id="CVE"><a href="#CVE" class="headerlink" title="CVE"></a>CVE</h3><p>Common Vulnerabilities and Exposures 通用漏洞披露</p><h3 id="CNVD"><a href="#CNVD" class="headerlink" title="CNVD"></a>CNVD</h3><p>国家信息安全漏洞共享平台 <a href="https://www.cnvd.org.cn/">https://www.cnvd.org.cn/</a></p><p>国家计算机应急响应中心 CNCERT维护 <a href="https://www.cert.org.cn/publish/main/index.html">https://www.cert.org.cn/publish/main/index.html</a></p><h3 id="应急响应"><a href="#应急响应" class="headerlink" title="应急响应"></a>应急响应</h3><p>一个公司为了应对各种安全事件所做的准备和事<br>后采取的措施</p><h3 id="SRC"><a href="#SRC" class="headerlink" title="SRC"></a>SRC</h3><p>Security Response Center    企业的应急响应中心<br><a href="http://0xsafe.org/">http://0xsafe.org/</a></p><h3 id="公益SRC"><a href="#公益SRC" class="headerlink" title="公益SRC"></a>公益SRC</h3><p><a href="https://www.vulbox.com/">https://www.vulbox.com/</a></p><p><a href="https://src.sjtu.edu.cn/">https://src.sjtu.edu.cn/</a></p><h3 id="网络空间测绘"><a href="#网络空间测绘" class="headerlink" title="网络空间测绘"></a>网络空间测绘</h3><ul><li><p>网络空间资源收录</p></li><li><p>网络空间搜索引擎</p><blockquote><p><a href="http://www.shodan.io/">www.shodan.io</a></p></blockquote></li></ul><blockquote><p><a href="https://fofa.info/">https://fofa.info/</a></p><p><a href="http://www.zoomeye.org/">www.zoomeye.org</a></p></blockquote><h3 id="ATT-amp-CK"><a href="#ATT-amp-CK" class="headerlink" title="ATT&amp;CK"></a>ATT&amp;CK</h3><ul><li><p>Adversarial Tactics, Techniques, and Common Knowledge  对抗战术、技术和通用知识   （攻击者技战术的知识库）</p></li><li><p>Mitre</p></li><li><p>风险分析模型 收集威胁情报，模拟APT攻击</p></li></ul><h3 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h3><ul><li>Reverse</li><li>把程序还原为源代码，分析程序的运行过程</li></ul><h3 id="CICD"><a href="#CICD" class="headerlink" title="CICD"></a>CICD</h3><p><img src="https://s2.loli.net/2023/04/24/dHhwNxqlF9ryRum.png" alt="image-20230424120246539"></p><h3 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h3><ul><li><p>Development +Operations</p></li><li><p>开发测试运维一体化</p></li></ul><h3 id="DevSecOps"><a href="#DevSecOps" class="headerlink" title="DevSecOps"></a>DevSecOps</h3><p>Development + Security + Operations     安全开发与运维</p><h3 id="APT"><a href="#APT" class="headerlink" title="APT"></a>APT</h3><ul><li><p>Advanced Persistent Thread</p></li><li><p>APT 攻击高级     可持续威胁攻击，指对特定对象展开的持续有效的攻击活动</p></li></ul><h3 id="等保"><a href="#等保" class="headerlink" title="等保"></a>等保</h3><ul><li><p>网络安全等级保护</p></li><li><p>要求相关行业的单位和公司的信息系统必须进行定级，然后在公安机关<br>备案。然后建设整改，然后由测评机构评级，并且持续维护和监督</p></li></ul><h3 id="护网-（HVV）"><a href="#护网-（HVV）" class="headerlink" title="护网 （HVV）"></a>护网 （HVV）</h3><ul><li><p>国家组织牵头组织事业单位，国企单位，名企单位等1开展攻防两方的网络安全演习</p></li><li><p>攻-红     防-蓝</p></li></ul><h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><ul><li>Capture The  Flag     夺旗赛</li><li>在线CTF</li></ul><blockquote><p>bugku <a href="https://ctf.bugku.com/challenges/index">https://ctf.bugku.com/challenges/index</a></p><p>北京联合大学  <a href="https://buuoj.cn/challenges">https://buuoj.cn/challenges</a></p><p>CTFHub  <a href="https://www.ctfhub.com/">https://www.ctfhub.com/</a></p><p>bmzCTF  <a href="http://bmzclub.cn/challenges">http://bmzclub.cn/challenges</a></p><p>攻防世界  <a href="https://adworld.xctf.org.cn/">https://adworld.xctf.org.cn</a></p><p>CTFSHOW  <a href="https://ctf.show/challenges">https://ctf.show/challenges</a></p></blockquote><p><img src="C:\Users\23065\AppData\Roaming\Typora\typora-user-images\image-20230421105053629.png" alt="image-20230421105053629"></p><h3 id="跳板机"><a href="#跳板机" class="headerlink" title="跳板机"></a>跳板机</h3><p> 防止被追溯和识别身份，利用获取的肉鸡的来攻击其他目标</p><h3 id="webshell"><a href="#webshell" class="headerlink" title="webshell"></a>webshell</h3><p><img src="https://s2.loli.net/2023/04/12/BqoM4KlLrTHNmhd.png" alt="image_3.png"></p><h3 id="中间人攻击-Man-inMiddle"><a href="#中间人攻击-Man-inMiddle" class="headerlink" title="中间人攻击        Man-inMiddle"></a>中间人攻击        Man-inMiddle</h3><p><img src="https://s2.loli.net/2023/04/12/WhxfjUuzlCAbIFG.png" alt="image_2.png"></p><h3 id="0day"><a href="#0day" class="headerlink" title="0day"></a>0day</h3><ul><li><p>使用量非常大的通用产品的漏洞，有影响力</p></li><li><p>少数人发现还没有公开</p></li></ul><h3 id="攻击载荷-payload"><a href="#攻击载荷-payload" class="headerlink" title="攻击载荷       payload"></a>攻击载荷       payload</h3><p> 攻击的输入信息</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><ul><li><p>Exploit 利用</p></li><li><p>执行了这一段利用代码之后，就能达到攻击的目的</p></li></ul><h3 id="0day、1day、Nday"><a href="#0day、1day、Nday" class="headerlink" title="0day、1day、Nday"></a>0day、1day、Nday</h3><p><img src="https://s2.loli.net/2023/04/12/oXmUzR7kIveNF9W.png" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> 网安 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 术语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些Html特效代码</title>
      <link href="/posts/125c0d83.html"/>
      <url>/posts/125c0d83.html</url>
      
        <content type="html"><![CDATA[<h2 id="烂漫粉色爱心"><a href="#烂漫粉色爱心" class="headerlink" title="烂漫粉色爱心"></a>烂漫粉色爱心</h2><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid2267374-20221128-1669638145563" alt="粉色爱心"></p><a class="btn-beautify outline" href="/add/01.html"   title="示例"><i class="far fa-hand-point-right"></i><span>示例</span></a><p>源代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;&lt;title&gt;粉色爱心&lt;&#x2F;title&gt; &lt;style&gt;html, body &#123;  height: 100%;  padding: 0;  margin: 0;  background: #000;&#125;canvas &#123;  width: 100%;  height: 100%;&#125;&lt;&#x2F;style&gt; &lt;&#x2F;head&gt;&lt;body&gt; &lt;div style&#x3D;&quot;text-align:center;clear:both;&quot;&gt;&lt;script src&#x3D;&quot;&#x2F;gg_bd_ad_720x90.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;&lt;script src&#x3D;&quot;&#x2F;follow.js&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;&lt;&#x2F;div&gt; &lt;canvas id&#x3D;&quot;pinkboard&quot;&gt;&lt;&#x2F;canvas&gt; &lt;script&gt;var settings &#x3D; &#123;  particles: &#123;    length:   500,    duration:   2,    velocity: 100,    effect: -0.75,    size:      30,  &#125;,&#125;; (function()&#123;var b&#x3D;0;var c&#x3D;[&quot;ms&quot;,&quot;moz&quot;,&quot;webkit&quot;,&quot;o&quot;];for(var a&#x3D;0;a&lt;c.length&amp;&amp;!window.requestAnimationFrame;++a)&#123;window.requestAnimationFrame&#x3D;window[c[a]+&quot;RequestAnimationFrame&quot;];window.cancelAnimationFrame&#x3D;window[c[a]+&quot;CancelAnimationFrame&quot;]||window[c[a]+&quot;CancelRequestAnimationFrame&quot;]&#125;if(!window.requestAnimationFrame)&#123;window.requestAnimationFrame&#x3D;function(h,e)&#123;var d&#x3D;new Date().getTime();var f&#x3D;Math.max(0,16-(d-b));var g&#x3D;window.setTimeout(function()&#123;h(d+f)&#125;,f);b&#x3D;d+f;return g&#125;&#125;if(!window.cancelAnimationFrame)&#123;window.cancelAnimationFrame&#x3D;function(d)&#123;clearTimeout(d)&#125;&#125;&#125;()); var Point &#x3D; (function() &#123;  function Point(x, y) &#123;    this.x &#x3D; (typeof x !&#x3D;&#x3D; &#39;undefined&#39;) ? x : 0;    this.y &#x3D; (typeof y !&#x3D;&#x3D; &#39;undefined&#39;) ? y : 0;  &#125;  Point.prototype.clone &#x3D; function() &#123;    return new Point(this.x, this.y);  &#125;;  Point.prototype.length &#x3D; function(length) &#123;    if (typeof length &#x3D;&#x3D; &#39;undefined&#39;)      return Math.sqrt(this.x * this.x + this.y * this.y);    this.normalize();    this.x *&#x3D; length;    this.y *&#x3D; length;    return this;  &#125;;  Point.prototype.normalize &#x3D; function() &#123;    var length &#x3D; this.length();    this.x &#x2F;&#x3D; length;    this.y &#x2F;&#x3D; length;    return this;  &#125;;  return Point;&#125;)(); var Particle &#x3D; (function() &#123;  function Particle() &#123;    this.position &#x3D; new Point();    this.velocity &#x3D; new Point();    this.acceleration &#x3D; new Point();    this.age &#x3D; 0;  &#125;  Particle.prototype.initialize &#x3D; function(x, y, dx, dy) &#123;    this.position.x &#x3D; x;    this.position.y &#x3D; y;    this.velocity.x &#x3D; dx;    this.velocity.y &#x3D; dy;    this.acceleration.x &#x3D; dx * settings.particles.effect;    this.acceleration.y &#x3D; dy * settings.particles.effect;    this.age &#x3D; 0;  &#125;;  Particle.prototype.update &#x3D; function(deltaTime) &#123;    this.position.x +&#x3D; this.velocity.x * deltaTime;    this.position.y +&#x3D; this.velocity.y * deltaTime;    this.velocity.x +&#x3D; this.acceleration.x * deltaTime;    this.velocity.y +&#x3D; this.acceleration.y * deltaTime;    this.age +&#x3D; deltaTime;  &#125;;  Particle.prototype.draw &#x3D; function(context, image) &#123;    function ease(t) &#123;      return (--t) * t * t + 1;    &#125;    var size &#x3D; image.width * ease(this.age &#x2F; settings.particles.duration);    context.globalAlpha &#x3D; 1 - this.age &#x2F; settings.particles.duration;    context.drawImage(image, this.position.x - size &#x2F; 2, this.position.y - size &#x2F; 2, size, size);  &#125;;  return Particle;&#125;)(); var ParticlePool &#x3D; (function() &#123;  var particles,      firstActive &#x3D; 0,      firstFree   &#x3D; 0,      duration    &#x3D; settings.particles.duration;    function ParticlePool(length) &#123;    particles &#x3D; new Array(length);    for (var i &#x3D; 0; i &lt; particles.length; i++)      particles[i] &#x3D; new Particle();  &#125;  ParticlePool.prototype.add &#x3D; function(x, y, dx, dy) &#123;    particles[firstFree].initialize(x, y, dx, dy);        firstFree++;    if (firstFree   &#x3D;&#x3D; particles.length) firstFree   &#x3D; 0;    if (firstActive &#x3D;&#x3D; firstFree       ) firstActive++;    if (firstActive &#x3D;&#x3D; particles.length) firstActive &#x3D; 0;  &#125;;  ParticlePool.prototype.update &#x3D; function(deltaTime) &#123;    var i;        if (firstActive &lt; firstFree) &#123;      for (i &#x3D; firstActive; i &lt; firstFree; i++)        particles[i].update(deltaTime);    &#125;    if (firstFree &lt; firstActive) &#123;      for (i &#x3D; firstActive; i &lt; particles.length; i++)        particles[i].update(deltaTime);      for (i &#x3D; 0; i &lt; firstFree; i++)        particles[i].update(deltaTime);    &#125;        while (particles[firstActive].age &gt;&#x3D; duration &amp;&amp; firstActive !&#x3D; firstFree) &#123;      firstActive++;      if (firstActive &#x3D;&#x3D; particles.length) firstActive &#x3D; 0;    &#125;          &#125;;  ParticlePool.prototype.draw &#x3D; function(context, image) &#123;    if (firstActive &lt; firstFree) &#123;      for (i &#x3D; firstActive; i &lt; firstFree; i++)        particles[i].draw(context, image);    &#125;    if (firstFree &lt; firstActive) &#123;      for (i &#x3D; firstActive; i &lt; particles.length; i++)        particles[i].draw(context, image);      for (i &#x3D; 0; i &lt; firstFree; i++)        particles[i].draw(context, image);    &#125;  &#125;;  return ParticlePool;&#125;)(); (function(canvas) &#123;  var context &#x3D; canvas.getContext(&#39;2d&#39;),      particles &#x3D; new ParticlePool(settings.particles.length),      particleRate &#x3D; settings.particles.length &#x2F; settings.particles.duration, &#x2F;&#x2F; particles&#x2F;sec      time;    function pointOnHeart(t) &#123;    return new Point(      160 * Math.pow(Math.sin(t), 3),      130 * Math.cos(t) - 50 * Math.cos(2 * t) - 20 * Math.cos(3 * t) - 10 * Math.cos(4 * t) + 25    );  &#125;    var image &#x3D; (function() &#123;    var canvas  &#x3D; document.createElement(&#39;canvas&#39;),        context &#x3D; canvas.getContext(&#39;2d&#39;);    canvas.width  &#x3D; settings.particles.size;    canvas.height &#x3D; settings.particles.size;    function to(t) &#123;      var point &#x3D; pointOnHeart(t);      point.x &#x3D; settings.particles.size &#x2F; 2 + point.x * settings.particles.size &#x2F; 350;      point.y &#x3D; settings.particles.size &#x2F; 2 - point.y * settings.particles.size &#x2F; 350;      return point;    &#125;    context.beginPath();    var t &#x3D; -Math.PI;    var point &#x3D; to(t);    context.moveTo(point.x, point.y);    while (t &lt; Math.PI) &#123;      t +&#x3D; 0.01;       point &#x3D; to(t);      context.lineTo(point.x, point.y);    &#125;    context.closePath();&#x2F;&#x2F; &lt;!-- 粉色#ea80b0--&gt;    context.fillStyle &#x3D; &#39;#ea80b0&#39;;    context.fill();      var image &#x3D; new Image();    image.src &#x3D; canvas.toDataURL();    return image;  &#125;)();    function render() &#123;    requestAnimationFrame(render);        var newTime   &#x3D; new Date().getTime() &#x2F; 1000,        deltaTime &#x3D; newTime - (time || newTime);    time &#x3D; newTime;        context.clearRect(0, 0, canvas.width, canvas.height);        var amount &#x3D; particleRate * deltaTime;    for (var i &#x3D; 0; i &lt; amount; i++) &#123;      var pos &#x3D; pointOnHeart(Math.PI - 2 * Math.PI * Math.random());      var dir &#x3D; pos.clone().length(settings.particles.velocity);      particles.add(canvas.width &#x2F; 2 + pos.x, canvas.height &#x2F; 2 - pos.y, dir.x, -dir.y);    &#125;        particles.update(deltaTime);    particles.draw(context, image);  &#125;    function onResize() &#123;    canvas.width  &#x3D; canvas.clientWidth;    canvas.height &#x3D; canvas.clientHeight;  &#125;  window.onresize &#x3D; onResize;    setTimeout(function() &#123;    onResize();    render();  &#125;, 10);&#125;)(document.getElementById(&#39;pinkboard&#39;)); &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="恋爱计时器"><a href="#恋爱计时器" class="headerlink" title="恋爱计时器"></a>恋爱计时器</h2><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid2267374-20221128-1669647394651" alt="恋爱计时器"></p><a class="btn-beautify outline" href="/add/03.html"   title="示例"><i class="far fa-hand-point-right"></i><span>示例</span></a><p>源代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;    &lt;title&gt;恋爱计时器&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;         &lt;div id&#x3D;&quot;elapseClock&quot;&gt;&lt;&#x2F;div&gt;    &lt;script&gt;        var t &#x3D; null;        t &#x3D; setTimeout(time, 1000);        function time() &#123;            clearTimeout(t);            BirthDay &#x3D; new Date(&quot;december 17,2021&quot;);            today &#x3D; new Date();            timeold &#x3D; (today.getTime() - BirthDay.getTime());            sectimeold &#x3D; timeold &#x2F; 1000            secondsold &#x3D; Math.floor(sectimeold);            msPerDay &#x3D; 24 * 60 * 60 * 1000            e_daysold &#x3D; timeold &#x2F; msPerDay            daysold &#x3D; Math.floor(e_daysold);            e_hrsold &#x3D; (e_daysold - daysold) * 24;            hrsold &#x3D; Math.floor(e_hrsold);            e_minsold &#x3D; (e_hrsold - hrsold) * 60;            minsold &#x3D; Math.floor((e_hrsold - hrsold) * 60);            seconds &#x3D; Math.floor((e_minsold - minsold) * 60);            &#x2F;&#x2F; document.write(&quot;2002年已经过去了&quot;+daysold+&quot;天&quot;+hrsold+&quot;小时&quot;+minsold+&quot;分&quot;+seconds+&quot;秒啦!&quot;);           var result &#x3D; document.getElementById(&quot;elapseClock&quot;)           result.innerHTML&#x3D;&quot;&lt;span class&#x3D;\&quot;digit\&quot;&gt;&quot; + daysold + &quot;&lt;&#x2F;span&gt; 天 &lt;span class&#x3D;\&quot;digit\&quot;&gt;&quot; + hrsold + &quot;&lt;&#x2F;span&gt; 时 &lt;span class&#x3D;\&quot;digit\&quot;&gt;&quot; + minsold + &quot;&lt;&#x2F;span&gt; 分 &lt;span class&#x3D;\&quot;digit\&quot;&gt;&quot; + seconds + &quot;&lt;&#x2F;span&gt; 秒&quot;            t &#x3D; setTimeout(time, 500);        &#125;    &lt;&#x2F;script&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="爱心跳动"><a href="#爱心跳动" class="headerlink" title="爱心跳动"></a>爱心跳动</h2><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid2267374-20221128-1669640995392" alt="爱心跳动"></p><a class="btn-beautify outline" href="/add/02.html"   title="示例"><i class="far fa-hand-point-right"></i><span>示例</span></a><p>源代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset&#x3D;&quot;UTF-8&quot; &#x2F;&gt;    &lt;title&gt;爱心跳动&lt;&#x2F;title&gt;    &lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;       html, body&#123;          width: 100%;          height: 100%;          min-width: 500px;          min-height: 500px;          overflow: hidden;        &#125;        .heart &#123;          position: absolute;          width: 100px;          height: 90px;          top: 50%;          left: 50%;          margin-top: -45px;          margin-left: -50px;        &#125;        .heart:before,        .heart:after &#123;          position: absolute;          content: &quot;&quot;;          left: 50px;          top: 0;          width: 50px;          height: 80px;          background: #fc2e5a;          border-radius: 50px 50px 0 0;          transform: rotate(-45deg);          transform-origin: 0 100%;        &#125;        .heart:after &#123;          left: 0;          transform: rotate(45deg);          transform-origin :100% 100%;        &#125;        .heart1&#123;           animation: heart-anim 1s linear .4s infinite;        &#125;        .heart2&#123;           animation: pounding .5s linear infinite alternate;        &#125;        .heart1:after, .heart1:before&#123;          background-color: #ff7693;        &#125;        @keyframes pounding&#123;          0%&#123; transform: scale(1.5); &#125;          100%&#123; transform: scale(1); &#125;        &#125;        @keyframes heart-anim &#123;          46% &#123;            transform: scale(1);          &#125;          50% &#123;            transform: scale(1.3);          &#125;          52% &#123;            transform: scale(1.5);          &#125;          55% &#123;            transform: scale(3);          &#125;          100% &#123;            opacity: 0;            transform: scale(50);          &#125;        &#125;        &lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;    &lt;!--外圈大心--&gt;   &lt;div class&#x3D;&quot;heart heart1&quot;&gt;&lt;&#x2F;div&gt;  &lt;!--里面小心--&gt;   &lt;div class&#x3D;&quot;heart heart2&quot;&gt;&lt;&#x2F;div&gt;   &lt;&#x2F;body&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;&lt;&#x2F;script&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="黑客数据雨"><a href="#黑客数据雨" class="headerlink" title="黑客数据雨"></a>黑客数据雨</h2><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid2267374-20221128-1669641103179" alt="数据雨"></p><a class="btn-beautify outline" href="/add/10.html"   title="示例"><i class="far fa-hand-point-right"></i><span>示例</span></a><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;head&gt;    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot; &#x2F;&gt;    &lt;title&gt;MGT-404&lt;&#x2F;title&gt;    &lt;style&gt;      * &#123;        margin: 0;        padding: 0;      &#125;      body &#123;        background: black;          &#x2F;* 此处调整初次闪屏背景颜色 *&#x2F;      &#125;      canvas &#123;        display: block;      &#125;    &lt;&#x2F;style&gt;  &lt;&#x2F;head&gt;  &lt;body&gt;    &lt;canvas id&#x3D;&quot;ad&quot;&gt;&lt;&#x2F;canvas&gt;    &lt;script&gt;      var ad &#x3D; document.getElementById(&quot;ad&quot;);      var ctx &#x3D; ad.getContext(&quot;2d&quot;);      ad.height &#x3D; window.innerHeight;      ad.width &#x3D; window.innerWidth;      var chinese &#x3D; &quot;GREEF&quot;;   &#x2F;&#x2F;&lt;!--此处添加需要显示的文字--&gt;      chinese &#x3D; chinese.split(&quot;&quot;);      var font_size &#x3D; 10;  &#x2F;&#x2F;&#x2F;&lt;!--此处调整字符大小--&gt;      var columns &#x3D; ad.width &#x2F; font_size;      var drops &#x3D; [];      for (var x &#x3D; 0; x &lt; columns; x++) drops[x] &#x3D; 1;      function draw() &#123;        ctx.fillStyle &#x3D; &quot;rgba(0, 0, 0, 0.05)&quot;;  &#x2F;&#x2F;&lt;!--此处最后一个参数调整背景字符透明度--&gt;        ctx.fillRect(0, 0, ad.width, ad.height);        ctx.fillStyle &#x3D; &quot;#0F0&quot;;   &#x2F;&#x2F;&lt;!--此处为字体颜色，十六进制颜色码--&gt;        ctx.font &#x3D; font_size + &quot;px arial&quot;;        for (var i &#x3D; 0; i &lt; drops.length; i++) &#123;          var text &#x3D; chinese[Math.floor(Math.random() * chinese.length)]; &#x2F;&#x2F; &lt;!--此处修改成text&#x3D;&quot;具体文字&quot;  可以实现只显示固定文字无随机闪烁效果--&gt;          ctx.fillText(text, i * font_size, drops[i] * font_size);          if (drops[i] * font_size &gt; ad.height &amp;&amp; Math.random() &gt; 0.90)  &#x2F;&#x2F;&lt;!--此处最后一个参数调整文字离散程度，数字越小越密集--&gt;            drops[i] &#x3D; 0;          drops[i]++;        &#125;      &#125;      setInterval(draw, 70); &#x2F;&#x2F;&lt;!--此处调整下落速度，数字越小越快--&gt;    &lt;&#x2F;script&gt;  &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后，恋爱nao版爱心雨<br><img src="https://dn-simplecloud.shiyanlou.com/courses/uid2267374-20221128-1669641274833" alt="爱心雨"></p><a class="btn-beautify outline" href="/add/06.html"   title="示例"><i class="far fa-hand-point-right"></i><span>示例</span></a><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html&gt;  &lt;head&gt;    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot; &#x2F;&gt;    &lt;title&gt;MGT-404&lt;&#x2F;title&gt;    &lt;style&gt;      * &#123;        margin: 0;        padding: 0;      &#125;      body &#123;        background: black;       &#125;      canvas &#123;        display: block;      &#125;    &lt;&#x2F;style&gt;  &lt;&#x2F;head&gt;  &lt;body&gt;    &lt;canvas id&#x3D;&quot;ad&quot;&gt;&lt;&#x2F;canvas&gt;    &lt;script&gt;      var ad &#x3D; document.getElementById(&quot;ad&quot;);      var ctx &#x3D; ad.getContext(&quot;2d&quot;);      ad.height &#x3D; window.innerHeight;      ad.width &#x3D; window.innerWidth;      var chinese &#x3D; &quot;love&quot;;         chinese &#x3D; chinese.split(&quot;&quot;);      var font_size &#x3D; 10;        var columns &#x3D; ad.width &#x2F; font_size;      var drops &#x3D; [];      for (var x &#x3D; 0; x &lt; columns; x++) drops[x] &#x3D; 1;      function draw() &#123;        ctx.fillStyle &#x3D; &quot;rgba(0, 0, 0, 0.05)&quot;; &#x2F;&#x2F;此处最后一个参数调整背景字符透明度        ctx.fillRect(0, 0, ad.width, ad.height);        ctx.fillStyle &#x3D; &quot;#ea80b0&quot;;&#x2F;&#x2F;&quot;#0F0&quot;;   &#x2F;&#x2F;此处为字体颜色，十六进制颜色码        ctx.font &#x3D; font_size + &quot;px arial&quot;;        for (var i &#x3D; 0; i &lt; drops.length; i++) &#123;          var text &#x3D; &quot;❤&quot;;&#x2F;&#x2F;chinese[Math.floor(Math.random() * chinese.length)];  &#x2F;&#x2F;此处修改成text&#x3D;&quot;具体文字&quot;  可以实现只显示固定文字无随机闪烁效果          ctx.fillText(text, i * font_size, drops[i] * font_size);          if (drops[i] * font_size &gt; ad.height &amp;&amp; Math.random() &gt; 0.975)  &#x2F;&#x2F;此处最后一个参数调整文字离散程度，数字越小越密集            drops[i] &#x3D; 0;          drops[i]++;        &#125;      &#125;      setInterval(draw, 70); &#x2F;&#x2F;此处调整下落速度，数字越小越快    &lt;&#x2F;script&gt;  &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>另外一些很炫的动画特效</p></blockquote><h2 id="炫酷色彩"><a href="#炫酷色彩" class="headerlink" title="炫酷色彩"></a>炫酷色彩</h2><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid2267374-20221128-1669647559166" alt="炫酷色彩"></p><a class="btn-beautify outline" href="/add/04.html"   title="示例"><i class="far fa-hand-point-right"></i><span>示例</span></a><p>源代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;1999&#x2F;xhtml&quot; lang&#x3D;&quot;en&quot;&gt;&lt;head&gt;&lt;title&gt;star&lt;&#x2F;title&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;window.onload &#x3D; function () &#123;C &#x3D; Math.cos; &#x2F;&#x2F; cache Math objectsS &#x3D; Math.sin;U &#x3D; 0;w &#x3D; window;j &#x3D; document;d &#x3D; j.getElementById(&quot;c&quot;);c &#x3D; d.getContext(&quot;2d&quot;);W &#x3D; d.width &#x3D; w.innerWidth;H &#x3D; d.height &#x3D; w.innerHeight;c.fillRect(0, 0, W, H); &#x2F;&#x2F; resize &lt;canvas&gt; and draw black rect (default)c.globalCompositeOperation &#x3D; &quot;lighter&quot;;  &#x2F;&#x2F; switch to additive color applicationc.lineWidth &#x3D; 0.2;c.lineCap &#x3D; &quot;round&quot;;var bool &#x3D; 0, t &#x3D; 0; &#x2F;&#x2F; thetad.onmousemove &#x3D; function (e) &#123;if(window.T) &#123;if(D&#x3D;&#x3D;9) &#123; D&#x3D;Math.random()*15; f(1); &#125;clearTimeout(T);&#125;X &#x3D; e.pageX; &#x2F;&#x2F; grab mouse pixel coordsY &#x3D; e.pageY;a&#x3D;0; &#x2F;&#x2F; previous coord.xb&#x3D;0; &#x2F;&#x2F; previous coord.y A &#x3D; X, &#x2F;&#x2F; original coord.xB &#x3D; Y; &#x2F;&#x2F; original coord.yR&#x3D;(e.pageX&#x2F;W * 999&gt;&gt;0)&#x2F;999;r&#x3D;(e.pageY&#x2F;H * 999&gt;&gt;0)&#x2F;999;U&#x3D;e.pageX&#x2F;H * 360 &gt;&gt;0;D&#x3D;9;g &#x3D; 360 * Math.PI &#x2F; 180;T &#x3D; setInterval(f &#x3D; function (e) &#123; &#x2F;&#x2F; start looping spectrumc.save();c.globalCompositeOperation &#x3D; &quot;source-over&quot;; &#x2F;&#x2F; switch to additive color applicationif(e!&#x3D;1) &#123;c.fillStyle &#x3D; &quot;rgba(0,0,0,0.02)&quot;;c.fillRect(0, 0, W, H); &#x2F;&#x2F; resize &lt;canvas&gt; and draw black rect (default)&#125;c.restore();i &#x3D; 25; while(i --) &#123;c.beginPath();if(D &gt; 450 || bool) &#123; &#x2F;&#x2F; decrease diameterif(!bool) &#123; &#x2F;&#x2F; has hit maximumbool &#x3D; 1;&#125;if(D &lt; 0.1) &#123; &#x2F;&#x2F; has hit minimumbool &#x3D; 0;&#125;t -&#x3D; g; &#x2F;&#x2F; decrease thetaD -&#x3D; 0.1; &#x2F;&#x2F; decrease size&#125;if(!bool) &#123;t +&#x3D; g; &#x2F;&#x2F; increase thetaD +&#x3D; 0.1; &#x2F;&#x2F; increase size&#125;q &#x3D; (R &#x2F; r - 1) * t; &#x2F;&#x2F; create hypotrochoid from current mouse position, and setup variables (see: http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hypotrochoid)x &#x3D; (R - r) * C(t) + D * C(q) + (A + (X - A) * (i &#x2F; 25)) + (r - R); &#x2F;&#x2F; center on xy coordsy &#x3D; (R - r) * S(t) - D * S(q) + (B + (Y - B) * (i &#x2F; 25));if (a) &#123; &#x2F;&#x2F; draw once two points are setc.moveTo(a, b);c.lineTo(x, y)&#125;c.strokeStyle &#x3D; &quot;hsla(&quot; + (U % 360) + &quot;,100%,50%,0.75)&quot;; &#x2F;&#x2F; draw rainbow hypotrochoidc.stroke();a &#x3D; x; &#x2F;&#x2F; set previous coord.xb &#x3D; y; &#x2F;&#x2F; set previous coord.y&#125;U -&#x3D; 0.5; &#x2F;&#x2F; increment hueA &#x3D; X; &#x2F;&#x2F; set original coord.xB &#x3D; Y; &#x2F;&#x2F; set original coord.y&#125;, 16);&#125;j.onkeydown &#x3D; function(e) &#123; a&#x3D;b&#x3D;0; R +&#x3D; 0.05 &#125;d.onmousemove(&#123;pageX:300, pageY:290&#125;)&#125;&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;&lt;body style&#x3D;&quot;margin:0px;padding:0px;width:100%;height:100%;overflow:hidden;&quot;&gt;&lt;canvas id&#x3D;&quot;c&quot;&gt;&lt;&#x2F;canvas&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="星空动画"><a href="#星空动画" class="headerlink" title="星空动画"></a>星空动画</h2><p><img src="https://dn-simplecloud.shiyanlou.com/courses/uid2267374-20221128-1669641614970" alt="星空动画"></p><a class="btn-beautify outline" href="/add/08.html"   title="示例"><i class="far fa-hand-point-right"></i><span>示例</span></a><p>源代码</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html&gt;    &lt;head&gt;        &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;        &lt;title&gt;&lt;&#x2F;title&gt;        &lt;style&gt;            body &#123;              width: 100%;              margin: 0;              overflow: hidden;            &#125;            canvas&#123;              display:block;            &#125;        &lt;&#x2F;style&gt;    &lt;&#x2F;head&gt;    &lt;body&gt;        &lt;canvas id&#x3D;&#39;canv&#39;&gt;&lt;&#x2F;canvas&gt;        &lt;script&gt;            var c &#x3D; document.getElementById(&#39;canv&#39;);&#x2F;&#x2F;获取canvas的Id            var $ &#x3D; c.getContext(&#39;2d&#39;);&#x2F;*设置绘制方式*&#x2F;            var u &#x3D; 0;            var go &#x3D; function() &#123;              var sc, g, g1, i, j, p, x, y, z, w, a, cur,                d &#x3D; new Date() &#x2F; 1000,                rnd &#x3D; shift(),                rnd1 &#x3D; d,                rnd2 &#x3D; 2.4,                rnd3 &#x3D; d * 0.2,                rnd1c &#x3D; Math.cos(rnd1),                rnd1s &#x3D; Math.sin(rnd1),                rnd2c &#x3D; Math.cos(rnd2),                rnd2s &#x3D; Math.sin(rnd2);              c.width &#x3D; window.innerWidth;              c.height &#x3D; window.innerHeight;              sc &#x3D; Math.max(c.width, c.height);              $.translate(c.width * 0.5, c.height * 0.5);&#x2F;&#x2F;从中心开始绘制              $.scale(sc, sc);&#x2F;&#x2F;放大最大数值              &#x2F;*线性渐变*&#x2F;              g &#x3D; $.createLinearGradient(-1, -2, 1, 2);              g.addColorStop(0.0, &#39;hsla(338, 95%, 25%, 1)&#39;);              g.addColorStop(0.5, &#39;hsla(260, 95%, 5%, 1)&#39;);              g.addColorStop(1.0, &#39;hsla(338, 95%, 30%, 1)&#39;);              $.fillStyle &#x3D; g;&#x2F;&#x2F;颜色              $.fillRect(-0.5, -0.5, 1, 1);              $.globalCompositeOperation &#x3D; &#39;lighter&#39;;              $.rotate(rnd3 % Math.PI * 2);&#x2F;*旋转*&#x2F;              for (i &#x3D; 0; i &lt; 300; i +&#x3D; 1) &#123;                p &#x3D; rnd();                x &#x3D; (p &amp; 0xff) &#x2F; 128 - 1;                y &#x3D; (p &gt;&gt;&gt; 8 &amp; 0xff) &#x2F; 128 - 1;                z &#x3D; (p &gt;&gt;&gt; 16 &amp; 0xff) &#x2F; 128 - 1;                w &#x3D; (p &gt;&gt;&gt; 24 &amp; 0xff) &#x2F; 256;                z +&#x3D; d * 0.5;                z &#x3D; (z + 1) % 2 - 1;                a &#x3D; (z + 1) * 0.5;                if (a &lt; 0.9) &#123;                  $.globalAlpha &#x3D; a &#x2F; 0.7;                &#125;else &#123;                  a -&#x3D; 0.9;                  $.globalAlpha &#x3D; 1 - a &#x2F; 0.1;                &#125;                cur &#x3D; x * rnd1c + y * rnd1s;                y &#x3D; x * rnd1s - y * rnd1c;                x &#x3D; cur;                cur &#x3D; y * rnd2c + z * rnd2s;                z &#x3D; y * rnd2s - z * rnd2c;                y &#x3D; cur;                z -&#x3D; 0.65;                if (z &gt;&#x3D; 0) &#123;                  continue;                &#125;                sc &#x3D; 0.1 &#x2F; z;                x *&#x3D; sc;                y *&#x3D; sc;                $.save();                g1 &#x3D; $.createRadialGradient(1, 1, 2, 1, 1, 1);                g1.addColorStop(0.0, &#39;hsla(&#39;+i+&#39;, 70%, 40%,.8)&#39;);                g1.addColorStop(0.5, &#39;hsla(&#39;+i+&#39;, 75%, 50%, 1)&#39;);                g1.addColorStop(1.0, &#39;hsla(&#39;+i+&#39;, 80%, 60%, .8)&#39;);                $.fillStyle &#x3D; g1;                $.translate(x, y);                $.scale(sc * 0.017, sc * 0.017);                $.beginPath();                $.moveTo(2, 0);                for (j &#x3D; 0; j &lt; 10; j +&#x3D; 1) &#123;                  $.rotate(Math.PI*2 * 0.1);                  $.lineTo(j % 2 + 1, 0);                &#125;                $.arc(10, 10, 1, 0, Math.PI * 2);                    $.rotate(Math.PI * 2 * 0.1);                $.closePath();                $.fill();                $.restore();              &#125;            &#125;;            &#x2F;*            Marsaglia&#39;s Xorshift128 PRG: http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Xorshift            *&#x2F;            var shift &#x3D; function(x, y, z, w) &#123;              x &#x3D; x || 1234567;              y &#x3D; y || 362436069;              z &#x3D; z || 521288629;              w &#x3D; w || 88675123;              return function() &#123;                var s &#x3D; x ^ (x &lt;&lt; 11);                x &#x3D; y;                y &#x3D; z;                z &#x3D; w;                w &#x3D; (w ^ (w &gt;&gt;&gt; 19)) ^ (s ^ (s &gt;&gt;&gt; 8));                return w;              &#125;;            &#125;            window.addEventListener(&#39;resize&#39;, function() &#123;              c.width &#x3D; window.innerWidth;              c.height &#x3D; window.innerHeight;            &#125;, false);            window.requestAnimationFrame &#x3D; window.requestAnimationFrame||            window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame ||            window.msRequestAnimationFrame;            var run &#x3D; function() &#123;              window.requestAnimationFrame(run);              go();            &#125;            run();        &lt;&#x2F;script&gt;    &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Butterfly标签外挂的使用</title>
      <link href="/posts/f70065b1.html"/>
      <url>/posts/f70065b1.html</url>
      
        <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>文章节选自<a href="https://butterfly.js.org/posts/4aa8abbe/">butterfly</a></p><p>仅供个人学习参考，转载请声明文章来自</p><div class="note red flat"><p>作者: Jerry<br>連結: <a href="https://butterfly.js.org/posts/4aa8abbe/">https://butterfly.js.org/posts/4aa8abbe/</a><br>來源: Butterfly<br>著作權歸作者所有。商業轉載請聯絡作者獲得授權，非商業轉載請註明出處。</p></div><h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><pre class="line-numbers language-none"><code class="language-none">&#123;% note [color] [icon] [style] %&#125;这是note标签&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>名称</th><th align="center">用法</th></tr></thead><tbody><tr><td>color</td><td align="center">【可選】顔色(default &#x2F; blue &#x2F; pink &#x2F; red &#x2F; purple &#x2F; orange &#x2F; green)</td></tr><tr><td>icon</td><td align="center">【可選】可配置自定義 icon (只支持 fontawesome 圖標, 也可以配置 no-icon )</td></tr><tr><td>style</td><td align="center">【可選】可以覆蓋配置中的 style（simple&#x2F;modern&#x2F;flat&#x2F;disabled&#x2F;no-icon）</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">&#123;% note simple %&#125;默認 提示塊標籤&#123;% endnote %&#125;&#123;% note default simple %&#125;default 提示塊標籤&#123;% endnote %&#125;&#123;% note primary simple %&#125;primary 提示塊標籤&#123;% endnote %&#125;&#123;% note success simple %&#125;success 提示塊標籤&#123;% endnote %&#125;&#123;% note info simple %&#125;info 提示塊標籤&#123;% endnote %&#125;&#123;% note warning simple %&#125;warning 提示塊標籤&#123;% endnote %&#125;&#123;% note danger simple %&#125;danger 提示塊標籤&#123;% endnote %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="note simple"><p>默認 提示塊標籤</p></div><div class="note default simple"><p>default 提示塊標籤</p></div><div class="note primary simple"><p>primary 提示塊標籤</p></div><div class="note success simple"><p>success 提示塊標籤</p></div><div class="note info simple"><p>info 提示塊標籤</p></div><div class="note warning simple"><p>warning 提示塊標籤</p></div><div class="note danger simple"><p>danger 提示塊標籤</p></div><h2 id="gallery"><a href="#gallery" class="headerlink" title="gallery"></a>gallery</h2><pre class="line-numbers language-none"><code class="language-none">&lt;div class&#x3D;&quot;gallery-group-main&quot;&gt;&#123;% galleryGroup &#39;壁紙&#39; &#39;收藏的一些壁紙&#39; &#39;&#x2F;Gallery&#x2F;wallpaper&#39; https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;11&#x2F;10&#x2F;T7Mu8Aod3egmC4Q.png %&#125;&#123;% galleryGroup &#39;漫威&#39; &#39;關於漫威的圖片&#39; &#39;&#x2F;Gallery&#x2F;marvel&#39; https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;8t97aVlp4hgyBGu.jpg %&#125;&#123;% galleryGroup &#39;OH MY GIRL&#39; &#39;關於OH MY GIRL的圖片&#39; &#39;&#x2F;Gallery&#x2F;ohmygirl&#39; https:&#x2F;&#x2F;i.loli.net&#x2F;2019&#x2F;12&#x2F;25&#x2F;hOqbQ3BIwa6KWpo.jpg %&#125;&lt;&#x2F;div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="gallery-group-main"><figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">壁紙</div>  <p>收藏的一些壁紙</p>  <a href='/Gallery/wallpaper'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">漫威</div>  <p>關於漫威的圖片</p>  <a href='/Gallery/marvel'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">OH MY GIRL</div>  <p>關於OH MY GIRL的圖片</p>  <a href='/Gallery/ohmygirl'></a>  </figcaption>  </figure>  </div><p><strong>gallery相册</strong></p><div class="gallery-container" data-type="data" data-button="">      <div class="gallery-data">[{"url":"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg","alt":""},{"url":"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg","alt":""}]</div>      <div class="gallery-items">      </div>    </div><h2 id="tag-hide"><a href="#tag-hide" class="headerlink" title="tag-hide"></a>tag-hide</h2><p><strong>Toggle</strong></p><pre class="line-numbers language-none"><code class="language-none">&#123;% hideToggle Butterfly安裝方法 %&#125;在你的博客根目錄裏git clone -b master https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;Butterfly如果想要安裝比較新的dev分支，可以git clone -b dev https:&#x2F;&#x2F;github.com&#x2F;jerryc127&#x2F;hexo-theme-butterfly.git themes&#x2F;Butterfly&#123;% endhideToggle %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><details class="toggle" ><summary class="toggle-button" style="">Butterfly安裝方法</summary><div class="toggle-content"><p>在你的博客根目錄裏</p><p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;Butterfly</p><p>如果想要安裝比較新的dev分支，可以</p><p>git clone -b dev <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes&#x2F;Butterfly</p></div></details><p><strong>Block</strong></p><pre class="line-numbers language-none"><code class="language-none">查看答案&#123;% hideBlock 查看答案 %&#125;傻子，怎麼可能有答案&#123;% endhideBlock %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看答案</p><div class="hide-block"><button type="button" class="hide-button" style="">查看答案    </button><div class="hide-content"><p>傻子，怎麼可能有答案</p></div></div><p><strong>inline</strong></p><pre class="line-numbers language-none"><code class="language-none">哪個英文字母最酷？ &#123;% hideInline 因為西裝褲(C裝酷),查看答案,#FF7242,#fff %&#125;門裏站着一個人? &#123;% hideInline 閃 %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>哪個英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">因為西裝褲(C裝酷)</span></span></p><p>門裏站着一個人? <span class="hide-inline"><button type="button" class="hide-button" style="">Click  </button><span class="hide-content">閃</span></span></p><h2 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h2><pre class="line-numbers language-none"><code class="language-none">&#123;% mermaid %&#125;pie    title Key elements in Product X    &quot;Calcium&quot; : 42.96    &quot;Potassium&quot; : 50.05    &quot;Magnesium&quot; : 10.01    &quot;Iron&quot; :  5&#123;% endmermaid %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie    title Key elements in Product X    &quot;Calcium&quot; : 42.96    &quot;Potassium&quot; : 50.05    &quot;Magnesium&quot; : 10.01    &quot;Iron&quot; :  5  </pre></div><h2 id="tabs"><a href="#tabs" class="headerlink" title="tabs"></a>tabs</h2><pre class="line-numbers language-none"><code class="language-none">&#123;% tabs Unique name, [index] %&#125;&lt;!-- tab [Tab caption] [@icon] --&gt;Any content (support inline tags too).&lt;!-- endtab --&gt;&#123;% endtabs %&#125;Unique name   : Unique name of tabs block tag without comma.                Will be used in #id&#39;s as prefix for each tab with their index numbers.                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.                Only for current url of post&#x2F;page must be unique![index]       : Index number of active tab.                If not specified, first tab (1) will be selected.                If index is -1, no tab will be selected. It&#39;s will be something like spoiler.                Optional parameter.[Tab caption] : Caption of current tab.                If not caption specified, unique name with tab index suffix will be used as caption of tab.                If not caption specified, but specified icon, caption will empty.                Optional parameter.[@icon]       : FontAwesome icon name (full-name, look like &#39;fas fa-font&#39;)                Can be specified with or without space; e.g. &#39;Tab caption @icon&#39; similar to &#39;Tab caption@icon&#39;.                Optional parameter.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="tabs" id="test4"><ul class="nav-tabs"><button type="button" class="tab  active" data-href="test4-1">第一個Tab</button><button type="button" class="tab " data-href="test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button><button type="button" class="tab " data-href="test4-3"><i class="fas fa-bomb"></i>炸彈</button></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字為第一個Tab</strong></p></div><div class="tab-item-content" id="test4-2"><p><strong>只有圖標 沒有Tab名字</strong></p></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p></div></div><div class="tab-to-top"><button type="button" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div><h2 id="button"><a href="#button" class="headerlink" title="button"></a>button</h2><pre class="line-numbers language-none"><code class="language-none">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;[url]         : 鏈接[text]        : 按鈕文字[icon]        : [可選] 圖標[color]       : [可選] 按鈕背景顔色(默認style時）                      按鈕字體和邊框顔色(outline時)                      default&#x2F;blue&#x2F;pink&#x2F;red&#x2F;purple&#x2F;orange&#x2F;green[style]       : [可選] 按鈕樣式 默認實心                      outline&#x2F;留空[layout]      : [可選] 按鈕佈局 默認為line                      block&#x2F;留空[position]    : [可選] 按鈕位置 前提是設置了layout為block 默認為左邊                      center&#x2F;right&#x2F;留空[size]        : [可選] 按鈕大小                      larger&#x2F;留空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例</p><pre class="line-numbers language-none"><code class="language-none">This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly %&#125;This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly,far fa-hand-point-right %&#125;This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly,,outline %&#125;This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly,far fa-hand-point-right,outline %&#125;This is my website, click the button &#123;% btn &#39;https:&#x2F;&#x2F;butterfly.js.org&#x2F;&#39;,Butterfly,far fa-hand-point-right,larger %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/"   title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/"   title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify larger" href="https://butterfly.js.org/"   title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p><h2 id="inlineimg"><a href="#inlineimg" class="headerlink" title="inlineimg"></a>inlineimg</h2><pre class="line-numbers language-none"><code class="language-none">&#123;% inlineImg [src] [height] %&#125;[src]      :    圖片鏈接[height]   ：   圖片高度限制【可選】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">你看我長得漂亮不![](https:&#x2F;&#x2F;i.loli.net&#x2F;2021&#x2F;03&#x2F;19&#x2F;2P6ivUGsdaEXSFI.png)我覺得很漂亮 &#123;% inlineImg https:&#x2F;&#x2F;i.loli.net&#x2F;2021&#x2F;03&#x2F;19&#x2F;5M4jUB3ynq7ePgw.png 150px %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你看我長得漂亮不</p><p><img src="https://i.loli.net/2021/03/19/2P6ivUGsdaEXSFI.png"></p><p>我覺得很漂亮 <img class="inline-img" src="https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png" style="height:150px" /></p><h2 id="label"><a href="#label" class="headerlink" title="label"></a>label</h2><pre class="line-numbers language-none"><code class="language-none">臣亮言：&#123;% label 先帝 %&#125;創業未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此誠&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈於內；&#123;% label 忠志之士 purple %&#125;，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。宮中、府中，俱為一體；陟罰臧否，不宜異同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>臣亮言：<mark class="hl-label default">先帝</mark> 創業未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此誠<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈於內；<mark class="hl-label purple">忠志之士</mark> ，忘身於外者，蓋追先帝之殊遇，欲報之於陛下也。誠宜開張聖聽，以光先帝遺德，恢弘志士之氣；不宜妄自菲薄，引喻失義，以塞忠諫之路也。<br>宮中、府中，俱為一體；陟罰臧否，不宜異同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及為忠善者，宜付有司，論其刑賞，以昭陛下平明之治；不宜偏私，使內外異法也。</p><h2 id="timeline"><a href="#timeline" class="headerlink" title="timeline"></a>timeline</h2><pre class="line-numbers language-none"><code class="language-none">&#123;% timeline title,color %&#125;&lt;!-- timeline title --&gt;xxxxx&lt;!-- endtimeline --&gt;&lt;!-- timeline title --&gt;xxxxx&lt;!-- endtimeline --&gt;&#123;% endtimeline %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数</th><th align="center">用法</th></tr></thead><tbody><tr><td>title</td><td align="center">标题&#x2F;时间线</td></tr><tr><td>color</td><td align="center">timeline 顏色default(留空) &#x2F; blue &#x2F; pink &#x2F; red &#x2F;purple &#x2F; orange &#x2F; green</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none">&#123;% timeline 2022 %&#125;&lt;!-- timeline 01-02 --&gt;這是測試頁面&lt;!-- endtimeline --&gt;&#123;% endtimeline %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="timeline undefined"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>2022</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>01-02</p></div></div><div class='timeline-item-content'><p>這是測試頁面</p></div></div></div><h2 id="flink"><a href="#flink" class="headerlink" title="flink"></a>flink</h2><p>可在任何界面插入類似友情鏈接列表效果</p><p>內容格式與友情鏈接界面一樣，支持 yml 格式</p><pre class="line-numbers language-none"><code class="language-none">&#123;% flink %&#125;xxxxxx&#123;% endflink %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&#123;% flink %&#125;- class_name: 友情鏈接  class_desc: 那些人，那些事  link_list:    - name: JerryC      link: https:&#x2F;&#x2F;jerryc.me&#x2F;      avatar: https:&#x2F;&#x2F;jerryc.me&#x2F;img&#x2F;avatar.png      descr: 今日事,今日畢    - name: Hexo      link: https:&#x2F;&#x2F;hexo.io&#x2F;zh-tw&#x2F;      avatar: https:&#x2F;&#x2F;d33wubrfki0l68.cloudfront.net&#x2F;6657ba50e702d84afb32fe846bed54fba1a77add&#x2F;827ae&#x2F;logo.svg      descr: 快速、簡單且強大的網誌框架- class_name: 網站  class_desc: 值得推薦的網站  link_list:    - name: Youtube      link: https:&#x2F;&#x2F;www.youtube.com&#x2F;      avatar: https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;05&#x2F;14&#x2F;9ZkGg8v3azHJfM1.png      descr: 視頻網站    - name: Weibo      link: https:&#x2F;&#x2F;www.weibo.com&#x2F;      avatar: https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;05&#x2F;14&#x2F;TLJBum386vcnI1P.png      descr: 中國最大社交分享平台    - name: Twitter      link: https:&#x2F;&#x2F;twitter.com&#x2F;      avatar: https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;05&#x2F;14&#x2F;5VyHPQqR6LWF39a.png      descr: 社交分享平台&#123;% endflink %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="flink"><div class="flink-name">友情鏈接</div><div class="flink-desc">那些人，那些事</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://jerryc.me/" title="JerryC" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://jerryc.me/img/avatar.png" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="JerryC" />              </div>              <div class="flink-item-name">JerryC</div>               <div class="flink-item-desc" title="今日事,今日畢">今日事,今日畢</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://hexo.io/zh-tw/" title="Hexo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="Hexo" />              </div>              <div class="flink-item-name">Hexo</div>               <div class="flink-item-desc" title="快速、簡單且強大的網誌框架">快速、簡單且強大的網誌框架</div>            </a>          </div></div><div class="flink-name">網站</div><div class="flink-desc">值得推薦的網站</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.youtube.com/" title="Youtube" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="Youtube" />              </div>              <div class="flink-item-name">Youtube</div>               <div class="flink-item-desc" title="視頻網站">視頻網站</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.weibo.com/" title="Weibo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="Weibo" />              </div>              <div class="flink-item-name">Weibo</div>               <div class="flink-item-desc" title="中國最大社交分享平台">中國最大社交分享平台</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://twitter.com/" title="Twitter" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png" onerror='this.onerror=null;this.src="/img/%E9%93%BE%E6%8E%A5.png"' alt="Twitter" />              </div>              <div class="flink-item-name">Twitter</div>               <div class="flink-item-desc" title="社交分享平台">社交分享平台</div>            </a>          </div></div></div>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSD、HDD 你都了解多少？</title>
      <link href="/posts/2b23e073.html"/>
      <url>/posts/2b23e073.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  你的电脑内存还有多少呢？不知道大家平时会不会关注这些问题呢，大白的笔记本内存是8+512G的，平时下些基本软件，然后ps和几个编程软件，再来几个大游戏就能见底。更别说在虚拟机装上几个系统，还想让它流畅运行，简直天方夜谭！于是为了进一步优化自己的体验，大白终于在双十一剁手买了一条SSD 980（500G），现在双十一售价在430左右。当然，预算充足最好买1T的啦。</p><ul><li><p>如果你的电脑是因为硬盘老旧而卡顿</p></li><li><p>如果你想和大白一样实现空间自由</p></li><li><p>如果·····（想不到排比句了）</p></li><li><p>如果你也想选购一款性价比超高的硬盘 。那么，大白为你总结了一些关于硬盘和其它存储设备的知识点，避免踩坑！！看完这篇文章，趁着双十一还有优惠，赶紧入手啦！</p></li></ul><blockquote><p>这是全网最全面的硬盘选购指南（为什么说最全呢，因为大白已经把知乎上所有有关回答都看了一遍）</p><p>对于网上那些所谓的“年度最具性价比”、“最适合学生党”，大白总是半信半疑。网络上，科普与广告鱼龙混杂，一不小心就会被割韭菜。所以掌握一些基本知识还是很有必要的！</p></blockquote><h2 id="硬盘基本知识"><a href="#硬盘基本知识" class="headerlink" title="硬盘基本知识"></a>硬盘基本知识</h2><p>想了解的同学可以看一下，想入手硬盘的可以直接看后面的<strong>两种硬盘对比</strong>部分。</p><p><img src="https://s2.loli.net/2022/10/31/7NJVz5QSwprgKP3.png" alt="计算机存储.png"></p><p>如图所示，计算机存储的工作原理：</p><ul><li>计算机先从硬盘中读取数据</li><li>数据从硬盘进入内存条（RAM）</li><li>cpu从内存条中取数据进行运算所以对于计算机而言，硬盘的读取速度决定着平台的启动速度，而不是CPU以及内存条。</li></ul><p>目前市面上的硬盘有固态硬盘（又称SSD盘，新式硬盘）、机械硬盘（HHD传统硬盘）、混合硬盘（HHD 基于传统机械硬盘诞生出来的新硬盘）</p><p>最主要的只是前两种，<strong>固态硬盘（SSD）</strong>和  <strong>机械硬盘（HDD）</strong>.（<strong>为什么混合硬盘没人买？</strong>看文末的回答）</p><h2 id="两种硬盘对比（两者相对而言）"><a href="#两种硬盘对比（两者相对而言）" class="headerlink" title="两种硬盘对比（两者相对而言）"></a>两种硬盘对比（两者相对而言）</h2><p><img src="https://s2.loli.net/2022/10/31/GdtexObMoSfRLml.png" alt="硬盘速度对比.png"></p><p><strong>速度方面，可以说，高下立判   但是考虑到一些其他因素，有些时候并不总是SSD性价比高</strong></p><h3 id="固态硬盘"><a href="#固态硬盘" class="headerlink" title="固态硬盘"></a>固态硬盘</h3><blockquote><p>优点：轻巧、耐摔、无噪音、速度快</p></blockquote><blockquote><p>缺点：相对来说贵一点、数据不容易恢复</p></blockquote><p><img src="https://s2.loli.net/2022/10/31/buFILTRK47nl2cB.jpg" alt="SSD结构图"></p><p>影响固态硬盘速度的主要因素有：</p><ul><li><p>协议和接口类型（主要）</p></li><li><p>固态的内部构件（主控、闪存颗粒、外置缓存）</p><blockquote><p>一般来说，寿命和性能：3D Xpoint颗粒(inter)&gt; SQL颗粒&gt;MLC颗粒&gt;TLC颗粒(最常见)&gt;QLC颗粒</p><p>大白在这就只讲讲协议和接口层面，看完选一款合适的固态硬盘，完全够用。如果你想了解更深层的因素</p><p>可以去看看这篇文章<a href="https://www.reneelab.com.cn/difference-slc-mlc-tlc.html">链接</a></p></blockquote></li></ul><h3 id="先来基本了解一下协议和接口类型："><a href="#先来基本了解一下协议和接口类型：" class="headerlink" title="先来基本了解一下协议和接口类型："></a>先来基本了解一下协议和接口类型：</h3><p><img src="https://s2.loli.net/2022/10/31/MfecN7lodUua3Qh.jpg" alt="协议"></p><blockquote><p>协议：数据传输的标准，是数据传输双方共同遵循的一种规定准则.(NVME 快 , AHCI 慢)</p><p>总线通道：电脑元器件之间的通道，决定了硬盘速度的上限.(PCIE 快，SATA 慢)</p><p>接口：就是物理层面的接口，接口会和总线绑定，会影响硬盘速度上线，还会影响一个硬盘的外观（SATA 慢 ，PCIE  快，M.2 有三种设计    具体看文末<strong>关于M.2插槽兼容性和协议模式</strong>）</p></blockquote><p>根据常见的接口类型，固态硬盘大致可分为两类：SATA固态硬盘和M.2固态硬盘。</p><h3 id="SATA固态"><a href="#SATA固态" class="headerlink" title="SATA固态"></a>SATA固态</h3><img src="https://s2.loli.net/2022/10/31/r6H5BNnKltDI91s.jpg" alt="SATA固态" style="zoom:50%;" /><p>SATA固态硬盘外表呈小方块状，属于基础级别，仍采用传统硬盘的SATA接口,但该接口仍广泛应用于主流硬盘中 此外，虽然SATA固态硬盘只能走SATA总线，仅支持AHCI协议，但是SATA固态硬盘的速度比传统机械硬盘的速度要快，大概是机械硬盘的四倍（大概五百兆每秒左右）</p><h3 id="M-2固态"><a href="#M-2固态" class="headerlink" title="M.2固态"></a>M.2固态</h3><p><img src="https://s2.loli.net/2022/10/31/LB4AtSxj31Feun8.jpg" alt="M.2固态"></p><p>M.2固态是长条状，硬盘体积较小，也更轻薄，特别适用于笔记本电脑。M.2固态硬盘兼容AHCI和NVMe两种协议，可以走SATA或PCI-e通道。需要注意的是，并非所有M.2固态硬盘比SATA硬盘要快，因为M.2固态硬盘的速度也取决于其匹配的协议和通道。（速度从一千到几千兆每秒不等）</p><blockquote><p>对于品牌，大白不多做评价，也不会推荐，大白只总结知识点！</p></blockquote><table><thead><tr><th></th><th align="center">WD10EZEX标配</th><th align="center">860 EVO</th><th align="center">980</th><th align="center">980 PRO</th></tr></thead><tbody><tr><td>硬盘类型</td><td align="center">机械硬盘</td><td align="center">SATA固态</td><td align="center">M.2固态</td><td align="center">M.2固态</td></tr><tr><td>容量</td><td align="center">1TB</td><td align="center">1TB</td><td align="center">1TB</td><td align="center">1TB</td></tr><tr><td>价格</td><td align="center">270</td><td align="center">1000</td><td align="center">800</td><td align="center">1600</td></tr><tr><td>上层协议</td><td align="center">无</td><td align="center">AHCI</td><td align="center">NVME</td><td align="center">NVME</td></tr><tr><td>通道</td><td align="center">无</td><td align="center">SATA</td><td align="center">PCIE</td><td align="center">PCIE</td></tr><tr><td>读速</td><td align="center">60-150MB&#x2F;s</td><td align="center">550MB&#x2F;s</td><td align="center">3500MB&#x2F;s</td><td align="center">6900MB&#x2F;s</td></tr><tr><td>写速</td><td align="center">60-150MB&#x2F;s</td><td align="center">520MB&#x2F;s</td><td align="center">3000MB&#x2F;s</td><td align="center">5000MB&#x2F;s</td></tr></tbody></table><blockquote><p>细心的同学已经发现了，明明980和980PRO协议和接口都一样，为什么980PRO能快一倍呢！</p><p>这就涉及到另一个因素，内部构造。如果你想了解更深层的因素可以去看看这篇文章<a href="">链接</a></p></blockquote><h3 id="机械硬盘"><a href="#机械硬盘" class="headerlink" title="机械硬盘"></a>机械硬盘</h3><blockquote><p>优点：容量大 、便宜、数据恢复难度低 </p></blockquote><blockquote><p>缺点：读写速度慢</p></blockquote><p><img src="https://s2.loli.net/2022/10/31/XN9ShIt52gnGFzV.jpg" alt="HDD结构图"></p><p>机械硬盘的原理：电磁存储</p><p>它的外形有些像近现代的留声机。磁盘旋转，磁头在磁盘表面移动，读取或写入数据，转速越快，读写速度越快（速度往往不会超过两百兆每秒）</p><p>2021年，是机械硬盘诞生的第64个年头，可以说，作为存储数据的硬件设备，机械硬盘的技术已经十分成熟了</p><h3 id="关于数据恢复"><a href="#关于数据恢复" class="headerlink" title="关于数据恢复"></a>关于数据恢复</h3><ul><li>对于机械硬盘来说，就像是写铅笔字，可以说是无限次的写入次数</li><li>对于固态硬盘来说，就像是写钢笔字，固态硬盘中需要把有效数据抄到草稿纸上，将原先的一整页撕掉，然后再把新的数据和草稿上的有效数据放回去。但其实，无需担心固态硬盘的读写次数限制，比如市面上一款120GB的固态硬盘是，按照1000次的P&#x2F;E写入次数计算，这块硬盘的写入总量应该是120×1000&#x3D;120000GB，也就是你需要写入至少120TB的文件才会损坏，如果是每天写满120GB，要写1000天，也就是2.7年.而且，这个数据是个保底数据，就是说到了这个次数也不一定会坏，就算坏也不是马上就坏，可能会继续坚挺下去</li></ul><h3 id="关于M-2插槽兼容性和协议模式-买固态必看"><a href="#关于M-2插槽兼容性和协议模式-买固态必看" class="headerlink" title="关于M.2插槽兼容性和协议模式(买固态必看)"></a>关于M.2插槽兼容性和协议模式(买固态必看)</h3><p><strong>M.2固态的接口</strong></p><p>M.2固态的接口设计有3种，分别是 <strong>B key</strong>、**M key **和 <strong>B &amp; M key</strong>. 主要了解后两种，单独采用 **B key **接口的设备并不常见</p><img src="https://s2.loli.net/2022/10/31/GFzhncJdVgDWZaR.jpg" alt="M.2接口 " style="zoom:150%;" /><ul><li><p>M key，支持PCI-e x4通道（较快的）</p></li><li><p>B &amp; M key，在B key基础上扩展兼容性，既可以插B key的插槽，也可以插M key的插槽，但这种接口一般只支持SATA或PCI-e x2通道</p></li></ul><p><img src="https://s2.loli.net/2022/10/31/DvoIBl3Cy8MfOPs.jpg"></p><blockquote><p>所以M key接口才是更快的M.2固态，购买时认准一个缺口的M.key就行</p></blockquote><p><strong>M.2的尺寸</strong></p><p>根据长度又分为 <strong>2240 2260 2280 22110</strong></p><p>这里的<strong>22</strong>指的是固态的宽度，**40、60、80、110 **是长度</p><blockquote><p>（购买之前一定要了解清楚自己的电脑接口支持的固态硬盘尺寸哦）</p></blockquote><h3 id="为什么混合硬盘买的人少？（问题来自知乎，大白综合回答总结）"><a href="#为什么混合硬盘买的人少？（问题来自知乎，大白综合回答总结）" class="headerlink" title="为什么混合硬盘买的人少？（问题来自知乎，大白综合回答总结）"></a>为什么混合硬盘买的人少？（问题来自知乎，大白综合回答总结）</h3><p>混合硬盘<strong>性价比</strong>比不上SSD，是介于固态硬盘和机械硬盘的<strong>过渡产品</strong>。固态硬盘初期价格太高，折中出了这款混合硬盘</p><p>优点是复读取速度快</p><p>缺点是本质上还是机械硬盘</p><p>混合硬盘的闪存缓存一般只有8G，工作原理就是把读取多的部分放到闪存里，从而实现读取多的东西比较快 并不能实现全盘加速</p><p>混合硬盘放在2021年的今天这种SSD价格很低的情况下显得格格不入，但是这玩意刚出的时候那是真的厉害</p><p>放在10年前的2011年那时候的系统大小普遍不到4G</p><p>当时主流系统还是使用window xp而且安装完成后大小也才3G多</p><p>当时的混合硬盘SSD部分都是达到8G以上</p><p>当时的游戏大小也不超过8G，自然是香饽饽</p><h2 id="另外其他存储设备TF卡和SD卡、U盘和移动硬盘"><a href="#另外其他存储设备TF卡和SD卡、U盘和移动硬盘" class="headerlink" title="另外其他存储设备TF卡和SD卡、U盘和移动硬盘"></a>另外其他存储设备TF卡和SD卡、U盘和移动硬盘</h2><blockquote><p>多图警告⚠</p></blockquote><img src="https://s2.loli.net/2022/10/31/WFDLRMKjz84bpv7.jpg" style="zoom:70%;" /><p>TF卡由Motorola与SanDisk（闪迪）共同推出的最新一代的记忆卡规格。2004年推出。<strong>体积较小</strong>  TF卡主要于手机使用，但因它拥有体积极小的优点，随着不断提升的容量，它慢慢开始于GPS设备、便携式音乐播放器和一些快闪存储器盘中使用。</p><img src="https://s2.loli.net/2022/10/31/d1qbNWyLrk4SQpt.jpg" style="zoom:50%;" /><p>SD卡由日本松下、东芝及美国SanDisk公司于1999年8月共同开发研制。**体积大，有保护开关 **SD卡被广泛地于便携式装置上使用，例如数码相机、个人数码助理(PDA)和多媒体播放器等。</p><blockquote><p><strong>U盘和移动硬盘的比较</strong></p><p>使用寿命：U盘&lt;移动硬盘</p><p>速度上：U盘&lt;移动硬盘</p><p>便携性：U盘&gt;移动硬盘</p></blockquote><blockquote><p>移动硬盘无非就是硬盘加个壳连了根线，你可以当大号U盘使，但方不方便那就只有自己知道了。</p><p><strong>和普通硬盘有什么区别？</strong></p><p>寿命会更短。经常性拔插，并且因为是机体外，更容易受到颠簸损伤。</p></blockquote><p>关于U盘</p><p>补充一个小知识：U盘根据协议分为U盘2.0和U盘3.0    电脑的USB接口也会分2.0和3.0</p><ul><li><p>2.0的传输速度在几兆到几十兆每秒左右(接口中挡片是黑色的)</p></li><li><p>3.0的速度有几十兆到一百多兆每秒（接口中挡片是蓝色的）</p><img src="https://s2.loli.net/2022/10/31/qfbNRVuhFytzdT5.webp" style="zoom:50%;" /><p>（左边的是2.0右边的是3.0  ）</p><blockquote><p>3.0的U盘要配上3.0 USB 接口才能真正达到3.0的速度！</p></blockquote></li></ul><h2 id="加装了硬盘会有哪些变化"><a href="#加装了硬盘会有哪些变化" class="headerlink" title="加装了硬盘会有哪些变化"></a>加装了硬盘会有哪些变化</h2><ul><li><p>首先来说，看着空空的新盘，内存焦虑没有了。想存啥存啥，想下啥下啥</p></li><li><p>很多人说，装新固态，开机会变快。可是，系统不是在C盘嘛，难道也能变快？怎么说呢，大概是大白的电脑本来就不算慢，这点没怎么感受到。等下回把系统迁移到新盘试试，说不定能起飞</p></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>选购硬盘最好还是选大品牌的，不能光看数据和指标，内部颗粒芯片的质量也很重要，只有大品牌才能提供保障。</p><ul><li><p>明确自己的需求，是为了速度还是只是用来存储音视频图片文件</p></li><li><p>在购买固态硬盘时，要确认你的电脑主板支持哪种接口和通道</p></li><li><p>根据自己电脑的支持的接口和协议有针对性地选择方案</p></li><li><p>选择合适的品牌和价位</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 硬件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 硬盘 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
